!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABSOLUTE	SLM2.h	390;"	d
ALWAYS_SWAPDOUBLE	SLM2.h	279;"	d
ALWAYS_SWAPFIELD	SLM2.h	259;"	d
ALWAYS_SWAPHALF	SLM2.h	265;"	d
ALWAYS_SWAPWORD	SLM2.h	270;"	d
BUFFER	SLM2.h	395;"	d
Boolean	SLM2.h	/^typedef char Boolean;$/;"	t
CLOSED_VOCAB	SLM2.h	400;"	d
CMU_SLM_VERSION	SLM2.h	120;"	d
DEFAULT_COUNT_TABLE_SIZE	SLM2.h	381;"	d
DEFAULT_DISC_RANGE_1	SLM2.h	383;"	d
DEFAULT_DISC_RANGE_REST	SLM2.h	384;"	d
DEFAULT_MAX_ALPHA	SLM2.h	386;"	d
DEFAULT_MIN_ALPHA	SLM2.h	385;"	d
DEFAULT_N	SLM2.h	31;"	d
DEFAULT_OOV_FRACTION	SLM2.h	382;"	d
DEFAULT_OUT_OF_RANGE_ALPHAS	SLM2.h	387;"	d
DEFAULT_TEMP	SLM2.h	42;"	d
DEFAULT_VERBOSITY	SLM2.h	32;"	d
EXP	SLM2.h	161;"	d
GOOD_TURING	SLM2.h	389;"	d
KEY	SLM2.h	398;"	d
LINEAR	SLM2.h	391;"	d
LOG	SLM2.h	158;"	d
LOG_BASE	SLM2.h	156;"	d
MAX	SLM2.h	153;"	d
MAX_VOCAB_SIZE	SLM2.h	33;"	d
MAX_WORDS_PER_DOC	SLM2.h	175;"	d
MIN	SLM2.h	150;"	d
MIN_LOG	SLM2.h	157;"	d
OPEN_VOCAB_1	SLM2.h	401;"	d
OPEN_VOCAB_2	SLM2.h	402;"	d
SLM_SWAP_BYTES	SLM2.h	164;"	d
SPECIFIED	SLM2.h	394;"	d
STD_MEM	SLM2.h	41;"	d
SWAPDOUBLE	SLM2.h	222;"	d
SWAPDOUBLE	SLM2.h	254;"	d
SWAPFIELD	SLM2.h	203;"	d
SWAPFIELD	SLM2.h	251;"	d
SWAPHALF	SLM2.h	208;"	d
SWAPHALF	SLM2.h	252;"	d
SWAPWORD	SLM2.h	213;"	d
SWAPWORD	SLM2.h	253;"	d
TWO_PASSES	SLM2.h	396;"	d
VERSION	SLM2.h	44;"	d
WITTEN_BELL	SLM2.h	392;"	d
_EVALLM_PROTS_	SLM2.h	583;"	d
_GENERAL_H_	SLM2.h	117;"	d
_IDNGRAM2LM_H_	SLM2.h	739;"	d
_MIPS_SWAP_H_	SLM2.h	196;"	d
_NGRAM_H_	SLM2.h	378;"	d
_PCGEN_H_	SLM2.h	72;"	d
_SIH_H_	SLM2.h	314;"	d
_TOOLKIT_H_	SLM2.h	29;"	d
__anon1::intval	SLM2.h	/^	int32 intval;	   \/* Associated int32 value (output of hash function) *\/$/;"	m	struct:__anon1
__anon1::string	SLM2.h	/^	char *string;	   \/* string (input to hash function) *\/$/;"	m	struct:__anon1
__anon2::growth_ratio	SLM2.h	/^	double  growth_ratio;   \/* ratio of expansion when above is violated *\/$/;"	m	struct:__anon2
__anon2::max_occupancy	SLM2.h	/^	double  max_occupancy;  \/* max. allowed occupancy rate *\/$/;"	m	struct:__anon2
__anon2::nentries	SLM2.h	/^	int	nentries;	\/* # of actual entries *\/$/;"	m	struct:__anon2
__anon2::nslots	SLM2.h	/^	int	nslots;    	\/* # of slots in the hash table *\/$/;"	m	struct:__anon2
__anon2::slots	SLM2.h	/^	sih_slot_t *slots;	\/* array of (string,intval) pairs *\/$/;"	m	struct:__anon2
__anon2::warn_on_update	SLM2.h	/^	int     warn_on_update; \/* print warning if same string is hashed again *\/$/;"	m	struct:__anon2
__anon3::count	SLM2.h	/^  count_t        count;$/;"	m	struct:__anon3
__anon3::id_array	SLM2.h	/^  id__t          *id_array;$/;"	m	struct:__anon3
__anon3::n	SLM2.h	/^  unsigned short n;$/;"	m	struct:__anon3
__anon4::count_table_size	SLM2.h	/^  unsigned short count_table_size;$/;"	m	struct:__anon4
__anon4::counts_array	SLM2.h	/^  int            *counts_array;$/;"	m	struct:__anon4
__anon5::abs_disc_const	SLM2.h	/^  double         *abs_disc_const;        \/* The constant required for$/;"	m	struct:__anon5
__anon5::alpha_array	SLM2.h	/^  double         *alpha_array;$/;"	m	struct:__anon5
__anon5::arpa_filename	SLM2.h	/^  char           *arpa_filename;  \/* The filaname of the arpa format LM *\/$/;"	m	struct:__anon5
__anon5::arpa_fp	SLM2.h	/^  FILE           *arpa_fp;        \/* The file of the arpa format LM *\/$/;"	m	struct:__anon5
__anon5::bin_filename	SLM2.h	/^  char           *bin_filename;   \/* The filaname of the bin format LM *\/$/;"	m	struct:__anon5
__anon5::bin_fp	SLM2.h	/^  FILE           *bin_fp;         \/* The file of the bin format LM *\/$/;"	m	struct:__anon5
__anon5::bo_weight	SLM2.h	/^  bo_weight_t    **bo_weight;    \/* Pointer to array of back-off weights *\/$/;"	m	struct:__anon5
__anon5::bo_weight4	SLM2.h	/^  four_byte_t    **bo_weight4;   \/* Pointer to array of 4 byte$/;"	m	struct:__anon5
__anon5::context_cue	SLM2.h	/^  flag           *context_cue;           \/* True if word with this id is$/;"	m	struct:__anon5
__anon5::context_cues_filename	SLM2.h	/^  char           *context_cues_filename; \/* The filename of the context cues $/;"	m	struct:__anon5
__anon5::context_cues_fp	SLM2.h	/^  FILE           *context_cues_fp;       \/* The file pointer of the context $/;"	m	struct:__anon5
__anon5::count	SLM2.h	/^  count_ind_t    **count;        \/* Pointer to array of count lists $/;"	m	struct:__anon5
__anon5::count4	SLM2.h	/^  int            **count4;       \/* Alternative method of storing the counts,$/;"	m	struct:__anon5
__anon5::count_table	SLM2.h	/^  count_t        **count_table;    \/* Pointer to array of count tables *\/$/;"	m	struct:__anon5
__anon5::count_table_size	SLM2.h	/^  count_ind_t    count_table_size; \/* Have same size for each count table *\/$/;"	m	struct:__anon5
__anon5::cutoffs	SLM2.h	/^  cutoff_t       *cutoffs;               \/* Array of cutoffs *\/$/;"	m	struct:__anon5
__anon5::disc_range	SLM2.h	/^  unsigned short *disc_range;            \/* Pointer to array of discounting $/;"	m	struct:__anon5
__anon5::discounting_method	SLM2.h	/^  unsigned short discounting_method;     \/* See #define stuff at the top of $/;"	m	struct:__anon5
__anon5::first_id	SLM2.h	/^  unsigned short first_id;        \/* 0 if we have open vocab, 1 if we have$/;"	m	struct:__anon5
__anon5::fof_size	SLM2.h	/^  unsigned short *fof_size;              \/* The sizes of the above arrays *\/$/;"	m	struct:__anon5
__anon5::four_byte_alphas	SLM2.h	/^  flag           four_byte_alphas;$/;"	m	struct:__anon5
__anon5::four_byte_counts	SLM2.h	/^  flag           four_byte_counts;$/;"	m	struct:__anon5
__anon5::freq_of_freq	SLM2.h	/^  int            **freq_of_freq;         \/* Array of frequency of frequency $/;"	m	struct:__anon5
__anon5::gt_disc_ratio	SLM2.h	/^  disc_val_t     **gt_disc_ratio;        \/* The discounted values of the $/;"	m	struct:__anon5
__anon5::id_gram_filename	SLM2.h	/^  char           *id_gram_filename;  \/* The filename of the id-gram file *\/$/;"	m	struct:__anon5
__anon5::id_gram_fp	SLM2.h	/^  FILE           *id_gram_fp;        \/* The file pointer of the id-gram file *\/$/;"	m	struct:__anon5
__anon5::ind	SLM2.h	/^  index__t       **ind;          \/* Pointer to array of index lists *\/$/;"	m	struct:__anon5
__anon5::lin_disc_ratio	SLM2.h	/^  disc_val_t     *lin_disc_ratio;        \/* The linear discounting ratio *\/$/;"	m	struct:__anon5
__anon5::marg_counts	SLM2.h	/^  count_ind_t    *marg_counts;   \/* Array of marginal counts for the $/;"	m	struct:__anon5
__anon5::marg_counts4	SLM2.h	/^  int            *marg_counts4;  \/* Ditto *\/$/;"	m	struct:__anon5
__anon5::max_alpha	SLM2.h	/^  double         max_alpha;      \/* The maximum alpha in the table *\/$/;"	m	struct:__anon5
__anon5::min_alpha	SLM2.h	/^  double         min_alpha;      \/* The minimum alpha in the table *\/$/;"	m	struct:__anon5
__anon5::min_unicount	SLM2.h	/^  int            min_unicount;           \/* Count to which infrequent unigrams$/;"	m	struct:__anon5
__anon5::n	SLM2.h	/^  unsigned short n;                \/* n=3 for trigram, n=4 for 4-gram etc. *\/$/;"	m	struct:__anon5
__anon5::n_unigrams	SLM2.h	/^  int            n_unigrams;             \/* Total number of unigrams in$/;"	m	struct:__anon5
__anon5::no_of_ccs	SLM2.h	/^  unsigned short no_of_ccs;      \/* Number of context cues *\/$/;"	m	struct:__anon5
__anon5::num_kgrams	SLM2.h	/^  int            *num_kgrams;     \/* Array indicating how many $/;"	m	struct:__anon5
__anon5::oov_fraction	SLM2.h	/^  double         oov_fraction;$/;"	m	struct:__anon5
__anon5::out_of_range_alphas	SLM2.h	/^  unsigned short out_of_range_alphas;  \/* The maximum number of out of range $/;"	m	struct:__anon5
__anon5::ptr_table	SLM2.h	/^  ptr_tab_t      **ptr_table;     \/* Pointer to the tables used for compact $/;"	m	struct:__anon5
__anon5::ptr_table_size	SLM2.h	/^  unsigned short *ptr_table_size; \/* Pointer to array of pointer tables *\/$/;"	m	struct:__anon5
__anon5::size_of_alpha_array	SLM2.h	/^  unsigned short size_of_alpha_array;$/;"	m	struct:__anon5
__anon5::table_sizes	SLM2.h	/^  table_size_t   *table_sizes;   \/* Pointer to table size array *\/$/;"	m	struct:__anon5
__anon5::uni_log_probs	SLM2.h	/^  uni_probs_t    *uni_log_probs;         \/* Log probs for each unigram *\/$/;"	m	struct:__anon5
__anon5::uni_probs	SLM2.h	/^  uni_probs_t    *uni_probs;             \/* Probs for each unigram *\/$/;"	m	struct:__anon5
__anon5::version	SLM2.h	/^  int            version;$/;"	m	struct:__anon5
__anon5::vocab	SLM2.h	/^  char           **vocab;        \/* Array of vocabulary words *\/$/;"	m	struct:__anon5
__anon5::vocab_filename	SLM2.h	/^  char           *vocab_filename;    \/* The filename of the vocabulary file *\/$/;"	m	struct:__anon5
__anon5::vocab_ht	SLM2.h	/^  sih_t          *vocab_ht;      \/* Vocabulary hash table *\/$/;"	m	struct:__anon5
__anon5::vocab_size	SLM2.h	/^  unsigned short vocab_size;     \/* Vocabulary size *\/$/;"	m	struct:__anon5
__anon5::vocab_type	SLM2.h	/^  unsigned short vocab_type;      \/* see #define stuff at the top *\/$/;"	m	struct:__anon5
__anon5::word_id	SLM2.h	/^  id__t          **word_id;      \/* Pointer to array of id lists *\/$/;"	m	struct:__anon5
__anon5::write_arpa	SLM2.h	/^  flag           write_arpa;      \/* True if the language model is to be $/;"	m	struct:__anon5
__anon5::write_bin	SLM2.h	/^  flag           write_bin;       \/* True if the language model is to be $/;"	m	struct:__anon5
__anon5::zeroton_fraction	SLM2.h	/^  double         zeroton_fraction; \/* cap on prob(zeroton) as fraction of $/;"	m	struct:__anon5
__anon6::backed_off	SLM2.h	/^  flag backed_off;$/;"	m	struct:__anon6
__anon6::inclusive	SLM2.h	/^  flag inclusive;$/;"	m	struct:__anon6
__anon7::bo_weight	SLM2.h	/^  bo_t           **bo_weight;    \/* Pointer to array of back-off weights *\/$/;"	m	struct:__anon7
__anon7::context_cue	SLM2.h	/^  flag           *context_cue;   \/* True if word with this id is$/;"	m	struct:__anon7
__anon7::first_id	SLM2.h	/^  unsigned short first_id;        \/* 0 if we have open vocab, 1 if we have$/;"	m	struct:__anon7
__anon7::ind	SLM2.h	/^  index__t       **ind;          \/* Pointer to array of index lists *\/$/;"	m	struct:__anon7
__anon7::n	SLM2.h	/^  unsigned short n;                \/* n=3 for trigram, n=4 for 4-gram etc. *\/$/;"	m	struct:__anon7
__anon7::no_of_ccs	SLM2.h	/^  int            no_of_ccs;      \/* The number of context cues in the LM *\/$/;"	m	struct:__anon7
__anon7::num_kgrams	SLM2.h	/^  int            *num_kgrams;     \/* Array indicating how many $/;"	m	struct:__anon7
__anon7::probs	SLM2.h	/^  prob_t         **probs;        \/* Pointer to array of probabilities *\/$/;"	m	struct:__anon7
__anon7::ptr_table	SLM2.h	/^  ptr_tab_t      **ptr_table;     \/* Pointer to the tables used for compact $/;"	m	struct:__anon7
__anon7::ptr_table_size	SLM2.h	/^  unsigned short *ptr_table_size; \/* Pointer to array of pointer tables *\/$/;"	m	struct:__anon7
__anon7::table_sizes	SLM2.h	/^  table_size_t   *table_sizes;   \/* Pointer to table size array *\/$/;"	m	struct:__anon7
__anon7::vocab	SLM2.h	/^  char           **vocab;        \/* Array of vocabulary words *\/$/;"	m	struct:__anon7
__anon7::vocab_ht	SLM2.h	/^  sih_t          *vocab_ht;      \/* Vocabulary hash table *\/$/;"	m	struct:__anon7
__anon7::vocab_size	SLM2.h	/^  unsigned short vocab_size;     \/* Vocabulary size *\/$/;"	m	struct:__anon7
__anon7::vocab_type	SLM2.h	/^  unsigned short vocab_type;      \/* see #define stuff at the top *\/$/;"	m	struct:__anon7
__anon7::word_id	SLM2.h	/^  id__t          **word_id;      \/* Pointer to array of id lists *\/$/;"	m	struct:__anon7
abs_disc_const	SLM2.h	/^  double         *abs_disc_const;        \/* The constant required for$/;"	m	struct:__anon5
alpha_array	SLM2.h	/^  double         *alpha_array;$/;"	m	struct:__anon5
arpa_filename	SLM2.h	/^  char           *arpa_filename;  \/* The filaname of the arpa format LM *\/$/;"	m	struct:__anon5
arpa_fp	SLM2.h	/^  FILE           *arpa_fp;        \/* The file of the arpa format LM *\/$/;"	m	struct:__anon5
arpa_lm_t	SLM2.h	/^} arpa_lm_t;$/;"	t	typeref:struct:__anon7
backed_off	SLM2.h	/^  flag backed_off;$/;"	m	struct:__anon6
bin_filename	SLM2.h	/^  char           *bin_filename;   \/* The filaname of the bin format LM *\/$/;"	m	struct:__anon5
bin_fp	SLM2.h	/^  FILE           *bin_fp;         \/* The file of the bin format LM *\/$/;"	m	struct:__anon5
bo_t	SLM2.h	/^typedef float bo_t;$/;"	t
bo_weight	SLM2.h	/^  bo_t           **bo_weight;    \/* Pointer to array of back-off weights *\/$/;"	m	struct:__anon7
bo_weight	SLM2.h	/^  bo_weight_t    **bo_weight;    \/* Pointer to array of back-off weights *\/$/;"	m	struct:__anon5
bo_weight4	SLM2.h	/^  four_byte_t    **bo_weight4;   \/* Pointer to array of 4 byte$/;"	m	struct:__anon5
bo_weight_t	SLM2.h	/^typedef unsigned short bo_weight_t;$/;"	t
cluster_t	SLM2.h	/^typedef int    cluster_t;$/;"	t
context_cue	SLM2.h	/^  flag           *context_cue;           \/* True if word with this id is$/;"	m	struct:__anon5
context_cue	SLM2.h	/^  flag           *context_cue;   \/* True if word with this id is$/;"	m	struct:__anon7
context_cues_filename	SLM2.h	/^  char           *context_cues_filename; \/* The filename of the context cues $/;"	m	struct:__anon5
context_cues_fp	SLM2.h	/^  FILE           *context_cues_fp;       \/* The file pointer of the context $/;"	m	struct:__anon5
count	SLM2.h	/^  count_ind_t    **count;        \/* Pointer to array of count lists $/;"	m	struct:__anon5
count	SLM2.h	/^  count_t        count;$/;"	m	struct:__anon3
count4	SLM2.h	/^  int            **count4;       \/* Alternative method of storing the counts,$/;"	m	struct:__anon5
count_ind_t	SLM2.h	/^typedef unsigned short count_ind_t; \/* The count's index in the count $/;"	t
count_t	SLM2.h	/^typedef int count_t;   \/* The count as read in, rather than its index $/;"	t
count_table	SLM2.h	/^  count_t        **count_table;    \/* Pointer to array of count tables *\/$/;"	m	struct:__anon5
count_table_size	SLM2.h	/^  count_ind_t    count_table_size; \/* Have same size for each count table *\/$/;"	m	struct:__anon5
count_table_size	SLM2.h	/^  unsigned short count_table_size;$/;"	m	struct:__anon4
count_table_t	SLM2.h	/^} count_table_t;$/;"	t	typeref:struct:__anon4
counts_array	SLM2.h	/^  int            *counts_array;$/;"	m	struct:__anon4
cutoff_t	SLM2.h	/^typedef unsigned short cutoff_t;$/;"	t
cutoffs	SLM2.h	/^  cutoff_t       *cutoffs;               \/* Array of cutoffs *\/$/;"	m	struct:__anon5
disc_range	SLM2.h	/^  unsigned short *disc_range;            \/* Pointer to array of discounting $/;"	m	struct:__anon5
disc_val_t	SLM2.h	/^typedef double disc_val_t;$/;"	t
discounting_method	SLM2.h	/^  unsigned short discounting_method;     \/* See #define stuff at the top of $/;"	m	struct:__anon5
fb_info	SLM2.h	/^} fb_info;$/;"	t	typeref:struct:__anon6
first_id	SLM2.h	/^  unsigned short first_id;        \/* 0 if we have open vocab, 1 if we have$/;"	m	struct:__anon5
first_id	SLM2.h	/^  unsigned short first_id;        \/* 0 if we have open vocab, 1 if we have$/;"	m	struct:__anon7
flag	SLM2.h	/^typedef unsigned short flag;$/;"	t
fof_size	SLM2.h	/^  unsigned short *fof_size;              \/* The sizes of the above arrays *\/$/;"	m	struct:__anon5
four_byte_alphas	SLM2.h	/^  flag           four_byte_alphas;$/;"	m	struct:__anon5
four_byte_counts	SLM2.h	/^  flag           four_byte_counts;$/;"	m	struct:__anon5
four_byte_t	SLM2.h	/^typedef float four_byte_t;$/;"	t
freq_of_freq	SLM2.h	/^  int            **freq_of_freq;         \/* Array of frequency of frequency $/;"	m	struct:__anon5
growth_ratio	SLM2.h	/^	double  growth_ratio;   \/* ratio of expansion when above is violated *\/$/;"	m	struct:__anon2
gt_disc_ratio	SLM2.h	/^  disc_val_t     **gt_disc_ratio;        \/* The discounted values of the $/;"	m	struct:__anon5
id__t	SLM2.h	/^typedef unsigned short id__t; \/* Double underscore, since id_t is$/;"	t
id_array	SLM2.h	/^  id__t          *id_array;$/;"	m	struct:__anon3
id_gram_filename	SLM2.h	/^  char           *id_gram_filename;  \/* The filename of the id-gram file *\/$/;"	m	struct:__anon5
id_gram_fp	SLM2.h	/^  FILE           *id_gram_fp;        \/* The file pointer of the id-gram file *\/$/;"	m	struct:__anon5
inclusive	SLM2.h	/^  flag inclusive;$/;"	m	struct:__anon6
ind	SLM2.h	/^  index__t       **ind;          \/* Pointer to array of index lists *\/$/;"	m	struct:__anon5
ind	SLM2.h	/^  index__t       **ind;          \/* Pointer to array of index lists *\/$/;"	m	struct:__anon7
index__t	SLM2.h	/^typedef unsigned short index__t;$/;"	t
int16	SLM2.h	/^typedef short int16;$/;"	t
int32	SLM2.h	/^typedef int   int32;$/;"	t
intval	SLM2.h	/^	int32 intval;	   \/* Associated int32 value (output of hash function) *\/$/;"	m	struct:__anon1
lin_disc_ratio	SLM2.h	/^  disc_val_t     *lin_disc_ratio;        \/* The linear discounting ratio *\/$/;"	m	struct:__anon5
marg_counts	SLM2.h	/^  count_ind_t    *marg_counts;   \/* Array of marginal counts for the $/;"	m	struct:__anon5
marg_counts4	SLM2.h	/^  int            *marg_counts4;  \/* Ditto *\/$/;"	m	struct:__anon5
max_alpha	SLM2.h	/^  double         max_alpha;      \/* The maximum alpha in the table *\/$/;"	m	struct:__anon5
max_occupancy	SLM2.h	/^	double  max_occupancy;  \/* max. allowed occupancy rate *\/$/;"	m	struct:__anon2
min_alpha	SLM2.h	/^  double         min_alpha;      \/* The minimum alpha in the table *\/$/;"	m	struct:__anon5
min_unicount	SLM2.h	/^  int            min_unicount;           \/* Count to which infrequent unigrams$/;"	m	struct:__anon5
n	SLM2.h	/^  unsigned short n;                \/* n=3 for trigram, n=4 for 4-gram etc. *\/$/;"	m	struct:__anon5
n	SLM2.h	/^  unsigned short n;                \/* n=3 for trigram, n=4 for 4-gram etc. *\/$/;"	m	struct:__anon7
n	SLM2.h	/^  unsigned short n;$/;"	m	struct:__anon3
n_unigrams	SLM2.h	/^  int            n_unigrams;             \/* Total number of unigrams in$/;"	m	struct:__anon5
nentries	SLM2.h	/^	int	nentries;	\/* # of actual entries *\/$/;"	m	struct:__anon2
ng_t	SLM2.h	/^} ng_t;$/;"	t	typeref:struct:__anon5
ngram	SLM2.h	/^} ngram;$/;"	t	typeref:struct:__anon3
no_of_ccs	SLM2.h	/^  int            no_of_ccs;      \/* The number of context cues in the LM *\/$/;"	m	struct:__anon7
no_of_ccs	SLM2.h	/^  unsigned short no_of_ccs;      \/* Number of context cues *\/$/;"	m	struct:__anon5
nslots	SLM2.h	/^	int	nslots;    	\/* # of slots in the hash table *\/$/;"	m	struct:__anon2
num_kgrams	SLM2.h	/^  int            *num_kgrams;     \/* Array indicating how many $/;"	m	struct:__anon5
num_kgrams	SLM2.h	/^  int            *num_kgrams;     \/* Array indicating how many $/;"	m	struct:__anon7
oov_fraction	SLM2.h	/^  double         oov_fraction;$/;"	m	struct:__anon5
out_of_range_alphas	SLM2.h	/^  unsigned short out_of_range_alphas;  \/* The maximum number of out of range $/;"	m	struct:__anon5
prob_t	SLM2.h	/^typedef float prob_t;$/;"	t
probs	SLM2.h	/^  prob_t         **probs;        \/* Pointer to array of probabilities *\/$/;"	m	struct:__anon7
ptr_tab_t	SLM2.h	/^typedef int ptr_tab_t;$/;"	t
ptr_table	SLM2.h	/^  ptr_tab_t      **ptr_table;     \/* Pointer to the tables used for compact $/;"	m	struct:__anon5
ptr_table	SLM2.h	/^  ptr_tab_t      **ptr_table;     \/* Pointer to the tables used for compact $/;"	m	struct:__anon7
ptr_table_size	SLM2.h	/^  unsigned short *ptr_table_size; \/* Pointer to array of pointer tables *\/$/;"	m	struct:__anon5
ptr_table_size	SLM2.h	/^  unsigned short *ptr_table_size; \/* Pointer to array of pointer tables *\/$/;"	m	struct:__anon7
quit0	SLM2.h	169;"	d
quit1	SLM2.h	170;"	d
quit2	SLM2.h	171;"	d
quit3	SLM2.h	172;"	d
quit4	SLM2.h	173;"	d
sih_slot_t	SLM2.h	/^} sih_slot_t;$/;"	t	typeref:struct:__anon1
sih_t	SLM2.h	/^} sih_t;$/;"	t	typeref:struct:__anon2
size_of_alpha_array	SLM2.h	/^  unsigned short size_of_alpha_array;$/;"	m	struct:__anon5
slots	SLM2.h	/^	sih_slot_t *slots;	\/* array of (string,intval) pairs *\/$/;"	m	struct:__anon2
string	SLM2.h	/^	char *string;	   \/* string (input to hash function) *\/$/;"	m	struct:__anon1
table_size_t	SLM2.h	/^typedef int table_size_t;$/;"	t
table_sizes	SLM2.h	/^  table_size_t   *table_sizes;   \/* Pointer to table size array *\/$/;"	m	struct:__anon5
table_sizes	SLM2.h	/^  table_size_t   *table_sizes;   \/* Pointer to table size array *\/$/;"	m	struct:__anon7
uni_log_probs	SLM2.h	/^  uni_probs_t    *uni_log_probs;         \/* Log probs for each unigram *\/$/;"	m	struct:__anon5
uni_probs	SLM2.h	/^  uni_probs_t    *uni_probs;             \/* Probs for each unigram *\/$/;"	m	struct:__anon5
uni_probs_t	SLM2.h	/^typedef double uni_probs_t;$/;"	t
version	SLM2.h	/^  int            version;$/;"	m	struct:__anon5
vocab	SLM2.h	/^  char           **vocab;        \/* Array of vocabulary words *\/$/;"	m	struct:__anon5
vocab	SLM2.h	/^  char           **vocab;        \/* Array of vocabulary words *\/$/;"	m	struct:__anon7
vocab_filename	SLM2.h	/^  char           *vocab_filename;    \/* The filename of the vocabulary file *\/$/;"	m	struct:__anon5
vocab_ht	SLM2.h	/^  sih_t          *vocab_ht;      \/* Vocabulary hash table *\/$/;"	m	struct:__anon5
vocab_ht	SLM2.h	/^  sih_t          *vocab_ht;      \/* Vocabulary hash table *\/$/;"	m	struct:__anon7
vocab_size	SLM2.h	/^  unsigned short vocab_size;     \/* Vocabulary size *\/$/;"	m	struct:__anon5
vocab_size	SLM2.h	/^  unsigned short vocab_size;     \/* Vocabulary size *\/$/;"	m	struct:__anon7
vocab_type	SLM2.h	/^  unsigned short vocab_type;      \/* see #define stuff at the top *\/$/;"	m	struct:__anon5
vocab_type	SLM2.h	/^  unsigned short vocab_type;      \/* see #define stuff at the top *\/$/;"	m	struct:__anon7
warn_on_update	SLM2.h	/^	int     warn_on_update; \/* print warning if same string is hashed again *\/$/;"	m	struct:__anon2
word_id	SLM2.h	/^  id__t          **word_id;      \/* Pointer to array of id lists *\/$/;"	m	struct:__anon5
word_id	SLM2.h	/^  id__t          **word_id;      \/* Pointer to array of id lists *\/$/;"	m	struct:__anon7
wordid_t	SLM2.h	/^typedef unsigned short wordid_t;$/;"	t
write_arpa	SLM2.h	/^  flag           write_arpa;      \/* True if the language model is to be $/;"	m	struct:__anon5
write_bin	SLM2.h	/^  flag           write_bin;       \/* True if the language model is to be $/;"	m	struct:__anon5
zeroton_fraction	SLM2.h	/^  double         zeroton_fraction; \/* cap on prob(zeroton) as fraction of $/;"	m	struct:__anon5
