# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_sequitur_', [dirname(__file__)])
        except ImportError:
            import _sequitur_
            return _sequitur_
        if fp is not None:
            try:
                _mod = imp.load_module('_sequitur_', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _sequitur_ = swig_import_helper()
    del swig_import_helper
else:
    import _sequitur_
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class MultigramInventory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultigramInventory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MultigramInventory, name)
    __repr__ = _swig_repr
    def size(self): return _sequitur_.MultigramInventory_size(self)
    def index(self, *args): return _sequitur_.MultigramInventory_index(self, *args)
    def symbol(self, *args): return _sequitur_.MultigramInventory_symbol(self, *args)
    def memoryUsed(self): return _sequitur_.MultigramInventory_memoryUsed(self)
    def __init__(self): 
        this = _sequitur_.new_MultigramInventory()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sequitur_.delete_MultigramInventory
    __del__ = lambda self : None;
MultigramInventory_swigregister = _sequitur_.MultigramInventory_swigregister
MultigramInventory_swigregister(MultigramInventory)
align = _sequitur_.align

class SequenceModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SequenceModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SequenceModel, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _sequitur_.new_SequenceModel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sequitur_.delete_SequenceModel
    __del__ = lambda self : None;
    def setInitAndTerm(self, *args): return _sequitur_.SequenceModel_setInitAndTerm(self, *args)
    def set(self, *args): return _sequitur_.SequenceModel_set(self, *args)
    def get(self): return _sequitur_.SequenceModel_get(self)
    def getNode(self, *args): return _sequitur_.SequenceModel_getNode(self, *args)
    def init(self): return _sequitur_.SequenceModel_init(self)
    def term(self): return _sequitur_.SequenceModel_term(self)
    def initial(self): return _sequitur_.SequenceModel_initial(self)
    def advanced(self, *args): return _sequitur_.SequenceModel_advanced(self, *args)
    def shortened(self, *args): return _sequitur_.SequenceModel_shortened(self, *args)
    def historyAsTuple(self, *args): return _sequitur_.SequenceModel_historyAsTuple(self, *args)
    def probability(self, *args): return _sequitur_.SequenceModel_probability(self, *args)
    def memoryUsed(self): return _sequitur_.SequenceModel_memoryUsed(self)
SequenceModel_swigregister = _sequitur_.SequenceModel_swigregister
SequenceModel_swigregister(SequenceModel)

class EstimationGraph(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EstimationGraph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EstimationGraph, name)
    __repr__ = _swig_repr
    def memoryUsed(self): return _sequitur_.EstimationGraph_memoryUsed(self)
    def __init__(self): 
        this = _sequitur_.new_EstimationGraph()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sequitur_.delete_EstimationGraph
    __del__ = lambda self : None;
EstimationGraph_swigregister = _sequitur_.EstimationGraph_swigregister
EstimationGraph_swigregister(EstimationGraph)

class EstimationGraphBuilder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EstimationGraphBuilder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EstimationGraphBuilder, name)
    __repr__ = _swig_repr
    def setSequenceModel(self, *args): return _sequitur_.EstimationGraphBuilder_setSequenceModel(self, *args)
    def clearSizeTemplates(self): return _sequitur_.EstimationGraphBuilder_clearSizeTemplates(self)
    def addSizeTemplate(self, *args): return _sequitur_.EstimationGraphBuilder_addSizeTemplate(self, *args)
    emergeNewMultigrams = _sequitur_.EstimationGraphBuilder_emergeNewMultigrams
    suppressNewMultigrams = _sequitur_.EstimationGraphBuilder_suppressNewMultigrams
    anonymizeNewMultigrams = _sequitur_.EstimationGraphBuilder_anonymizeNewMultigrams
    def setEmergenceMode(self, *args): return _sequitur_.EstimationGraphBuilder_setEmergenceMode(self, *args)
    def create(self, *args): return _sequitur_.EstimationGraphBuilder_create(self, *args)
    def update(self, *args): return _sequitur_.EstimationGraphBuilder_update(self, *args)
    def memoryUsed(self): return _sequitur_.EstimationGraphBuilder_memoryUsed(self)
    def __init__(self): 
        this = _sequitur_.new_EstimationGraphBuilder()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sequitur_.delete_EstimationGraphBuilder
    __del__ = lambda self : None;
EstimationGraphBuilder_swigregister = _sequitur_.EstimationGraphBuilder_swigregister
EstimationGraphBuilder_swigregister(EstimationGraphBuilder)

class SequenceModelEstimator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SequenceModelEstimator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SequenceModelEstimator, name)
    __repr__ = _swig_repr
    def makeSequenceModel(self, *args): return _sequitur_.SequenceModelEstimator_makeSequenceModel(self, *args)
    def __init__(self): 
        this = _sequitur_.new_SequenceModelEstimator()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sequitur_.delete_SequenceModelEstimator
    __del__ = lambda self : None;
SequenceModelEstimator_swigregister = _sequitur_.SequenceModelEstimator_swigregister
SequenceModelEstimator_swigregister(SequenceModelEstimator)

class EvidenceStore(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EvidenceStore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EvidenceStore, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _sequitur_.new_EvidenceStore()
        try: self.this.append(this)
        except: self.this = this
    def setSequenceModel(self, *args): return _sequitur_.EvidenceStore_setSequenceModel(self, *args)
    def asList(self): return _sequitur_.EvidenceStore_asList(self)
    def size(self): return _sequitur_.EvidenceStore_size(self)
    def maximumHistoryLength(self): return _sequitur_.EvidenceStore_maximumHistoryLength(self)
    def maximum(self): return _sequitur_.EvidenceStore_maximum(self)
    def total(self): return _sequitur_.EvidenceStore_total(self)
    def makeSequenceModelEstimator(self): return _sequitur_.EvidenceStore_makeSequenceModelEstimator(self)
    def memoryUsed(self): return _sequitur_.EvidenceStore_memoryUsed(self)
    __swig_destroy__ = _sequitur_.delete_EvidenceStore
    __del__ = lambda self : None;
EvidenceStore_swigregister = _sequitur_.EvidenceStore_swigregister
EvidenceStore_swigregister(EvidenceStore)

class Accumulator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Accumulator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Accumulator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _sequitur_.new_Accumulator()
        try: self.this.append(this)
        except: self.this = this
    def setTarget(self, *args): return _sequitur_.Accumulator_setTarget(self, *args)
    def accumulate(self, *args): return _sequitur_.Accumulator_accumulate(self, *args)
    def logLik(self, *args): return _sequitur_.Accumulator_logLik(self, *args)
    __swig_destroy__ = _sequitur_.delete_Accumulator
    __del__ = lambda self : None;
Accumulator_swigregister = _sequitur_.Accumulator_swigregister
Accumulator_swigregister(Accumulator)

class ViterbiAccumulator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViterbiAccumulator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ViterbiAccumulator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _sequitur_.new_ViterbiAccumulator()
        try: self.this.append(this)
        except: self.this = this
    def setTarget(self, *args): return _sequitur_.ViterbiAccumulator_setTarget(self, *args)
    def accumulate(self, *args): return _sequitur_.ViterbiAccumulator_accumulate(self, *args)
    def logLik(self, *args): return _sequitur_.ViterbiAccumulator_logLik(self, *args)
    def segment(self, *args): return _sequitur_.ViterbiAccumulator_segment(self, *args)
    __swig_destroy__ = _sequitur_.delete_ViterbiAccumulator
    __del__ = lambda self : None;
ViterbiAccumulator_swigregister = _sequitur_.ViterbiAccumulator_swigregister
ViterbiAccumulator_swigregister(ViterbiAccumulator)

class OneForAllAccumulator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OneForAllAccumulator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OneForAllAccumulator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _sequitur_.new_OneForAllAccumulator()
        try: self.this.append(this)
        except: self.this = this
    def setTarget(self, *args): return _sequitur_.OneForAllAccumulator_setTarget(self, *args)
    def accumulate(self, *args): return _sequitur_.OneForAllAccumulator_accumulate(self, *args)
    __swig_destroy__ = _sequitur_.delete_OneForAllAccumulator
    __del__ = lambda self : None;
OneForAllAccumulator_swigregister = _sequitur_.OneForAllAccumulator_swigregister
OneForAllAccumulator_swigregister(OneForAllAccumulator)

class Translator_NBestContext(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Translator_NBestContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Translator_NBestContext, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _sequitur_.delete_Translator_NBestContext
    __del__ = lambda self : None;
Translator_NBestContext_swigregister = _sequitur_.Translator_NBestContext_swigregister
Translator_NBestContext_swigregister(Translator_NBestContext)

class Translator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Translator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Translator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _sequitur_.new_Translator()
        try: self.this.append(this)
        except: self.this = this
    def setMultigramInventory(self, *args): return _sequitur_.Translator_setMultigramInventory(self, *args)
    def setSequenceModel(self, *args): return _sequitur_.Translator_setSequenceModel(self, *args)
    def stackUsage(self): return _sequitur_.Translator_stackUsage(self)
    def setStackLimit(self, *args): return _sequitur_.Translator_setStackLimit(self, *args)
    def nBestInit(self, *args): return _sequitur_.Translator_nBestInit(self, *args)
    def nBestBestLogLik(self, *args): return _sequitur_.Translator_nBestBestLogLik(self, *args)
    def nBestTotalLogLik(self, *args): return _sequitur_.Translator_nBestTotalLogLik(self, *args)
    def __call__(self, *args): return _sequitur_.Translator___call__(self, *args)
    def nBestNext(self, *args): return _sequitur_.Translator_nBestNext(self, *args)
    __swig_destroy__ = _sequitur_.delete_Translator
    __del__ = lambda self : None;
Translator_swigregister = _sequitur_.Translator_swigregister
Translator_swigregister(Translator)

# This file is compatible with both classic and new-style classes.


