Index: run-1-main.sh
===================================================================
--- run-1-main.sh	(revision 3495)
+++ run-1-main.sh	(working copy)
@@ -11,28 +11,29 @@
 
 [ -f local.conf ] && . ./local.conf
 
-. ./utils/parse_options.sh
+. ./path.sh
+. utils/parse_options.sh
 
 set -e           #Exit on non-zero return code from any command
 set -o pipefail  #Exit if any of the commands in the pipeline will 
-                 #return non-zero return code
+#return non-zero return code
 #set -u           #Fail on an undefined variable
 
 #Preparing dev2h and train directories
 if [ ! -d data/raw_train_data ]; then
-    echo ---------------------------------------------------------------------
-    echo "Subsetting the TRAIN set"
-    echo ---------------------------------------------------------------------
+  echo ---------------------------------------------------------------------
+  echo "Subsetting the TRAIN set"
+  echo ---------------------------------------------------------------------
 
-    local/make_corpus_subset.sh "$train_data_dir" "$train_data_list" ./data/raw_train_data
-    train_data_dir=`readlink -f ./data/raw_train_data`
+  local/make_corpus_subset.sh "$train_data_dir" "$train_data_list" ./data/raw_train_data
+  train_data_dir=`readlink -f ./data/raw_train_data`
 
 fi
 nj_max=`cat $train_data_list | wc -l`
 if [[ "$nj_max" -lt "$train_nj" ]] ; then
-    echo "The maximum reasonable number of jobs is $nj_max (you have $train_nj)! (The training and decoding process has file-granularity)"
-    exit 1;
-    train_nj=$nj_max
+  echo "The maximum reasonable number of jobs is $nj_max (you have $train_nj)! (The training and decoding process has file-granularity)"
+  exit 1;
+  train_nj=$nj_max
 fi
 train_data_dir=`readlink -f ./data/raw_train_data`
 
@@ -57,14 +58,16 @@
   decode_nj=$nj_max
 fi
 
+echo "data/train/feats.scp not found"
+echo "Preparing data directory without adding artificial fillers"
+
 mkdir -p data/local
 if [[ ! -f data/local/lexicon.txt || data/local/lexicon.txt -ot "$lexicon_file" ]]; then
   echo ---------------------------------------------------------------------
   echo "Preparing lexicon in data/local on" `date`
   echo ---------------------------------------------------------------------
-  local/make_lexicon_subset.sh $train_data_dir/transcription $lexicon_file data/local/filtered_lexicon.txt
   local/prepare_lexicon.pl  --phonemap "$phoneme_mapping" \
-    $lexiconFlags data/local/filtered_lexicon.txt data/local
+    $lexiconFlags $lexicon_file data/local
 fi
 
 mkdir -p data/lang
@@ -120,7 +123,6 @@
   local/train_lms_srilm.sh --dev-text data/dev2h/text \
     --train-text data/train/text data data/srilm 
 fi
-
 if [[ ! -f data/lang/G.fst || data/lang/G.fst -ot data/srilm/lm.gz ]]; then
   echo ---------------------------------------------------------------------
   echo "Creating G.fst on " `date`
@@ -144,8 +146,6 @@
   touch data/train/.plp.done
 fi
 
-mkdir -p exp
-
 if [ ! -f data/train_sub3/.done ]; then
   echo ---------------------------------------------------------------------
   echo "Subsetting monophone training data in data/train_sub[123] on" `date`
@@ -166,6 +166,85 @@
   touch data/train_sub3/.done
 fi
 
+if [ ! -f data/train_whole/feats.scp ]; then
+
+  train_data_dir=`readlink -f ./data/raw_train_data`
+  if [[ ! -f data/train_whole/wav.scp || data/train_whole/wav.scp -ot "$train_data_dir" ]]; then
+    echo ---------------------------------------------------------------------
+    echo "Preparing acoustic training lists in data/train on" `date`
+    echo ---------------------------------------------------------------------
+    mkdir -p data/train_whole
+    local/prepare_acoustic_training_data.pl --get-whole-transcripts "true" \
+      --vocab data/local/lexicon.txt --fragmentMarkers \-\*\~ \
+      $train_data_dir data/train_whole > data/train_whole/skipped_utts.log
+    mv data/train_whole/text data/train_whole/text_orig
+    if $keep_silence_segments; then
+      # Keep all segments including silence segments
+      cat data/train_whole/text_orig | awk '{if (NF == 2 && $2 == "<silence>") {print $1} else {print $0}}' > data/train_whole/text
+    else
+      # Keep only a fraction of silence segments
+      num_silence_segments=$(cat data/train_whole/text_orig | awk '{if (NF == 2 && $2 == "<silence>") {print $0}}' | wc -l)
+      num_keep_silence_segments=`echo $num_silence_segments | python -c "import sys; sys.stdout.write(\"%d\" % (float(sys.stdin.readline().strip()) * "$silence_segment_fraction"))"` 
+      cat data/train_whole/text_orig \
+        | awk 'BEGIN{i=0} \
+        { \
+          if (NF == 2 && $2 == "<silence>") { \
+            if (i<'$num_keep_silence_segments') { \
+              print $1; \
+              i++; \
+            } \
+          } else {print $0}\
+        }' > data/train_whole/text
+    fi
+    rm data/train_whole/text_orig
+    utils/fix_data_dir.sh data/train_whole
+  fi
+
+  if [[ ! -f data/train_whole/glm || data/train_whole/glm -ot "$glmFile" ]]; then
+    echo ---------------------------------------------------------------------
+    echo "Preparing train stm files in data/train_whole on" `date`
+    echo ---------------------------------------------------------------------
+    local/prepare_stm.pl --fragmentMarkers \-\*\~ data/train_whole || exit 1
+  fi
+
+  echo ---------------------------------------------------------------------
+  echo "Starting plp feature extraction for data/train_whole in plp_whole on" `date`
+  echo ---------------------------------------------------------------------
+
+  if [ ! -f data/train_whole/.plp.done ]; then
+    if $use_pitch; then
+      steps/make_plp_pitch.sh --cmd "$train_cmd" --nj $train_nj data/train_whole exp/make_plp_pitch/train_whole plp_whole
+    else
+      steps/make_plp.sh --cmd "$train_cmd" --nj $train_nj data/train_whole exp/make_plp/train_whole plp_whole
+
+    fi
+    utils/fix_data_dir.sh data/train_whole
+    steps/compute_cmvn_stats.sh data/train_whole exp/make_plp/train_whole plp_whole
+    utils/fix_data_dir.sh data/train_whole
+    touch data/train_whole/.plp.done
+  fi
+
+  if [ ! -f data/train_whole_sub3/.done ]; then
+    echo ---------------------------------------------------------------------
+    echo "Subsetting monophone training data in data/train_whole_sub[123] on" `date`
+    echo ---------------------------------------------------------------------
+    numutt=`cat data/train_whole/feats.scp | wc -l`;
+    utils/subset_data_dir.sh data/train_whole  5000 data/train_whole_sub1
+    if [ $numutt -gt 10000 ] ; then
+      utils/subset_data_dir.sh data/train_whole 10000 data/train_whole_sub2
+    else
+      (cd data; ln -s train_whole train_whole_sub2 )
+    fi
+    if [ $numutt -gt 20000 ] ; then
+      utils/subset_data_dir.sh data/train_whole 20000 data/train_whole_sub3
+    else
+      (cd data; ln -s train_whole train_whole_sub3 )
+    fi
+
+    touch data/train_whole_sub3/.done
+  fi
+fi
+
 if [ ! -f exp/mono/.done ]; then
   echo ---------------------------------------------------------------------
   echo "Starting (small) monophone training in exp/mono on" `date`
@@ -243,6 +322,7 @@
   touch exp/tri5/.done
 fi
 
+local/run_segmentation_train.sh --boost-sil $boost_sil --train-nj $train_nj --nj $train_nj exp/tri4 data/train_whole data/lang exp/tri4b_seg || exit 1
 
 ################################################################################
 # Ready to start SGMM training
@@ -282,8 +362,8 @@
     --cmd "$train_cmd" $numLeavesSGMM $numGaussSGMM \
     data/train data/lang exp/tri5_ali exp/ubm5/final.ubm exp/sgmm5
   #steps/train_sgmm2_group.sh \
-  #  --cmd "$train_cmd" "${sgmm_group_extra_opts[@]-}" $numLeavesSGMM $numGaussSGMM \
-  #  data/train data/lang exp/tri5_ali exp/ubm5/final.ubm exp/sgmm5
+    #  --cmd "$train_cmd" "${sgmm_group_extra_opts[@]-}" $numLeavesSGMM $numGaussSGMM \
+    #  data/train data/lang exp/tri5_ali exp/ubm5/final.ubm exp/sgmm5
   touch exp/sgmm5/.done
 fi
 
