!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AccuProfile	cu-device.cc	/^void CuDevice::AccuProfile(const std::string &key, double time) { $/;"	f	class:kaldi::CuDevice
ActiveGpuId	cu-device.h	/^  int32 ActiveGpuId() {$/;"	f	class:kaldi::CuDevice
Add	cu-matrix.cc	/^void CuMatrixBase<Real>::Add(Real value) { $/;"	f	class:kaldi::CuMatrixBase
Add	cu-vector.cc	/^void CuVectorBase<Real>::Add(Real value) {$/;"	f	class:kaldi::CuVectorBase
AddColSumMat	cu-vector.cc	/^void CuVectorBase<Real>::AddColSumMat(Real alpha,$/;"	f	class:kaldi::CuVectorBase
AddDiagMat2	cu-vector.cc	/^void CuVectorBase<Real>::AddDiagMat2(Real alpha, const CuMatrixBase<Real> &M,$/;"	f	class:kaldi::CuVectorBase
AddDiagMatMat	cu-vector.cc	/^void CuVectorBase<Real>::AddDiagMatMat($/;"	f	class:kaldi::CuVectorBase
AddDiagVecMat	cu-matrix.cc	/^void CuMatrixBase<Real>::AddDiagVecMat($/;"	f	class:kaldi::CuMatrixBase
AddGaussNoise	cu-rand.cc	/^template<typename Real> void CuRand<Real>::AddGaussNoise(CuMatrix<Real> *tgt, Real gscale) {$/;"	f	class:kaldi::CuRand
AddMat	cu-matrix.cc	/^void CuMatrixBase<Real>::AddMat(Real alpha, const CuMatrixBase<Real>& A, Real beta) {$/;"	f	class:kaldi::CuMatrixBase
AddMat2	cu-sp-matrix.cc	/^void CuSpMatrix<Real>::AddMat2(const Real alpha, const CuMatrixBase<Real> &M,$/;"	f	class:kaldi::CuSpMatrix
AddMatBlock	cu-matrix.cc	/^void CuMatrixBase<Real>::AddMatBlock($/;"	f	class:kaldi::CuMatrixBase
AddMatMat	cu-block-matrix.cc	/^void CuBlockMatrix<Real>::AddMatMat($/;"	f	class:kaldi::CuBlockMatrix
AddMatMat	cu-matrix.cc	/^void CuMatrixBase<Real>::AddMatMat($/;"	f	class:kaldi::CuMatrixBase
AddMatMatDivMat	cu-matrix.cc	/^void CuMatrixBase<Real>::AddMatMatDivMat(const CuMatrixBase<Real> &A, $/;"	f	class:kaldi::CuMatrixBase
AddMatSp	cu-matrix.h	/^  void AddMatSp(const Real alpha,$/;"	f	class:kaldi::CuMatrixBase
AddMatTp	cu-matrix.h	/^  void AddMatTp(const Real alpha,$/;"	f	class:kaldi::CuMatrixBase
AddMatVec	cu-vector.cc	/^void CuVectorBase<Real>::AddMatVec(const Real alpha,$/;"	f	class:kaldi::CuVectorBase
AddPacked	cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::AddPacked(const Real alpha, const CuPackedMatrix<Real> &M) {$/;"	f	class:kaldi::CuPackedMatrix
AddRowSumMat	cu-vector.cc	/^void CuVectorBase<Real>::AddRowSumMat(Real alpha, const CuMatrixBase<Real> &mat,$/;"	f	class:kaldi::CuVectorBase
AddSp	cu-sp-matrix.h	/^  void AddSp(const Real alpha, const CuSpMatrix<Real> &Ma) {$/;"	f	class:kaldi::CuSpMatrix
AddSpMat	cu-matrix.h	/^  void AddSpMat(const Real alpha,$/;"	f	class:kaldi::CuMatrixBase
AddSpVec	cu-vector.cc	/^void CuVectorBase<Real>::AddSpVec(const Real alpha,$/;"	f	class:kaldi::CuVectorBase
AddToDiag	cu-matrix.cc	/^void CuMatrixBase<Real>::AddToDiag(Real value) { $/;"	f	class:kaldi::CuMatrixBase
AddToDiag	cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::AddToDiag(Real r) {$/;"	f	class:kaldi::CuPackedMatrix
AddTpMat	cu-matrix.h	/^  void AddTpMat(const Real alpha,$/;"	f	class:kaldi::CuMatrixBase
AddTpVec	cu-vector.cc	/^void CuVectorBase<Real>::AddTpVec(const Real alpha, const CuTpMatrix<Real> &M,$/;"	f	class:kaldi::CuVectorBase
AddVec	cu-vector.cc	/^void CuVectorBase<Real>::AddVec(Real alpha, const CuVectorBase<OtherReal> &vec,$/;"	f	class:kaldi::CuVectorBase
AddVec	cu-vector.cc	/^void CuVectorBase<Real>::AddVec(Real alpha, const CuVectorBase<Real> &vec,$/;"	f	class:kaldi::CuVectorBase
AddVec2	cu-sp-matrix.cc	/^void CuSpMatrix<Real>::AddVec2(const Real alpha, const CuVectorBase<Real> &v) {$/;"	f	class:kaldi::CuSpMatrix
AddVecToCols	cu-matrix.cc	/^void CuMatrixBase<Real>::AddVecToCols(Real alpha,$/;"	f	class:kaldi::CuMatrixBase
AddVecToRows	cu-matrix.cc	/^void CuMatrixBase<Real>::AddVecToRows(Real alpha,$/;"	f	class:kaldi::CuMatrixBase
AddVecVec	cu-vector.cc	/^void CuVectorBase<Real>::AddVecVec(Real alpha, const CuVectorBase<Real> &v,$/;"	f	class:kaldi::CuVectorBase
ApplyCeiling	cu-matrix.cc	/^void CuMatrixBase<Real>::ApplyCeiling(Real ceiling_val) {$/;"	f	class:kaldi::CuMatrixBase
ApplyExp	cu-matrix.cc	/^void CuMatrixBase<Real>::ApplyExp() {$/;"	f	class:kaldi::CuMatrixBase
ApplyExp	cu-vector.cc	/^void CuVectorBase<Real>::ApplyExp() {$/;"	f	class:kaldi::CuVectorBase
ApplyFloor	cu-matrix.cc	/^void CuMatrixBase<Real>::ApplyFloor(Real floor_val) {$/;"	f	class:kaldi::CuMatrixBase
ApplyFloor	cu-vector.cc	/^MatrixIndexT CuVectorBase<Real>::ApplyFloor(Real floor_val) {$/;"	f	class:kaldi::CuVectorBase
ApplyHeaviside	cu-matrix.cc	/^void CuMatrixBase<Real>::ApplyHeaviside() {$/;"	f	class:kaldi::CuMatrixBase
ApplyLog	cu-matrix.cc	/^void CuMatrixBase<Real>::ApplyLog() { $/;"	f	class:kaldi::CuMatrixBase
ApplyLog	cu-vector.cc	/^void CuVectorBase<Real>::ApplyLog() {$/;"	f	class:kaldi::CuVectorBase
ApplyPow	cu-matrix.cc	/^void CuMatrixBase<Real>::ApplyPow(Real power) {$/;"	f	class:kaldi::CuMatrixBase
ApplyPow	cu-vector.cc	/^void CuVectorBase<Real>::ApplyPow(Real power) {$/;"	f	class:kaldi::CuVectorBase
ApplySoftMax	cu-vector.cc	/^void CuVectorBase<Real>::ApplySoftMax() {$/;"	f	class:kaldi::CuVectorBase
ApplySoftMaxPerRow	cu-matrix.cc	/^void CuMatrixBase<Real>::ApplySoftMaxPerRow(const CuMatrixBase<Real> &src) {$/;"	f	class:kaldi::CuMatrixBase
ApproxEqual	cu-block-matrix-test.cc	/^static bool ApproxEqual(const CuBlockMatrix<Real> &A,$/;"	f	namespace:kaldi
ApproxEqual	cu-matrix.cc	/^bool CuMatrixBase<Real>::ApproxEqual(const CuMatrixBase<Real> &other,$/;"	f	class:kaldi::CuMatrixBase
ApproxEqual	cu-matrix.h	/^bool ApproxEqual(const CuMatrixBase<Real> &A,$/;"	f	namespace:kaldi
ApproxEqual	cu-packed-matrix-test.cc	/^static bool ApproxEqual(const PackedMatrix<Real> &A,$/;"	f	namespace:kaldi
ApproxEqual	cu-sp-matrix.cc	/^bool CuSpMatrix<Real>::ApproxEqual(const CuSpMatrix<Real> &B, Real tol) const {$/;"	f	class:kaldi::CuSpMatrix
ApproxEqual	cu-sp-matrix.h	/^inline bool ApproxEqual(const CuSpMatrix<Real> &A,$/;"	f	namespace:kaldi
ApproxEqual	cu-vector.cc	/^bool CuVectorBase<Real>::ApproxEqual(const CuVectorBase<Real> &other, float tol) const {$/;"	f	class:kaldi::CuVectorBase
ApproxEqual	cu-vector.h	/^bool ApproxEqual(const CuVectorBase<Real> &a,$/;"	f	namespace:kaldi
AssertDiagEqual	cu-packed-matrix-test.cc	/^static void AssertDiagEqual(const PackedMatrix<Real> &A,$/;"	f	namespace:kaldi
AssertEqual	cu-array-test.cc	/^void AssertEqual(const std::vector<T> &vec1,$/;"	f	namespace:kaldi
AssertEqual	cu-block-matrix-test.cc	/^static void AssertEqual(const CuBlockMatrix<Real> &A,$/;"	f	namespace:kaldi
AssertEqual	cu-block-matrix-test.cc	/^static void AssertEqual(const CuMatrixBase<Real> &A,$/;"	f	namespace:kaldi
AssertEqual	cu-block-matrix-test.cc	/^static void AssertEqual(const MatrixBase<Real> &A,$/;"	f	namespace:kaldi
AssertEqual	cu-matrix-test.cc	/^static void AssertEqual(std::vector<Real> &A, std::vector<Real> &B) {$/;"	f	namespace:kaldi
AssertEqual	cu-matrix.h	/^inline void AssertEqual(CuMatrixBase<Real> &A, CuMatrixBase<Real> &B,$/;"	f	namespace:kaldi
AssertEqual	cu-packed-matrix-test.cc	/^static void AssertEqual(const CuPackedMatrix<Real> &A,$/;"	f	namespace:kaldi
AssertEqual	cu-packed-matrix-test.cc	/^static void AssertEqual(const PackedMatrix<Real> &A,$/;"	f	namespace:kaldi
AssertEqual	cu-sp-matrix.h	/^inline void AssertEqual(const CuSpMatrix<Real> &A,$/;"	f	namespace:kaldi
AssertEqual	cu-tp-matrix-test.cc	/^static void AssertEqual(const CuPackedMatrix<Real> &A,$/;"	f	namespace:kaldi
AssertEqual	cu-tp-matrix-test.cc	/^static void AssertEqual(const PackedMatrix<Real> &A,$/;"	f	namespace:kaldi
AssertEqual	cu-vector.h	/^inline void AssertEqual(CuVectorBase<Real> &a, CuVectorBase<Real> &b,$/;"	f	namespace:kaldi
BinarizeProbs	cu-rand.cc	/^template<typename Real> void CuRand<Real>::BinarizeProbs(const CuMatrix<Real> &probs, CuMatrix<Real> *states) {$/;"	f	class:kaldi::CuRand
Block	cu-block-matrix.cc	/^CuSubMatrix<Real> CuBlockMatrix<Real>::Block(int32 b) {$/;"	f	class:kaldi::CuBlockMatrix
Block	cu-block-matrix.cc	/^const CuSubMatrix<Real> CuBlockMatrix<Real>::Block(int32 b) const {$/;"	f	class:kaldi::CuBlockMatrix
BlockMatrixData	cu-block-matrix.h	/^  struct BlockMatrixData{$/;"	s	class:kaldi::CuBlockMatrix
CU1DBLOCK	cu-matrixdim.h	63;"	d
CU2DBLOCK	cu-matrixdim.h	67;"	d
CU_SAFE_CALL	cu-common.h	38;"	d
Cholesky	cu-matrix.cc	/^void CuMatrixBase<Real>::Cholesky() {$/;"	f	class:kaldi::CuMatrixBase
Cholesky	cu-tp-matrix.cc	/^void CuTpMatrix<Real>::Cholesky(const CuSpMatrix<Real> &orig) {$/;"	f	class:kaldi::CuTpMatrix
Cleanup	cu-device.cc	/^void CuAllocator::Cleanup() {$/;"	f	class:kaldi::CuAllocator
ColRange	cu-matrix.h	/^  inline CuSubMatrix<Real> ColRange(const MatrixIndexT col_offset,$/;"	f	class:kaldi::CuMatrixBase
CompObjfAndDeriv	cu-matrix.cc	/^void CuMatrix<Real>::CompObjfAndDeriv(const std::vector<MatrixElement<Real> >& sv_labels,$/;"	f	class:kaldi::CuMatrix
Copy	cu-math.cc	/^void Copy(const CuMatrix<Real> &src, const CuArray<int32> &copy_from_indices, CuMatrix<Real> *tgt) { $/;"	f	namespace:kaldi::cu
CopyColFromMat	cu-vector.cc	/^void CuVectorBase<Real>::CopyColFromMat(const CuMatrixBase<Real> &mat, MatrixIndexT col) {$/;"	f	class:kaldi::CuVectorBase
CopyColFromMat	cu-vector.cc	/^void CuVectorBase<double>::CopyColFromMat(const CuMatrixBase<float> &mat, MatrixIndexT col) {$/;"	f	class:kaldi::CuVectorBase
CopyColFromMat	cu-vector.cc	/^void CuVectorBase<float>::CopyColFromMat(const CuMatrixBase<double> &mat, MatrixIndexT col) {$/;"	f	class:kaldi::CuVectorBase
CopyColFromVec	cu-matrix.cc	/^void CuMatrixBase<Real>::CopyColFromVec(const CuVectorBase<Real> &v,$/;"	f	class:kaldi::CuMatrixBase
CopyCols	cu-matrix.cc	/^void CuMatrixBase<Real>::CopyCols(const CuMatrixBase<Real> &src,$/;"	f	class:kaldi::CuMatrixBase
CopyDiagFromMat	cu-vector.cc	/^void CuVectorBase<Real>::CopyDiagFromMat(const CuMatrix<Real> &M) {$/;"	f	class:kaldi::CuVectorBase
CopyDiagFromPacked	cu-vector.cc	/^void CuVectorBase<Real>::CopyDiagFromPacked(const CuPackedMatrix<Real> &M) {$/;"	f	class:kaldi::CuVectorBase
CopyFromArray	cu-array-inl.h	/^void CuArray<T>::CopyFromArray(const CuArray<T> &src) {$/;"	f	class:kaldi::CuArray
CopyFromBlock	cu-matrix.cc	/^void CuMatrixBase<Real>::CopyFromBlock(const CuBlockMatrix<Real> &B,$/;"	f	class:kaldi::CuMatrixBase
CopyFromMat	cu-block-matrix.cc	/^void CuBlockMatrix<Real>::CopyFromMat(const CuMatrix<Real> &M) {$/;"	f	class:kaldi::CuBlockMatrix
CopyFromMat	cu-matrix.cc	/^void CuMatrixBase<Real>::CopyFromMat(const CuMatrixBase<OtherReal> &M,$/;"	f	class:kaldi::CuMatrixBase
CopyFromMat	cu-matrix.cc	/^void CuMatrixBase<Real>::CopyFromMat(const MatrixBase<OtherReal> &src,$/;"	f	class:kaldi::CuMatrixBase
CopyFromMat	cu-matrix.cc	/^void CuMatrixBase<Real>::CopyFromMat(const MatrixBase<Real> &src,$/;"	f	class:kaldi::CuMatrixBase
CopyFromMat	cu-matrix.h	/^void MatrixBase<Real>::CopyFromMat(const CuMatrixBase<OtherReal> &cu,$/;"	f	class:kaldi::MatrixBase
CopyFromMat	cu-sp-matrix.cc	/^void CuSpMatrix<Real>::CopyFromMat(const CuMatrixBase<Real> &M,$/;"	f	class:kaldi::CuSpMatrix
CopyFromMat	cu-tp-matrix.cc	/^void CuTpMatrix<Real>::CopyFromMat(const CuMatrixBase<Real> &M,$/;"	f	class:kaldi::CuTpMatrix
CopyFromMat	cu-tp-matrix.cc	/^void TpMatrix<Real>::CopyFromMat(const CuTpMatrix<Real> &other) {$/;"	f	class:kaldi::TpMatrix
CopyFromPacked	cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::CopyFromPacked(const CuPackedMatrix<Real> &src) {$/;"	f	class:kaldi::CuPackedMatrix
CopyFromPacked	cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::CopyFromPacked(const PackedMatrix<Real> &src) {$/;"	f	class:kaldi::CuPackedMatrix
CopyFromSp	cu-matrix.cc	/^void CuMatrixBase<Real>::CopyFromSp(const CuSpMatrix<Real> &M) {$/;"	f	class:kaldi::CuMatrixBase
CopyFromSp	cu-sp-matrix.h	/^  void CopyFromSp(const CuSpMatrix<Real> &other) {$/;"	f	class:kaldi::CuSpMatrix
CopyFromSp	cu-sp-matrix.h	/^  void CopyFromSp(const SpMatrix<Real> &other) {$/;"	f	class:kaldi::CuSpMatrix
CopyFromTp	cu-matrix.cc	/^void CuMatrixBase<Real>::CopyFromTp(const CuTpMatrix<OtherReal> &M,$/;"	f	class:kaldi::CuMatrixBase
CopyFromTp	cu-tp-matrix.h	/^  void CopyFromTp(const CuTpMatrix<Real> &other) {$/;"	f	class:kaldi::CuTpMatrix
CopyFromTp	cu-tp-matrix.h	/^  void CopyFromTp(const TpMatrix<Real> &other) {$/;"	f	class:kaldi::CuTpMatrix
CopyFromVec	cu-array-inl.h	/^void CuArray<T>::CopyFromVec(const std::vector<T> &src) {$/;"	f	class:kaldi::CuArray
CopyFromVec	cu-vector.cc	/^void CuVectorBase<Real>::CopyFromVec(const CuVectorBase<Real> &src) {$/;"	f	class:kaldi::CuVectorBase
CopyFromVec	cu-vector.cc	/^void CuVectorBase<Real>::CopyFromVec(const VectorBase<OtherReal> &src) {$/;"	f	class:kaldi::CuVectorBase
CopyFromVec	cu-vector.cc	/^void CuVectorBase<double>::CopyFromVec(const CuVectorBase<float> &src) {$/;"	f	class:kaldi::CuVectorBase
CopyFromVec	cu-vector.cc	/^void CuVectorBase<float>::CopyFromVec(const CuVectorBase<double> &src) {$/;"	f	class:kaldi::CuVectorBase
CopyFromVec	cu-vector.h	/^void CuVectorBase<Real>::CopyFromVec(const CuVectorBase<OtherReal> &v) {$/;"	f	class:kaldi::CuVectorBase
CopyFromVec	cu-vector.h	/^void VectorBase<Real>::CopyFromVec(const CuVectorBase<OtherReal> &cu) {$/;"	f	class:kaldi::VectorBase
CopyLowerToUpper	cu-matrix.cc	/^void CuMatrixBase<Real>::CopyLowerToUpper() {$/;"	f	class:kaldi::CuMatrixBase
CopyRows	cu-matrix.cc	/^void CuMatrixBase<Real>::CopyRows(const CuMatrixBase<Real> &src,$/;"	f	class:kaldi::CuMatrixBase
CopyRowsFromMat	cu-matrix.cc	/^void VectorBase<Real>::CopyRowsFromMat(const CuMatrixBase<Real> &mat) {$/;"	f	class:kaldi::VectorBase
CopyRowsFromMat	cu-vector.cc	/^void CuVectorBase<Real>::CopyRowsFromMat(const CuMatrixBase<Real> &mat) {$/;"	f	class:kaldi::CuVectorBase
CopyRowsFromMat	cu-vector.cc	/^void CuVectorBase<Real>::CopyRowsFromMat(const MatrixBase<Real> &mat) {$/;"	f	class:kaldi::CuVectorBase
CopyRowsFromVec	cu-matrix.cc	/^void CuMatrixBase<Real>::CopyRowsFromVec(const CuVectorBase<Real> &v) {$/;"	f	class:kaldi::CuMatrixBase
CopyRowsFromVec	cu-matrix.cc	/^void CuMatrixBase<Real>::CopyRowsFromVec(const VectorBase<Real> &v) {$/;"	f	class:kaldi::CuMatrixBase
CopyRowsFromVec	cu-vector.cc	/^void MatrixBase<Real>::CopyRowsFromVec(const CuVectorBase<Real> &v) {$/;"	f	class:kaldi::MatrixBase
CopyToMat	cu-matrix.cc	/^void CuMatrixBase<Real>::CopyToMat(MatrixBase<OtherReal> *dst,$/;"	f	class:kaldi::CuMatrixBase
CopyToPacked	cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::CopyToPacked(PackedMatrix<Real> *dst) const {$/;"	f	class:kaldi::CuPackedMatrix
CopyToSp	cu-sp-matrix.h	/^  void CopyToSp(SpMatrix<Real> *dst) const { \/\/added const by hxu$/;"	f	class:kaldi::CuSpMatrix
CopyToVec	cu-array-inl.h	/^void CuArray<T>::CopyToVec(std::vector<T> *dst) const {$/;"	f	class:kaldi::CuArray
CopyToVec	cu-vector.cc	/^void CuVectorBase<Real>::CopyToVec(VectorBase<OtherReal> *dst) const {$/;"	f	class:kaldi::CuVectorBase
CopyUpperToLower	cu-matrix.cc	/^void CuMatrixBase<Real>::CopyUpperToLower() {$/;"	f	class:kaldi::CuMatrixBase
CuAllocator	cu-device.cc	/^  CuAllocator(const CuAllocatorOptions &opts, CuDevice *device):$/;"	f	class:kaldi::CuAllocator
CuAllocator	cu-device.cc	/^class CuAllocator {$/;"	c	namespace:kaldi	file:
CuAllocatorOptions	cu-device.cc	/^  CuAllocatorOptions()$/;"	f	struct:kaldi::CuAllocatorOptions
CuAllocatorOptions	cu-device.cc	/^struct CuAllocatorOptions {$/;"	s	namespace:kaldi	file:
CuArray	cu-array.h	/^  CuArray<T>() : dim_(0), data_(NULL) {  }$/;"	f	class:kaldi::CuArray
CuArray	cu-array.h	/^  explicit CuArray<T>(MatrixIndexT dim, MatrixResizeType resize_type = kSetZero):$/;"	f	class:kaldi::CuArray
CuArray	cu-array.h	/^  explicit CuArray<T>(const CuArray<T> &src):$/;"	f	class:kaldi::CuArray
CuArray	cu-array.h	/^  explicit CuArray<T>(const std::vector<T> &src):$/;"	f	class:kaldi::CuArray
CuArray	cu-array.h	/^class CuArray {$/;"	c	namespace:kaldi
CuBlockMatrix	cu-block-matrix.cc	/^CuBlockMatrix<Real>::CuBlockMatrix() {$/;"	f	class:kaldi::CuBlockMatrix
CuBlockMatrix	cu-block-matrix.cc	/^CuBlockMatrix<Real>::CuBlockMatrix(const CuBlockMatrix<Real> &other):$/;"	f	class:kaldi::CuBlockMatrix
CuBlockMatrix	cu-block-matrix.cc	/^CuBlockMatrix<Real>::CuBlockMatrix(const std::vector<CuMatrix<Real> >&data) {$/;"	f	class:kaldi::CuBlockMatrix
CuBlockMatrix	cu-block-matrix.h	/^class CuBlockMatrix {$/;"	c	namespace:kaldi
CuBlockMatrixData	cu-matrixdim.h	/^  } CuBlockMatrixData;$/;"	t	typeref:struct:CuBlockMatrixData_
CuBlockMatrixData_	cu-matrixdim.h	/^  typedef struct CuBlockMatrixData_ {$/;"	s
CuBlockMatrixData_::col_offset	cu-matrixdim.h	/^    int32_cuda col_offset; \/\/ sum of #cols of previous M_i$/;"	m	struct:CuBlockMatrixData_
CuBlockMatrixData_::matrix_data	cu-matrixdim.h	/^    void *matrix_data; \/\/ data for M_i.  This is a pointer to either float* or$/;"	m	struct:CuBlockMatrixData_
CuBlockMatrixData_::matrix_dim	cu-matrixdim.h	/^    MatrixDim matrix_dim; \/\/ dimension of this M_i$/;"	m	struct:CuBlockMatrixData_
CuBlockMatrixData_::row_offset	cu-matrixdim.h	/^    int32_cuda row_offset; \/\/ sum of #rows of previous M_i$/;"	m	struct:CuBlockMatrixData_
CuBlockMatrixUnitTest	cu-block-matrix-test.cc	/^template<typename Real> void CuBlockMatrixUnitTest() {$/;"	f	namespace:kaldi
CuData	cu-block-matrix.h	/^  const CuBlockMatrixData* CuData() const { return cu_data_; }$/;"	f	class:kaldi::CuBlockMatrix
CuDevice	cu-device.cc	/^CuDevice::CuDevice(): active_gpu_id_(-1), verbose_(true),$/;"	f	class:kaldi::CuDevice
CuDevice	cu-device.h	/^class CuDevice {$/;"	c	namespace:kaldi
CuMatrix	cu-matrix.cc	/^ CuMatrix<Real>::CuMatrix(const CuBlockMatrix<Real> &B,$/;"	f	class:kaldi::CuMatrix
CuMatrix	cu-matrix.cc	/^CuMatrix<Real>::CuMatrix(const CuMatrix<Real> &other, MatrixTransposeType trans) {$/;"	f	class:kaldi::CuMatrix
CuMatrix	cu-matrix.cc	/^CuMatrix<Real>::CuMatrix(const CuMatrixBase<OtherReal> & M,$/;"	f	class:kaldi::CuMatrix
CuMatrix	cu-matrix.cc	/^CuMatrix<Real>::CuMatrix(const CuMatrixBase<Real> &other, MatrixTransposeType trans) {$/;"	f	class:kaldi::CuMatrix
CuMatrix	cu-matrix.cc	/^CuMatrix<Real>::CuMatrix(const MatrixBase<OtherReal> &other, MatrixTransposeType trans) {$/;"	f	class:kaldi::CuMatrix
CuMatrix	cu-matrix.h	/^  CuMatrix() { }$/;"	f	class:kaldi::CuMatrix
CuMatrix	cu-matrix.h	/^  CuMatrix(MatrixIndexT rows, MatrixIndexT cols,$/;"	f	class:kaldi::CuMatrix
CuMatrix	cu-matrix.h	/^  explicit CuMatrix(const CuSpMatrix<Real> &M) : CuMatrixBase<Real>() {$/;"	f	class:kaldi::CuMatrix
CuMatrix	cu-matrix.h	/^  explicit CuMatrix(const CuTpMatrix<OtherReal> & M,$/;"	f	class:kaldi::CuMatrix
CuMatrix	cu-matrix.h	/^class CuMatrix: public CuMatrixBase<Real> {$/;"	c	namespace:kaldi
CuMatrixBase	cu-matrix.h	/^  CuMatrixBase<Real>(): data_(NULL), num_cols_(0), num_rows_(0), stride_(0) { }$/;"	f	class:kaldi::CuMatrixBase
CuMatrixBase	cu-matrix.h	/^  CuMatrixBase<Real>(Real *data,$/;"	f	class:kaldi::CuMatrixBase
CuMatrixBase	cu-matrix.h	/^class CuMatrixBase {$/;"	c	namespace:kaldi
CuMatrixUnitTest	cu-test.cc	/^static void CuMatrixUnitTest() {$/;"	f	namespace:kaldi
CuPackedMatrix	cu-packed-matrix.h	/^  CuPackedMatrix() : data_(NULL), num_rows_(0) {}$/;"	f	class:kaldi::CuPackedMatrix
CuPackedMatrix	cu-packed-matrix.h	/^  explicit CuPackedMatrix(MatrixIndexT r,$/;"	f	class:kaldi::CuPackedMatrix
CuPackedMatrix	cu-packed-matrix.h	/^  explicit CuPackedMatrix(const CuPackedMatrix<Real> &orig) : data_(NULL), num_rows_(0) {$/;"	f	class:kaldi::CuPackedMatrix
CuPackedMatrix	cu-packed-matrix.h	/^  explicit CuPackedMatrix(const PackedMatrix<Real> &orig) : data_(NULL), num_rows_(0) {$/;"	f	class:kaldi::CuPackedMatrix
CuPackedMatrix	cu-packed-matrix.h	/^class CuPackedMatrix {$/;"	c	namespace:kaldi
CuRand	cu-rand.h	/^  CuRand(): z1_(NULL), z2_(NULL), z3_(NULL), z4_(NULL), state_size_(0) { }$/;"	f	class:kaldi::CuRand
CuRand	cu-rand.h	/^class CuRand {$/;"	c	namespace:kaldi
CuSpMatrix	cu-sp-matrix.h	/^  CuSpMatrix(): CuPackedMatrix<Real>() {}$/;"	f	class:kaldi::CuSpMatrix
CuSpMatrix	cu-sp-matrix.h	/^  explicit CuSpMatrix(MatrixIndexT r, MatrixResizeType resize_type = kSetZero)$/;"	f	class:kaldi::CuSpMatrix
CuSpMatrix	cu-sp-matrix.h	/^  explicit CuSpMatrix(const CuMatrixBase<Real> &orig,$/;"	f	class:kaldi::CuSpMatrix
CuSpMatrix	cu-sp-matrix.h	/^  explicit CuSpMatrix(const CuSpMatrix<Real> &orig)$/;"	f	class:kaldi::CuSpMatrix
CuSpMatrix	cu-sp-matrix.h	/^  explicit CuSpMatrix(const SpMatrix<Real> &orig)$/;"	f	class:kaldi::CuSpMatrix
CuSpMatrix	cu-sp-matrix.h	/^class CuSpMatrix : public CuPackedMatrix<Real> {$/;"	c	namespace:kaldi
CuSpMatrixSpeedTest	cu-sp-matrix-speed-test.cc	/^template<typename Real> void CuSpMatrixSpeedTest() {$/;"	f	namespace:kaldi
CuSubMatrix	cu-matrix-inl.h	/^inline CuSubMatrix<Real>::CuSubMatrix(const CuMatrixBase<Real> &mat,$/;"	f	class:kaldi::CuSubMatrix
CuSubMatrix	cu-matrix.h	/^  inline CuSubMatrix<Real> (const CuSubMatrix &other):$/;"	f	class:kaldi::CuSubMatrix
CuSubMatrix	cu-matrix.h	/^class CuSubMatrix: public CuMatrixBase<Real> {$/;"	c	namespace:kaldi
CuSubVector	cu-vector.h	/^  CuSubVector(const CuMatrixBase<Real> &matrix, MatrixIndexT row) {$/;"	f	class:kaldi::CuSubVector
CuSubVector	cu-vector.h	/^  CuSubVector(const CuSubVector &other) : CuVectorBase<Real> () {$/;"	f	class:kaldi::CuSubVector
CuSubVector	cu-vector.h	/^  CuSubVector(const CuVectorBase<Real> &t, const MatrixIndexT origin,$/;"	f	class:kaldi::CuSubVector
CuSubVector	cu-vector.h	/^  CuSubVector(const Real* data, MatrixIndexT length) : CuVectorBase<Real> () {$/;"	f	class:kaldi::CuSubVector
CuSubVector	cu-vector.h	/^class CuSubVector: public CuVectorBase<Real> {$/;"	c	namespace:kaldi
CuTpMatrix	cu-tp-matrix.cc	/^CuTpMatrix<Real>::CuTpMatrix(const CuMatrixBase<Real> &orig, MatrixTransposeType trans):$/;"	f	class:kaldi::CuTpMatrix
CuTpMatrix	cu-tp-matrix.h	/^  CuTpMatrix() : CuPackedMatrix<Real>() {}$/;"	f	class:kaldi::CuTpMatrix
CuTpMatrix	cu-tp-matrix.h	/^  explicit CuTpMatrix(MatrixIndexT r, MatrixResizeType resize_type = kSetZero)$/;"	f	class:kaldi::CuTpMatrix
CuTpMatrix	cu-tp-matrix.h	/^  explicit CuTpMatrix<Real>(const CuTpMatrix<Real> &orig)$/;"	f	class:kaldi::CuTpMatrix
CuTpMatrix	cu-tp-matrix.h	/^  explicit CuTpMatrix<Real>(const TpMatrix<Real> &orig)$/;"	f	class:kaldi::CuTpMatrix
CuTpMatrix	cu-tp-matrix.h	/^class CuTpMatrix : public CuPackedMatrix<Real> {$/;"	c	namespace:kaldi
CuValue	cu-value.h	/^  CuValue(Real *data): data_(data) { }$/;"	f	class:kaldi::CuValue
CuValue	cu-value.h	/^  CuValue(const CuValue &other): data_(other.data_) { }$/;"	f	class:kaldi::CuValue
CuValue	cu-value.h	/^class CuValue {$/;"	c	namespace:kaldi
CuVector	cu-vector.cc	/^CuVector<Real>::CuVector(const CuVectorBase<Real> &v) {$/;"	f	class:kaldi::CuVector
CuVector	cu-vector.cc	/^CuVector<Real>::CuVector(const VectorBase<Real> &v) {$/;"	f	class:kaldi::CuVector
CuVector	cu-vector.h	/^  CuVector() { }$/;"	f	class:kaldi::CuVector
CuVector	cu-vector.h	/^  CuVector(MatrixIndexT dim, MatrixResizeType t = kSetZero) { Resize(dim, t); }$/;"	f	class:kaldi::CuVector
CuVector	cu-vector.h	/^  explicit CuVector(const CuVector<Real> &v) : CuVectorBase<Real>() {$/;"	f	class:kaldi::CuVector
CuVector	cu-vector.h	/^  explicit CuVector(const CuVectorBase<OtherReal> &v) : CuVectorBase<Real>() {$/;"	f	class:kaldi::CuVector
CuVector	cu-vector.h	/^  explicit CuVector(const VectorBase<OtherReal> &v) : CuVectorBase<Real>() {$/;"	f	class:kaldi::CuVector
CuVector	cu-vector.h	/^class CuVector: public CuVectorBase<Real> {$/;"	c	namespace:kaldi
CuVectorBase	cu-vector.h	/^  CuVectorBase<Real>(): data_(NULL), dim_(0) { }$/;"	f	class:kaldi::CuVectorBase
CuVectorBase	cu-vector.h	/^class CuVectorBase {$/;"	c	namespace:kaldi
CuVectorUnitTest	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTest() {$/;"	f	namespace:kaldi
CuVectorUnitTestAddColSumMat	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestAddColSumMat() {$/;"	f	namespace:kaldi
CuVectorUnitTestAddDiagMat2	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestAddDiagMat2() {$/;"	f	namespace:kaldi
CuVectorUnitTestAddDiagMatMat	cu-vector-test.cc	/^static void CuVectorUnitTestAddDiagMatMat() {$/;"	f	namespace:kaldi
CuVectorUnitTestAddMatVec	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestAddMatVec() {$/;"	f	namespace:kaldi
CuVectorUnitTestAddRowSumMat	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestAddRowSumMat() {$/;"	f	namespace:kaldi
CuVectorUnitTestAddSpVec	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestAddSpVec() {$/;"	f	namespace:kaldi
CuVectorUnitTestAddVec	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestAddVec() {$/;"	f	namespace:kaldi
CuVectorUnitTestAddVecCross	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestAddVecCross() {$/;"	f	namespace:kaldi
CuVectorUnitTestAddVecExtra	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestAddVecExtra() {$/;"	f	namespace:kaldi
CuVectorUnitTestAddVecVec	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestAddVecVec() {$/;"	f	namespace:kaldi
CuVectorUnitTestApplyExp	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestApplyExp() {$/;"	f	namespace:kaldi
CuVectorUnitTestApplyFloor	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestApplyFloor() {$/;"	f	namespace:kaldi
CuVectorUnitTestApplyLog	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestApplyLog() {$/;"	f	namespace:kaldi
CuVectorUnitTestApplyPow	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestApplyPow() {$/;"	f	namespace:kaldi
CuVectorUnitTestApplySoftMax	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestApplySoftMax() {$/;"	f	namespace:kaldi
CuVectorUnitTestApproxEqual	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestApproxEqual() {$/;"	f	namespace:kaldi
CuVectorUnitTestCopyCross	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestCopyCross() {$/;"	f	namespace:kaldi
CuVectorUnitTestCopyCross2	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestCopyCross2() {$/;"	f	namespace:kaldi
CuVectorUnitTestCopyDiagFromMat	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestCopyDiagFromMat() {$/;"	f	namespace:kaldi
CuVectorUnitTestCopyDiagFromPacked	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestCopyDiagFromPacked() {$/;"	f	namespace:kaldi
CuVectorUnitTestCopyFromMat	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestCopyFromMat() {$/;"	f	namespace:kaldi
CuVectorUnitTestInvertElements	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestInvertElements() {$/;"	f	namespace:kaldi
CuVectorUnitTestMax	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestMax() {$/;"	f	namespace:kaldi
CuVectorUnitTestMin	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestMin() {$/;"	f	namespace:kaldi
CuVectorUnitTestNorm	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestNorm() {$/;"	f	namespace:kaldi
CuVectorUnitTestScale	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestScale() {$/;"	f	namespace:kaldi
CuVectorUnitTestSum	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestSum() {$/;"	f	namespace:kaldi
CuVectorUnitTestVecVec	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestVecVec() {$/;"	f	namespace:kaldi
CudaMathUnitTest	cu-math-test.cc	/^template<typename Real> void CudaMathUnitTest() {$/;"	f	namespace:kaldi
CudaMatrixSpeedTest	cu-matrix-speed-test.cc	/^template<typename Real> void CudaMatrixSpeedTest() {$/;"	f	namespace:kaldi
CudaMatrixUnitTest	cu-matrix-test.cc	/^template<typename Real> void CudaMatrixUnitTest() {$/;"	f	namespace:kaldi
CudaPackedMatrixUnitTest	cu-packed-matrix-test.cc	/^template<typename Real> void CudaPackedMatrixUnitTest() {$/;"	f	namespace:kaldi
CudaSpMatrixUnitTest	cu-sp-matrix-test.cc	/^template<typename Real, typename OtherReal> void CudaSpMatrixUnitTest() {$/;"	f	namespace:kaldi
CudaSpMatrixUnitTest	cu-sp-matrix-test.cc	/^template<typename Real> void CudaSpMatrixUnitTest() {$/;"	f	namespace:kaldi
CudaTpMatrixUnitTest	cu-tp-matrix-test.cc	/^template<typename Real> void CudaTpMatrixUnitTest() {$/;"	f	namespace:kaldi
CudaVectorSpeedTest	cu-vector-speed-test.cc	/^template<typename Real> void CudaVectorSpeedTest() {$/;"	f	namespace:kaldi
Data	cu-array.h	/^  T* Data() { return data_; }$/;"	f	class:kaldi::CuArray
Data	cu-array.h	/^  const T* Data() const { return data_; }$/;"	f	class:kaldi::CuArray
Data	cu-matrix.h	/^  inline Real *Data() { return data_; }$/;"	f	class:kaldi::CuMatrixBase
Data	cu-matrix.h	/^  inline const Real *Data() const { return data_; }$/;"	f	class:kaldi::CuMatrixBase
Data	cu-packed-matrix.h	/^  Real* Data() { return data_; }  $/;"	f	class:kaldi::CuPackedMatrix
Data	cu-packed-matrix.h	/^  const Real* Data() const { return data_; }$/;"	f	class:kaldi::CuPackedMatrix
Data	cu-vector.h	/^  inline Real* Data() { return data_; }$/;"	f	class:kaldi::CuVectorBase
Data	cu-vector.h	/^  inline const Real* Data() const { return data_; }$/;"	f	class:kaldi::CuVectorBase
Destroy	cu-array-inl.h	/^void CuArray<T>::Destroy() {$/;"	f	class:kaldi::CuArray
Destroy	cu-block-matrix.cc	/^void CuBlockMatrix<Real>::Destroy() {$/;"	f	class:kaldi::CuBlockMatrix
Destroy	cu-matrix.cc	/^void CuMatrix<Real>::Destroy() {$/;"	f	class:kaldi::CuMatrix
Destroy	cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::Destroy() {$/;"	f	class:kaldi::CuPackedMatrix
Destroy	cu-vector.cc	/^void CuVector<Real>::Destroy() {$/;"	f	class:kaldi::CuVector
DeviceGetName	cu-device.cc	/^void CuDevice::DeviceGetName(char* name, int32 len, int32 dev) {$/;"	f	class:kaldi::CuDevice
DiffSigmoid	cu-matrix.cc	/^void CuMatrixBase<Real>::DiffSigmoid(const CuMatrixBase<Real> &value,$/;"	f	class:kaldi::CuMatrixBase
DiffTanh	cu-matrix.cc	/^void CuMatrixBase<Real>::DiffTanh(const CuMatrixBase<Real> &value,$/;"	f	class:kaldi::CuMatrixBase
DiffXent	cu-matrix.cc	/^void CuMatrixBase<Real>::DiffXent(const CuArray<int32> &tgt,$/;"	f	class:kaldi::CuMatrixBase
Dim	cu-array.h	/^  MatrixIndexT Dim() const { return dim_;  }$/;"	f	class:kaldi::CuArray
Dim	cu-matrix.h	/^  ::MatrixDim Dim() const { $/;"	f	class:kaldi::CuMatrixBase
Dim	cu-vector.h	/^  MatrixIndexT Dim() const { return dim_;  }   $/;"	f	class:kaldi::CuVectorBase
DisableCaching	cu-device.cc	/^inline void CuAllocator::DisableCaching() {$/;"	f	class:kaldi::CuAllocator
DisableCaching	cu-device.cc	/^void CuDevice::DisableCaching() {$/;"	f	class:kaldi::CuDevice
DivRowsVec	cu-matrix.cc	/^void CuMatrixBase<Real>::DivRowsVec(const CuVectorBase<Real> &div) {$/;"	f	class:kaldi::CuMatrixBase
DoubleFactorial	cu-matrix-test.cc	/^static int32 DoubleFactorial(int32 i) {$/;"	f	namespace:kaldi
DoublePrecisionSupported	cu-device.cc	/^bool CuDevice::DoublePrecisionSupported() {$/;"	f	class:kaldi::CuDevice
Enabled	cu-device.h	/^  bool Enabled() const {$/;"	f	class:kaldi::CuDevice
EqualElementMask	cu-matrix.cc	/^void CuMatrixBase<Real>::EqualElementMask(const CuMatrixBase<Real> &mat, CuMatrix<Real> *mask) const {$/;"	f	class:kaldi::CuMatrixBase
FinalizeActiveGpu	cu-device.cc	/^void CuDevice::FinalizeActiveGpu() {$/;"	f	class:kaldi::CuDevice
FindMemInfo	cu-device.cc	/^  inline MemInfoForSize *FindMemInfo(size_t row_bytes,$/;"	f	class:kaldi::CuAllocator	file:
FindRowMaxId	cu-matrix.cc	/^void CuMatrixBase<Real>::FindRowMaxId(CuArray<int32> *id) const {$/;"	f	class:kaldi::CuMatrixBase
Free	cu-device.cc	/^void CuAllocator::Free(void *addr) {$/;"	f	class:kaldi::CuAllocator
Free	cu-device.cc	/^void CuDevice::Free(void *ptr) { allocator_->Free(ptr); }$/;"	f	class:kaldi::CuDevice
FreeCudaData	cu-block-matrix.cc	/^void CuBlockMatrix<Real>::FreeCudaData() {$/;"	f	class:kaldi::CuBlockMatrix
FrobeniusNorm	cu-matrix.h	/^  Real FrobeniusNorm() const { return sqrt(TraceMatMat(*this, *this, kTrans)); }$/;"	f	class:kaldi::CuMatrixBase
FrobeniusNorm	cu-sp-matrix.h	/^  Real FrobeniusNorm() const { return sqrt(TraceSpSp(*this, *this)); }$/;"	f	class:kaldi::CuSpMatrix
GetFreeMemory	cu-device.cc	/^std::string CuDevice::GetFreeMemory(int64* free, int64* total) const {$/;"	f	class:kaldi::CuDevice
GroupPnorm	cu-matrix.cc	/^void CuMatrixBase<Real>::GroupPnorm(const CuMatrixBase<Real> &src, Real power) {$/;"	f	class:kaldi::CuMatrixBase
GroupPnormDeriv	cu-matrix.cc	/^void CuMatrixBase<Real>::GroupPnormDeriv(const CuMatrixBase<Real> &src1,$/;"	f	class:kaldi::CuMatrixBase
InitRand	cu-matrix-test.cc	/^static void InitRand(MatrixBase<Real> *M) {$/;"	f	namespace:kaldi
InitRand	cu-matrix-test.cc	/^static void InitRand(VectorBase<Real> *v) {$/;"	f	namespace:kaldi
InitRand	cu-test.cc	/^static void InitRand(SpMatrix<Real> *M) {$/;"	f	namespace:kaldi
InitRand	cu-test.cc	/^static void InitRand(VectorBase<Real> *v) {$/;"	f	namespace:kaldi
Instantiate	cu-device.h	/^  static inline CuDevice& Instantiate() { return global_device_; }$/;"	f	class:kaldi::CuDevice
Int32Pair	cu-matrixdim.h	/^  typedef struct Int32Pair {$/;"	s
Int32Pair	cu-matrixdim.h	/^  } Int32Pair;$/;"	t	typeref:struct:Int32Pair
Int32Pair::first	cu-matrixdim.h	/^    int32_cuda first;$/;"	m	struct:Int32Pair
Int32Pair::second	cu-matrixdim.h	/^    int32_cuda second;$/;"	m	struct:Int32Pair
Invert	cu-sp-matrix.cc	/^void CuSpMatrix<Real>::Invert() {$/;"	f	class:kaldi::CuSpMatrix
Invert	cu-tp-matrix.cc	/^void CuTpMatrix<Real>::Invert() {$/;"	f	class:kaldi::CuTpMatrix
InvertElements	cu-vector.cc	/^void CuVectorBase<Real>::InvertElements() {$/;"	f	class:kaldi::CuVectorBase
InvertPosDefApprox	cu-sp-matrix.cc	/^void CuSpMatrix<Real>::InvertPosDefApprox(BaseFloat max_error) {$/;"	f	class:kaldi::CuSpMatrix
IsComputeExclusive	cu-device.cc	/^bool CuDevice::IsComputeExclusive() {$/;"	f	class:kaldi::CuDevice
IsUnit	cu-matrix.cc	/^bool CuMatrixBase<Real>::IsUnit(Real tol) const {$/;"	f	class:kaldi::CuMatrixBase
IsUnit	cu-sp-matrix.cc	/^bool CuSpMatrix<Real>::IsUnit(Real tol) const {$/;"	f	class:kaldi::CuSpMatrix
KALDI_CUDAMATRIX_COMMON_H_	cu-common.cc	2;"	d	file:
KALDI_CUDAMATRIX_CU_ARRAY_H_	cu-array.h	24;"	d
KALDI_CUDAMATRIX_CU_ARRAY_INL_H_	cu-array-inl.h	24;"	d
KALDI_CUDAMATRIX_CU_BLOCK_MATRIX_H_	cu-block-matrix.h	23;"	d
KALDI_CUDAMATRIX_CU_CHOLESKYKERNELS_ANSI_H_	cu-choleskykernels-ansi.h	22;"	d
KALDI_CUDAMATRIX_CU_CHOLESKYKERNELS_H_	cu-choleskykernels.h	22;"	d
KALDI_CUDAMATRIX_CU_COMMON_H_	cu-common.h	24;"	d
KALDI_CUDAMATRIX_CU_DEVICE_H_	cu-device.h	23;"	d
KALDI_CUDAMATRIX_CU_KERNELS_ANSI_H_	cu-kernels-ansi.h	28;"	d
KALDI_CUDAMATRIX_CU_KERNELS_H_	cu-kernels.h	28;"	d
KALDI_CUDAMATRIX_CU_MATH_H_	cu-math.h	24;"	d
KALDI_CUDAMATRIX_CU_MATRIXDIM_H_	cu-matrixdim.h	24;"	d
KALDI_CUDAMATRIX_CU_MATRIX_H_	cu-matrix.h	27;"	d
KALDI_CUDAMATRIX_CU_MATRIX_INL_H_	cu-matrix-inl.h	23;"	d
KALDI_CUDAMATRIX_CU_MATRIX_LIB_H_	cu-matrix-lib.h	23;"	d
KALDI_CUDAMATRIX_CU_PACKED_MATRIX_H_	cu-packed-matrix.h	24;"	d
KALDI_CUDAMATRIX_CU_RANDKERNELS_ANSI_H_	cu-randkernels-ansi.h	23;"	d
KALDI_CUDAMATRIX_CU_RANDKERNELS_H_	cu-randkernels.h	23;"	d
KALDI_CUDAMATRIX_CU_RAND_H_	cu-rand.h	23;"	d
KALDI_CUDAMATRIX_CU_SP_MATRIX_H_	cu-sp-matrix.h	2;"	d
KALDI_CUDAMATRIX_CU_TP_MATRIX_H_	cu-tp-matrix.h	20;"	d
KALDI_CUDAMATRIX_CU_VALUE_H_	cu-value.h	23;"	d
KALDI_CUDAMATRIX_CU_VECTOR_H_	cu-vector.h	26;"	d
KALDI_MATRIX_CUBLAS_WRAPPERS_H_	cublas-wrappers.h	20;"	d
KaldiTransToCuTrans	cu-common.cc	/^cublasOperation_t KaldiTransToCuTrans(MatrixTransposeType kaldi_trans) {$/;"	f	namespace:kaldi
Lookup	cu-matrix.cc	/^void CuMatrixBase<Real>::Lookup(const std::vector<Int32Pair> &indices,$/;"	f	class:kaldi::CuMatrixBase
Malloc	cu-device.cc	/^void* CuAllocator::Malloc(size_t size) {$/;"	f	class:kaldi::CuAllocator
Malloc	cu-device.cc	/^void* CuDevice::Malloc(size_t size) {$/;"	f	class:kaldi::CuDevice
MallocInternal	cu-device.cc	/^void* CuAllocator::MallocInternal(size_t row_bytes,$/;"	f	class:kaldi::CuAllocator
MallocPitch	cu-device.cc	/^void* CuAllocator::MallocPitch(size_t num_rows, size_t row_bytes,$/;"	f	class:kaldi::CuAllocator
MallocPitch	cu-device.cc	/^void* CuDevice::MallocPitch(size_t row_bytes, size_t num_rows, size_t *pitch) {$/;"	f	class:kaldi::CuDevice
Mat	cu-matrix.h	/^  inline Matrix<Real> &Mat() {$/;"	f	class:kaldi::CuMatrix
Mat	cu-matrix.h	/^  inline MatrixBase<Real> &Mat() {$/;"	f	class:kaldi::CuMatrixBase
Mat	cu-matrix.h	/^  inline const Matrix<Real> &Mat() const {$/;"	f	class:kaldi::CuMatrix
Mat	cu-matrix.h	/^  inline const MatrixBase<Real> &Mat() const {$/;"	f	class:kaldi::CuMatrixBase
Mat	cu-packed-matrix.h	/^  inline PackedMatrix<Real> &Mat() {$/;"	f	class:kaldi::CuPackedMatrix
Mat	cu-packed-matrix.h	/^  inline const PackedMatrix<Real> &Mat() const {$/;"	f	class:kaldi::CuPackedMatrix
Mat	cu-sp-matrix.h	/^  inline SpMatrix<Real> &Mat() {$/;"	f	class:kaldi::CuSpMatrix
Mat	cu-sp-matrix.h	/^  inline const SpMatrix<Real> &Mat() const {$/;"	f	class:kaldi::CuSpMatrix
Mat	cu-tp-matrix.h	/^  inline TpMatrix<Real> &Mat() {$/;"	f	class:kaldi::CuTpMatrix
Mat	cu-tp-matrix.h	/^  inline const TpMatrix<Real> &Mat() const {$/;"	f	class:kaldi::CuTpMatrix
Matrix	cu-matrix.h	/^Matrix<Real>::Matrix(const CuMatrixBase<OtherReal> &M,$/;"	f	class:kaldi::Matrix
MatrixDim	cu-matrixdim.h	/^  } MatrixDim;$/;"	t	typeref:struct:MatrixDim_
MatrixDim_	cu-matrixdim.h	/^  typedef struct MatrixDim_ {$/;"	s
MatrixDim_::cols	cu-matrixdim.h	/^    int32_cuda cols;$/;"	m	struct:MatrixDim_
MatrixDim_::rows	cu-matrixdim.h	/^    int32_cuda rows;$/;"	m	struct:MatrixDim_
MatrixDim_::stride	cu-matrixdim.h	/^    int32_cuda stride;$/;"	m	struct:MatrixDim_
MatrixElement	cu-matrixdim.h	/^struct MatrixElement {$/;"	s
MatrixElement::column	cu-matrixdim.h	/^  int32_cuda column;$/;"	m	struct:MatrixElement
MatrixElement::row	cu-matrixdim.h	/^  int32_cuda row;$/;"	m	struct:MatrixElement
MatrixElement::weight	cu-matrixdim.h	/^  Real weight;$/;"	m	struct:MatrixElement
MatrixIndexT_cuda	cu-matrixdim.h	/^  typedef __int32          MatrixIndexT_cuda; \/\/ you'd have to change this if you changed MatrixIndexT from int32.$/;"	t
MatrixIndexT_cuda	cu-matrixdim.h	/^  typedef int32_t          MatrixIndexT_cuda; \/\/ you'd have to change this if you changed MatrixIndexT from int32.$/;"	t
Max	cu-matrix.cc	/^void CuMatrixBase<Real>::Max(const CuMatrixBase<Real>& A) {$/;"	f	class:kaldi::CuMatrixBase
Max	cu-vector.cc	/^Real CuVectorBase<Real>::Max() const {$/;"	f	class:kaldi::CuVectorBase
MaxBlockCols	cu-block-matrix.cc	/^MatrixIndexT CuBlockMatrix<Real>::MaxBlockCols() const {$/;"	f	class:kaldi::CuBlockMatrix
MaxBlockRows	cu-block-matrix.cc	/^MatrixIndexT CuBlockMatrix<Real>::MaxBlockRows() const {$/;"	f	class:kaldi::CuBlockMatrix
MemInfoForSize	cu-device.cc	/^    MemInfoForSize(size_t row_bytes,$/;"	f	struct:kaldi::CuAllocator::MemInfoForSize
MemInfoForSize	cu-device.cc	/^  struct MemInfoForSize {$/;"	s	class:kaldi::CuAllocator	file:
Min	cu-vector.cc	/^Real CuVectorBase<Real>::Min() const {$/;"	f	class:kaldi::CuVectorBase
MulColsVec	cu-matrix.cc	/^void CuMatrixBase<Real>::MulColsVec(const CuVectorBase<Real> &scale) {$/;"	f	class:kaldi::CuMatrixBase
MulElements	cu-matrix.cc	/^void CuMatrixBase<Real>::MulElements(const CuMatrixBase<Real>& A) {$/;"	f	class:kaldi::CuMatrixBase
MulElements	cu-vector.cc	/^void CuVectorBase<Real>::MulElements(const CuVectorBase<Real> &v) {$/;"	f	class:kaldi::CuVectorBase
MulRowsGroupMat	cu-matrix.cc	/^void CuMatrixBase<Real>::MulRowsGroupMat(const CuMatrixBase<Real> &src) {$/;"	f	class:kaldi::CuMatrixBase
MulRowsVec	cu-matrix.cc	/^void CuMatrixBase<Real>::MulRowsVec(const CuVectorBase<Real> &scale) {$/;"	f	class:kaldi::CuMatrixBase
MulTp	cu-vector.cc	/^void CuVectorBase<Real>::MulTp(const CuTpMatrix<Real> &M, const MatrixTransposeType trans) {$/;"	f	class:kaldi::CuVectorBase
NameOf	cu-matrix-speed-test.cc	/^std::string NameOf() {$/;"	f	namespace:kaldi
NameOf	cu-sp-matrix-speed-test.cc	/^std::string NameOf() {$/;"	f	namespace:kaldi
NameOf	cu-vector-speed-test.cc	/^std::string NameOf() {$/;"	f	namespace:kaldi
Norm	cu-vector.cc	/^Real CuVectorBase<Real>::Norm(BaseFloat p) {$/;"	f	class:kaldi::CuVectorBase
NumBlocks	cu-block-matrix.h	/^  MatrixIndexT NumBlocks() const { return block_data_.size(); }$/;"	f	class:kaldi::CuBlockMatrix
NumCols	cu-block-matrix.h	/^  MatrixIndexT NumCols() const { return data_.num_cols_; }$/;"	f	class:kaldi::CuBlockMatrix
NumCols	cu-matrix.h	/^  MatrixIndexT NumCols() const { return num_cols_;  }$/;"	f	class:kaldi::CuMatrixBase
NumCols	cu-packed-matrix.h	/^  inline MatrixIndexT NumCols() const { return num_rows_; }$/;"	f	class:kaldi::CuPackedMatrix
NumRows	cu-block-matrix.h	/^  MatrixIndexT NumRows() const { return num_rows_; }$/;"	f	class:kaldi::CuBlockMatrix
NumRows	cu-matrix.h	/^  MatrixIndexT NumRows() const { return num_rows_;  }$/;"	f	class:kaldi::CuMatrixBase
NumRows	cu-packed-matrix.h	/^  inline MatrixIndexT NumRows() const { return num_rows_; }$/;"	f	class:kaldi::CuPackedMatrix
PossiblyCleanup	cu-device.cc	/^void CuAllocator::PossiblyCleanup(size_t num_bytes) {$/;"	f	class:kaldi::CuAllocator
PrintMemoryUsage	cu-device.cc	/^void CuDevice::PrintMemoryUsage() const {$/;"	f	class:kaldi::CuDevice
PrintProfile	cu-device.cc	/^void CuDevice::PrintProfile() {$/;"	f	class:kaldi::CuDevice
RandGaussMatrix	cu-matrix-test.cc	/^static void RandGaussMatrix(MatrixBase<Real>* mat) {$/;"	f	namespace:kaldi
RandGaussian	cu-rand.cc	/^template<typename Real> void CuRand<Real>::RandGaussian(CuMatrixBase<Real> *tgt) {$/;"	f	class:kaldi::CuRand
RandGaussian	cu-rand.cc	/^template<typename Real> void CuRand<Real>::RandGaussian(CuVectorBase<Real> *tgt) {$/;"	f	class:kaldi::CuRand
RandUniform	cu-rand.cc	/^template<typename Real> void CuRand<Real>::RandUniform(CuMatrixBase<Real> *tgt) {$/;"	f	class:kaldi::CuRand
RandZeroToOneMatrix	cu-matrix-test.cc	/^static void RandZeroToOneMatrix(MatrixBase<Real>* mat) {$/;"	f	namespace:kaldi
Randomize	cu-math.cc	/^void Randomize(const CuMatrixBase<Real> &src,$/;"	f	namespace:kaldi::cu
Range	cu-matrix.h	/^  inline CuSubMatrix<Real> Range(const MatrixIndexT row_offset,$/;"	f	class:kaldi::CuMatrixBase
Range	cu-vector.h	/^  CuSubVector<Real> Range(const MatrixIndexT o, const MatrixIndexT l) {$/;"	f	class:kaldi::CuVectorBase
Range	cu-vector.h	/^  const CuSubVector<Real> Range(const MatrixIndexT o,$/;"	f	class:kaldi::CuVectorBase
Read	cu-block-matrix.cc	/^void CuBlockMatrix<Real>::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::CuBlockMatrix
Read	cu-matrix.cc	/^void CuMatrix<Real>::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::CuMatrix
Read	cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::CuPackedMatrix
Read	cu-vector.cc	/^void CuVector<Real>::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::CuVector
RegularizeL1	cu-math.cc	/^void RegularizeL1(CuMatrixBase<Real> *weight, CuMatrixBase<Real> *grad, Real l1, Real lr) {$/;"	f	namespace:kaldi::cu
ReleaseAllCachedMemory	cu-device.cc	/^void CuAllocator::ReleaseAllCachedMemory(bool destroy) {$/;"	f	class:kaldi::CuAllocator
ReplaceValue	cu-vector.cc	/^void CuVectorBase<Real>::ReplaceValue(Real orig, Real changed) {$/;"	f	class:kaldi::CuVectorBase
ResetProfile	cu-device.h	/^  void ResetProfile() { $/;"	f	class:kaldi::CuDevice
Resize	cu-array-inl.h	/^void CuArray<T>::Resize(MatrixIndexT dim, MatrixResizeType resize_type) {$/;"	f	class:kaldi::CuArray
Resize	cu-matrix.cc	/^void CuMatrix<Real>::Resize(MatrixIndexT rows, MatrixIndexT cols,$/;"	f	class:kaldi::CuMatrix
Resize	cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::Resize(MatrixIndexT rows,$/;"	f	class:kaldi::CuPackedMatrix
Resize	cu-sp-matrix.h	/^  inline void Resize(MatrixIndexT nRows, MatrixResizeType resize_type = kSetZero) {$/;"	f	class:kaldi::CuSpMatrix
Resize	cu-vector.cc	/^void CuVector<Real>::Resize(MatrixIndexT dim, MatrixResizeType t) {$/;"	f	class:kaldi::CuVector
Row	cu-matrix.h	/^  inline CuSubVector<Real> Row(MatrixIndexT i) {$/;"	f	class:kaldi::CuMatrixBase
Row	cu-matrix.h	/^  inline const CuSubVector<Real> Row(MatrixIndexT i) const {$/;"	f	class:kaldi::CuMatrixBase
RowData	cu-matrix.h	/^  inline Real* RowData(MatrixIndexT r) { return data_ + r * stride_; }$/;"	f	class:kaldi::CuMatrixBase
RowData	cu-matrix.h	/^  inline const Real* RowData(MatrixIndexT r) const { return data_ + r * stride_; }$/;"	f	class:kaldi::CuMatrixBase
RowRange	cu-matrix.h	/^  inline CuSubMatrix<Real> RowRange(const MatrixIndexT row_offset,$/;"	f	class:kaldi::CuMatrixBase
SameDim	cu-matrix.h	/^bool SameDim(const CuMatrixBase<Real> &M, const CuMatrixBase<Real> &N) {$/;"	f	namespace:kaldi
SameDimAndStride	cu-matrix.h	/^bool SameDimAndStride(const CuMatrixBase<Real> &M, const CuMatrixBase<Real> &N) {$/;"	f	namespace:kaldi
Scale	cu-matrix.cc	/^void CuMatrixBase<Real>::Scale(Real value) { $/;"	f	class:kaldi::CuMatrixBase
Scale	cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::Scale(Real alpha) {$/;"	f	class:kaldi::CuPackedMatrix
Scale	cu-vector.cc	/^void CuVectorBase<Real>::Scale(Real value) {$/;"	f	class:kaldi::CuVectorBase
ScaleDiag	cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::ScaleDiag(Real alpha) {$/;"	f	class:kaldi::CuPackedMatrix
SeedBuffer	cu-rand.cc	/^void CuRand<Real>::SeedBuffer(MatrixIndexT state_size, uint32 **tgt) {$/;"	f	class:kaldi::CuRand
SeedGpu	cu-rand.cc	/^void CuRand<Real>::SeedGpu(MatrixIndexT state_size) {$/;"	f	class:kaldi::CuRand
SelectGpuId	cu-device.cc	/^void CuDevice::SelectGpuId(std::string use_gpu) {$/;"	f	class:kaldi::CuDevice
SelectGpuIdAuto	cu-device.cc	/^bool CuDevice::SelectGpuIdAuto() {$/;"	f	class:kaldi::CuDevice
Set	cu-array-inl.h	/^inline void CuArray<T>::Set(const T &value) {$/;"	f	class:kaldi::CuArray
Set	cu-array-inl.h	/^inline void CuArray<int32>::Set(const int32 &value) {$/;"	f	class:kaldi::CuArray
Set	cu-matrix.cc	/^void CuMatrixBase<Real>::Set(Real value) {$/;"	f	class:kaldi::CuMatrixBase
Set	cu-vector.cc	/^void CuVectorBase<Real>::Set(Real value) {$/;"	f	class:kaldi::CuVectorBase
SetCudaData	cu-block-matrix.cc	/^void CuBlockMatrix<Real>::SetCudaData() {$/;"	f	class:kaldi::CuBlockMatrix
SetDiag	cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::SetDiag(Real alpha) {$/;"	f	class:kaldi::CuPackedMatrix
SetRandUniform	cu-matrix.cc	/^void CuMatrixBase<Real>::SetRandUniform() {$/;"	f	class:kaldi::CuMatrixBase
SetRandn	cu-matrix.cc	/^void CuMatrixBase<Real>::SetRandn() {$/;"	f	class:kaldi::CuMatrixBase
SetRandn	cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::SetRandn() {$/;"	f	class:kaldi::CuPackedMatrix
SetRandn	cu-vector.cc	/^void CuVectorBase<Real>::SetRandn() {$/;"	f	class:kaldi::CuVectorBase
SetUnit	cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::SetUnit() {$/;"	f	class:kaldi::CuPackedMatrix
SetVerbose	cu-device.h	/^  void SetVerbose(bool verbose) {  verbose_ = verbose; }$/;"	f	class:kaldi::CuDevice
SetZero	cu-array-inl.h	/^void CuArray<T>::SetZero() {$/;"	f	class:kaldi::CuArray
SetZero	cu-matrix.cc	/^void CuMatrixBase<Real>::SetZero() {$/;"	f	class:kaldi::CuMatrixBase
SetZero	cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::SetZero() {$/;"	f	class:kaldi::CuPackedMatrix
SetZero	cu-vector.cc	/^void CuVectorBase<Real>::SetZero() {$/;"	f	class:kaldi::CuVectorBase
SetZeroUpperDiag	cu-matrix.cc	/^void CuMatrixBase<Real>::SetZeroUpperDiag() {$/;"	f	class:kaldi::CuMatrixBase
Sigmoid	cu-matrix.cc	/^void CuMatrixBase<Real>::Sigmoid(const CuMatrixBase<Real> &src) {$/;"	f	class:kaldi::CuMatrixBase
SizeInBytes	cu-matrix.h	/^  MatrixIndexT SizeInBytes() const { return num_rows_*stride_*sizeof(Real); }$/;"	f	class:kaldi::CuMatrixBase
SizeInBytes	cu-packed-matrix.h	/^  size_t  SizeInBytes() const {$/;"	f	class:kaldi::CuPackedMatrix
SoftHinge	cu-matrix.cc	/^void CuMatrixBase<Real>::SoftHinge(const CuMatrixBase<Real> &src) {$/;"	f	class:kaldi::CuMatrixBase
SpMatrix	cu-sp-matrix.h	/^SpMatrix<Real>::SpMatrix(const CuSpMatrix<Real> &cu) {$/;"	f	class:kaldi::SpMatrix
Splice	cu-math.cc	/^void Splice(const CuMatrix<Real> &src, const CuArray<int32> &frame_offsets, CuMatrix<Real> *tgt) {$/;"	f	namespace:kaldi::cu
Stride	cu-matrix.h	/^  MatrixIndexT Stride() const { return stride_; }$/;"	f	class:kaldi::CuMatrixBase
Sum	cu-matrix.cc	/^Real CuMatrixBase<Real>::Sum() const {$/;"	f	class:kaldi::CuMatrixBase
Sum	cu-vector.cc	/^Real CuVectorBase<Real>::Sum() const {$/;"	f	class:kaldi::CuVectorBase
SumColumnRanges	cu-matrix.cc	/^void CuMatrixBase<Real>::SumColumnRanges(const CuMatrixBase<Real> &src,$/;"	f	class:kaldi::CuMatrixBase
Swap	cu-block-matrix.cc	/^void CuBlockMatrix<Real>::Swap(CuBlockMatrix<Real> *other) {$/;"	f	class:kaldi::CuBlockMatrix
Swap	cu-matrix.cc	/^void CuMatrix<Real>::Swap(CuMatrix<Real> *mat) {$/;"	f	class:kaldi::CuMatrix
Swap	cu-matrix.cc	/^void CuMatrix<Real>::Swap(Matrix<Real> *mat) {$/;"	f	class:kaldi::CuMatrix
Swap	cu-matrix.cc	/^void Matrix<Real>::Swap(CuMatrix<Real> *mat) { mat->Swap(this); }$/;"	f	class:kaldi::Matrix
Swap	cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::Swap(PackedMatrix<Real> *mat) {$/;"	f	class:kaldi::CuPackedMatrix
Swap	cu-vector.cc	/^void CuVector<Real>::Swap(Vector<Real> *vec) {$/;"	f	class:kaldi::CuVector
SymAddMat2	cu-matrix.cc	/^void CuMatrixBase<Real>::SymAddMat2($/;"	f	class:kaldi::CuMatrixBase
SymInvertPosDef	cu-matrix.cc	/^void CuMatrixBase<Real>::SymInvertPosDef() {$/;"	f	class:kaldi::CuMatrixBase
Tanh	cu-matrix.cc	/^void CuMatrixBase<Real>::Tanh(const CuMatrixBase<Real> &src) {$/;"	f	class:kaldi::CuMatrixBase
TestCuMatrixCopyLowerToUpper	cu-matrix-speed-test.cc	/^template<typename Real> void TestCuMatrixCopyLowerToUpper(int32 dim) {$/;"	f	namespace:kaldi
TestCuMatrixCopyUpperToLower	cu-matrix-speed-test.cc	/^template<typename Real> void TestCuMatrixCopyUpperToLower(int32 dim) {$/;"	f	namespace:kaldi
TestCuMatrixMatMat	cu-matrix-speed-test.cc	/^template<typename Real> void TestCuMatrixMatMat(int32 dim) {$/;"	f	namespace:kaldi
TestCuMatrixSigmoid	cu-matrix-speed-test.cc	/^template<typename Real> void TestCuMatrixSigmoid(int32 dim) {$/;"	f	namespace:kaldi
TestCuMatrixSoftmax	cu-matrix-speed-test.cc	/^template<typename Real> void TestCuMatrixSoftmax(int32 dim) {$/;"	f	namespace:kaldi
TestCuMatrixTraceMatMat	cu-matrix-speed-test.cc	/^template<typename Real> void TestCuMatrixTraceMatMat(int32 dim) {$/;"	f	namespace:kaldi
TestCuVectorAddDiagMatMat	cu-vector-speed-test.cc	/^template<typename Real> void TestCuVectorAddDiagMatMat(int32 dim) {$/;"	f	namespace:kaldi
TestCuVectorSoftmax	cu-vector-speed-test.cc	/^template<typename Real> void TestCuVectorSoftmax(int32 dim) {$/;"	f	namespace:kaldi
TestCuVectorSum	cu-vector-speed-test.cc	/^template<typename Real> void TestCuVectorSum(int32 dim) {$/;"	f	namespace:kaldi
TestCuVectorVecVecOne	cu-vector-speed-test.cc	/^template<typename Real> void TestCuVectorVecVecOne(int32 dim) {$/;"	f	namespace:kaldi
ThisType	cu-array.h	/^  typedef CuArray<T> ThisType;$/;"	t	class:kaldi::CuArray
TpMatrix	cu-tp-matrix.cc	/^TpMatrix<Real>::TpMatrix(const CuTpMatrix<Real> &cu) {$/;"	f	class:kaldi::TpMatrix
Trace	cu-matrix.cc	/^Real CuMatrixBase<Real>::Trace(bool check_square) const {$/;"	f	class:kaldi::CuMatrixBase
Trace	cu-packed-matrix.cc	/^Real CuPackedMatrix<Real>::Trace() const {$/;"	f	class:kaldi::CuPackedMatrix
TraceMatMat	cu-matrix.cc	/^Real TraceMatMat(const CuMatrixBase<Real> &A,$/;"	f	namespace:kaldi
TraceSpSp	cu-sp-matrix.cc	/^Real TraceSpSp(const CuSpMatrix<Real> &A, const CuSpMatrix<OtherReal> &B) {$/;"	f	namespace:kaldi
Transpose	cu-matrix.cc	/^void CuMatrix<Real>::Transpose() {$/;"	f	class:kaldi::CuMatrix
UnitInvert	cu-test.cc	/^template<typename Real> static void UnitInvert() {$/;"	f	namespace:kaldi
UnitTestCheck	cu-matrix-test.cc	/^template<typename Real> void UnitTestCheck() {$/;"	f	namespace:kaldi
UnitTestCholesky	cu-test.cc	/^template<typename Real> static void UnitTestCholesky() {$/;"	f	namespace:kaldi
UnitTestConstructor	cu-test.cc	/^template<typename Real> static void UnitTestConstructor() {$/;"	f	namespace:kaldi
UnitTestCopyFromMat	cu-test.cc	/^template<typename Real> static void UnitTestCopyFromMat() {$/;"	f	namespace:kaldi
UnitTestCopySp	cu-test.cc	/^template<typename Real> static void UnitTestCopySp() {$/;"	f	namespace:kaldi
UnitTestCuApproxEqual	cu-matrix-test.cc	/^static void UnitTestCuApproxEqual() {$/;"	f	namespace:kaldi
UnitTestCuArray	cu-array-test.cc	/^static void UnitTestCuArray() {$/;"	f	namespace:kaldi
UnitTestCuBlockMatrixAddMatBlock	cu-block-matrix-test.cc	/^static void UnitTestCuBlockMatrixAddMatBlock() {$/;"	f	namespace:kaldi
UnitTestCuBlockMatrixAddMatMat	cu-block-matrix-test.cc	/^static void UnitTestCuBlockMatrixAddMatMat() {$/;"	f	namespace:kaldi
UnitTestCuBlockMatrixIO	cu-block-matrix-test.cc	/^static void UnitTestCuBlockMatrixIO() {$/;"	f	namespace:kaldi
UnitTestCuCopy	cu-matrix-test.cc	/^static void UnitTestCuCopy() {$/;"	f	namespace:kaldi
UnitTestCuDiffSigmoid	cu-matrix-test.cc	/^static void UnitTestCuDiffSigmoid() {$/;"	f	namespace:kaldi
UnitTestCuDiffTanh	cu-matrix-test.cc	/^static void UnitTestCuDiffTanh() {$/;"	f	namespace:kaldi
UnitTestCuDiffXent	cu-matrix-test.cc	/^static void UnitTestCuDiffXent() {$/;"	f	namespace:kaldi
UnitTestCuFindRowMaxId	cu-matrix-test.cc	/^static void UnitTestCuFindRowMaxId() {$/;"	f	namespace:kaldi
UnitTestCuMathCopy	cu-math-test.cc	/^static void UnitTestCuMathCopy() {$/;"	f	namespace:kaldi
UnitTestCuMathRandomize	cu-math-test.cc	/^static void UnitTestCuMathRandomize() {$/;"	f	namespace:kaldi
UnitTestCuMathSplice	cu-math-test.cc	/^static void UnitTestCuMathSplice() {$/;"	f	namespace:kaldi
UnitTestCuMatrixAdd	cu-matrix-test.cc	/^static void UnitTestCuMatrixAdd() {$/;"	f	namespace:kaldi
UnitTestCuMatrixAdd2	cu-matrix-test.cc	/^static void UnitTestCuMatrixAdd2() {$/;"	f	namespace:kaldi
UnitTestCuMatrixAddDiagVecMat	cu-matrix-test.cc	/^template<typename Real> static void UnitTestCuMatrixAddDiagVecMat() {$/;"	f	namespace:kaldi
UnitTestCuMatrixAddMat	cu-matrix-test.cc	/^static void UnitTestCuMatrixAddMat() {$/;"	f	namespace:kaldi
UnitTestCuMatrixAddMatMat	cu-matrix-test.cc	/^static void UnitTestCuMatrixAddMatMat() {$/;"	f	namespace:kaldi
UnitTestCuMatrixAddMatTp	cu-matrix-test.cc	/^static void UnitTestCuMatrixAddMatTp() {$/;"	f	namespace:kaldi
UnitTestCuMatrixAddToDiag	cu-matrix-test.cc	/^static void UnitTestCuMatrixAddToDiag() {$/;"	f	namespace:kaldi
UnitTestCuMatrixAddTpMat	cu-matrix-test.cc	/^static void UnitTestCuMatrixAddTpMat() {$/;"	f	namespace:kaldi
UnitTestCuMatrixAddVecToCols	cu-matrix-test.cc	/^static void UnitTestCuMatrixAddVecToCols() {$/;"	f	namespace:kaldi
UnitTestCuMatrixAddVecToRows	cu-matrix-test.cc	/^static void UnitTestCuMatrixAddVecToRows() {$/;"	f	namespace:kaldi
UnitTestCuMatrixApplyFloor	cu-matrix-test.cc	/^static void UnitTestCuMatrixApplyFloor() {$/;"	f	namespace:kaldi
UnitTestCuMatrixApplyHeaviside	cu-matrix-test.cc	/^static void UnitTestCuMatrixApplyHeaviside() {$/;"	f	namespace:kaldi
UnitTestCuMatrixApplyLog	cu-matrix-test.cc	/^static void UnitTestCuMatrixApplyLog() {$/;"	f	namespace:kaldi
UnitTestCuMatrixApplyPow	cu-matrix-test.cc	/^static void UnitTestCuMatrixApplyPow() {$/;"	f	namespace:kaldi
UnitTestCuMatrixApproxInvert	cu-sp-matrix-speed-test.cc	/^static void UnitTestCuMatrixApproxInvert(int32 dim) {$/;"	f	namespace:kaldi
UnitTestCuMatrixCopyCols	cu-matrix-test.cc	/^static void UnitTestCuMatrixCopyCols() {$/;"	f	namespace:kaldi
UnitTestCuMatrixCopyCross	cu-matrix-test.cc	/^void UnitTestCuMatrixCopyCross() {$/;"	f	namespace:kaldi
UnitTestCuMatrixCopyCross2	cu-matrix-test.cc	/^template<typename Real> void UnitTestCuMatrixCopyCross2() {$/;"	f	namespace:kaldi
UnitTestCuMatrixCopyFromMat	cu-matrix-test.cc	/^static void UnitTestCuMatrixCopyFromMat() {$/;"	f	namespace:kaldi
UnitTestCuMatrixCopyFromTp	cu-matrix-test.cc	/^static void UnitTestCuMatrixCopyFromTp() {$/;"	f	namespace:kaldi
UnitTestCuMatrixCopyLowerToUpper	cu-matrix-test.cc	/^static void UnitTestCuMatrixCopyLowerToUpper() {$/;"	f	namespace:kaldi
UnitTestCuMatrixCopyRows	cu-matrix-test.cc	/^static void UnitTestCuMatrixCopyRows() {$/;"	f	namespace:kaldi
UnitTestCuMatrixCopyRowsFromVec	cu-matrix-test.cc	/^static void UnitTestCuMatrixCopyRowsFromVec() {$/;"	f	namespace:kaldi
UnitTestCuMatrixCopyUpperToLower	cu-matrix-test.cc	/^static void UnitTestCuMatrixCopyUpperToLower() {$/;"	f	namespace:kaldi
UnitTestCuMatrixDivRowsVec	cu-matrix-test.cc	/^static void UnitTestCuMatrixDivRowsVec() {$/;"	f	namespace:kaldi
UnitTestCuMatrixEqualElementMask	cu-matrix-test.cc	/^static void UnitTestCuMatrixEqualElementMask() {$/;"	f	namespace:kaldi
UnitTestCuMatrixGroupPnorm	cu-matrix-test.cc	/^static void UnitTestCuMatrixGroupPnorm() {$/;"	f	namespace:kaldi
UnitTestCuMatrixGroupPnormDeriv	cu-matrix-test.cc	/^static void UnitTestCuMatrixGroupPnormDeriv() {$/;"	f	namespace:kaldi
UnitTestCuMatrixIO	cu-matrix-test.cc	/^static void UnitTestCuMatrixIO() {$/;"	f	namespace:kaldi
UnitTestCuMatrixLookup	cu-matrix-test.cc	/^static void UnitTestCuMatrixLookup() {$/;"	f	namespace:kaldi
UnitTestCuMatrixMax	cu-matrix-test.cc	/^static void UnitTestCuMatrixMax() {$/;"	f	namespace:kaldi
UnitTestCuMatrixMulColsVec	cu-matrix-test.cc	/^static void UnitTestCuMatrixMulColsVec() {$/;"	f	namespace:kaldi
UnitTestCuMatrixMulElements	cu-matrix-test.cc	/^static void UnitTestCuMatrixMulElements() {$/;"	f	namespace:kaldi
UnitTestCuMatrixMulRowsGroupMat	cu-matrix-test.cc	/^static void UnitTestCuMatrixMulRowsGroupMat() {$/;"	f	namespace:kaldi
UnitTestCuMatrixMulRowsVec	cu-matrix-test.cc	/^static void UnitTestCuMatrixMulRowsVec() {$/;"	f	namespace:kaldi
UnitTestCuMatrixObjfDeriv	cu-matrix-test.cc	/^static void UnitTestCuMatrixObjfDeriv() {$/;"	f	namespace:kaldi
UnitTestCuMatrixScale	cu-matrix-test.cc	/^static void UnitTestCuMatrixScale() {$/;"	f	namespace:kaldi
UnitTestCuMatrixSet	cu-matrix-test.cc	/^static void UnitTestCuMatrixSet() {$/;"	f	namespace:kaldi
UnitTestCuMatrixSetRandUniform	cu-matrix-test.cc	/^static void UnitTestCuMatrixSetRandUniform() {$/;"	f	namespace:kaldi
UnitTestCuMatrixSetRandn	cu-matrix-test.cc	/^static void UnitTestCuMatrixSetRandn() {$/;"	f	namespace:kaldi
UnitTestCuMatrixSigmoid	cu-matrix-test.cc	/^static void UnitTestCuMatrixSigmoid() {$/;"	f	namespace:kaldi
UnitTestCuMatrixSoftHinge	cu-matrix-test.cc	/^static void UnitTestCuMatrixSoftHinge() {$/;"	f	namespace:kaldi
UnitTestCuMatrixSum	cu-matrix-test.cc	/^static void UnitTestCuMatrixSum() {$/;"	f	namespace:kaldi
UnitTestCuMatrixSumColumnRanges	cu-matrix-test.cc	/^static void UnitTestCuMatrixSumColumnRanges() {$/;"	f	namespace:kaldi
UnitTestCuMatrixSymAddMat2	cu-matrix-test.cc	/^static void UnitTestCuMatrixSymAddMat2() {$/;"	f	namespace:kaldi
UnitTestCuMatrixSymInvertPosDef	cu-matrix-test.cc	/^static void UnitTestCuMatrixSymInvertPosDef() {$/;"	f	namespace:kaldi
UnitTestCuMatrixTraceMatMat	cu-matrix-test.cc	/^static void UnitTestCuMatrixTraceMatMat() {$/;"	f	namespace:kaldi
UnitTestCuMatrixTranspose	cu-matrix-test.cc	/^static void UnitTestCuMatrixTranspose() {$/;"	f	namespace:kaldi
UnitTestCuPackedMatrixAddToDiag	cu-packed-matrix-test.cc	/^static void UnitTestCuPackedMatrixAddToDiag() {$/;"	f	namespace:kaldi
UnitTestCuPackedMatrixConstructor	cu-packed-matrix-test.cc	/^static void UnitTestCuPackedMatrixConstructor() { $/;"	f	namespace:kaldi
UnitTestCuPackedMatrixCopy	cu-packed-matrix-test.cc	/^static void UnitTestCuPackedMatrixCopy() { $/;"	f	namespace:kaldi
UnitTestCuPackedMatrixScale	cu-packed-matrix-test.cc	/^static void UnitTestCuPackedMatrixScale() {$/;"	f	namespace:kaldi
UnitTestCuPackedMatrixScaleDiag	cu-packed-matrix-test.cc	/^static void UnitTestCuPackedMatrixScaleDiag() {$/;"	f	namespace:kaldi
UnitTestCuPackedMatrixSetUnit	cu-packed-matrix-test.cc	/^static void UnitTestCuPackedMatrixSetUnit() {$/;"	f	namespace:kaldi
UnitTestCuPackedMatrixTrace	cu-packed-matrix-test.cc	/^static void UnitTestCuPackedMatrixTrace() {$/;"	f	namespace:kaldi
UnitTestCuSigmoid	cu-matrix-test.cc	/^static void UnitTestCuSigmoid() {$/;"	f	namespace:kaldi
UnitTestCuSoftmax	cu-matrix-test.cc	/^static void UnitTestCuSoftmax() {$/;"	f	namespace:kaldi
UnitTestCuSpMatrixAddMat2	cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixAddMat2() {$/;"	f	namespace:kaldi
UnitTestCuSpMatrixAddSp	cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixAddSp() {$/;"	f	namespace:kaldi
UnitTestCuSpMatrixAddToDiag	cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixAddToDiag() {$/;"	f	namespace:kaldi
UnitTestCuSpMatrixAddVec2	cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixAddVec2() {$/;"	f	namespace:kaldi
UnitTestCuSpMatrixApproxEqual	cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixApproxEqual() {$/;"	f	namespace:kaldi
UnitTestCuSpMatrixApproxInvert	cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixApproxInvert(int32 dim) {$/;"	f	namespace:kaldi
UnitTestCuSpMatrixConstructor	cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixConstructor() { $/;"	f	namespace:kaldi
UnitTestCuSpMatrixCopyFromMat	cu-sp-matrix-speed-test.cc	/^static void UnitTestCuSpMatrixCopyFromMat(int32 dim, SpCopyType copy_type) {$/;"	f	namespace:kaldi
UnitTestCuSpMatrixCopyFromMat	cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixCopyFromMat() {$/;"	f	namespace:kaldi
UnitTestCuSpMatrixIO	cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixIO() {$/;"	f	namespace:kaldi
UnitTestCuSpMatrixInvert	cu-sp-matrix-speed-test.cc	/^static void UnitTestCuSpMatrixInvert(int32 dim) {$/;"	f	namespace:kaldi
UnitTestCuSpMatrixInvert	cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixInvert() {$/;"	f	namespace:kaldi
UnitTestCuSpMatrixOperator	cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixOperator() {$/;"	f	namespace:kaldi
UnitTestCuSpMatrixSetUnit	cu-sp-matrix-test.cc	/^void UnitTestCuSpMatrixSetUnit() {$/;"	f	namespace:kaldi
UnitTestCuSpMatrixTraceSpSp	cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixTraceSpSp() {$/;"	f	namespace:kaldi
UnitTestCuSubMatrix	cu-matrix-test.cc	/^static void UnitTestCuSubMatrix() {$/;"	f	namespace:kaldi
UnitTestCuSubVector	cu-vector-test.cc	/^static void UnitTestCuSubVector() {$/;"	f	namespace:kaldi
UnitTestCuTanh	cu-matrix-test.cc	/^void UnitTestCuTanh() {$/;"	f	namespace:kaldi
UnitTestCuTpMatrixCholesky	cu-tp-matrix-test.cc	/^static void UnitTestCuTpMatrixCholesky() {$/;"	f	namespace:kaldi
UnitTestCuTpMatrixCopyFromMat	cu-tp-matrix-test.cc	/^static void UnitTestCuTpMatrixCopyFromMat() {$/;"	f	namespace:kaldi
UnitTestCuTpMatrixCopyFromTp	cu-tp-matrix-test.cc	/^static void UnitTestCuTpMatrixCopyFromTp() {$/;"	f	namespace:kaldi
UnitTestCuTpMatrixIO	cu-tp-matrix-test.cc	/^static void UnitTestCuTpMatrixIO() {$/;"	f	namespace:kaldi
UnitTestCuTpMatrixInvert	cu-tp-matrix-test.cc	/^static void UnitTestCuTpMatrixInvert() {$/;"	f	namespace:kaldi
UnitTestCuVectorAddColSumMat	cu-matrix-test.cc	/^static void UnitTestCuVectorAddColSumMat() {$/;"	f	namespace:kaldi
UnitTestCuVectorAddColSumMatLarge	cu-matrix-test.cc	/^static void UnitTestCuVectorAddColSumMatLarge() {$/;"	f	namespace:kaldi
UnitTestCuVectorAddRowSumMat	cu-matrix-test.cc	/^static void UnitTestCuVectorAddRowSumMat() {$/;"	f	namespace:kaldi
UnitTestCuVectorAddRowSumMatLarge	cu-matrix-test.cc	/^static void UnitTestCuVectorAddRowSumMatLarge() {$/;"	f	namespace:kaldi
UnitTestCuVectorAddTp	cu-vector-test.cc	/^static void UnitTestCuVectorAddTp() {$/;"	f	namespace:kaldi
UnitTestCuVectorAddTpVec	cu-matrix-test.cc	/^static void UnitTestCuVectorAddTpVec() {$/;"	f	namespace:kaldi
UnitTestCuVectorAddVec	cu-matrix-test.cc	/^static void UnitTestCuVectorAddVec() {$/;"	f	namespace:kaldi
UnitTestCuVectorCopyFromVec	cu-vector-test.cc	/^static void UnitTestCuVectorCopyFromVec() {$/;"	f	namespace:kaldi
UnitTestCuVectorIO	cu-vector-test.cc	/^static void UnitTestCuVectorIO() {$/;"	f	namespace:kaldi
UnitTestCuVectorInvertElements	cu-matrix-test.cc	/^static void UnitTestCuVectorInvertElements() {$/;"	f	namespace:kaldi
UnitTestCuVectorMulTp	cu-matrix-test.cc	/^static void UnitTestCuVectorMulTp() {$/;"	f	namespace:kaldi
UnitTestCuVectorMulTp	cu-vector-test.cc	/^static void UnitTestCuVectorMulTp() {$/;"	f	namespace:kaldi
UnitTestCuVectorReplaceValue	cu-vector-test.cc	/^template<typename Real> static void UnitTestCuVectorReplaceValue() {$/;"	f	namespace:kaldi
UnitTestInvert	cu-test.cc	/^template<typename Real> static void UnitTestInvert() {$/;"	f	namespace:kaldi
UnitTestMatrix	cu-test.cc	/^template<typename Real> static void UnitTestMatrix() {$/;"	f	namespace:kaldi
UnitTestMulTp	cu-test.cc	/^template<typename Real> static void UnitTestMulTp() {$/;"	f	namespace:kaldi
UnitTestSetZeroUpperDiag	cu-test.cc	/^static void UnitTestSetZeroUpperDiag() {$/;"	f	namespace:kaldi
UnitTestSwapCu2Cu	cu-matrix-test.cc	/^void UnitTestSwapCu2Cu() {$/;"	f	namespace:kaldi
UnitTestSwapCu2M	cu-matrix-test.cc	/^void UnitTestSwapCu2M() {$/;"	f	namespace:kaldi
UnitTestTrace	cu-test.cc	/^template<typename Real> static void UnitTestTrace() {$/;"	f	namespace:kaldi
UnitTestVector	cu-test.cc	/^template<typename Real> static void UnitTestVector() {$/;"	f	namespace:kaldi
Vec	cu-vector.h	/^  inline VectorBase<Real> &Vec() {$/;"	f	class:kaldi::CuVectorBase
Vec	cu-vector.h	/^  inline const VectorBase<Real> &Vec() const {$/;"	f	class:kaldi::CuVectorBase
VecVec	cu-vector.cc	/^Real VecVec(const CuVectorBase<Real> &A, const CuVectorBase<OtherReal> &B) {$/;"	f	namespace:kaldi
VecVec	cu-vector.cc	/^Real VecVec(const CuVectorBase<Real> &a,$/;"	f	namespace:kaldi
Vector	cu-vector.h	/^Vector<Real>::Vector(const CuVectorBase<OtherReal> &cu) {$/;"	f	class:kaldi::Vector
Write	cu-block-matrix.cc	/^void CuBlockMatrix<Real>::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::CuBlockMatrix
Write	cu-matrix.cc	/^void CuMatrixBase<Real>::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::CuMatrixBase
Write	cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::CuPackedMatrix
Write	cu-vector.cc	/^void CuVector<Real>::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::CuVector
active_gpu_id_	cu-device.h	/^  int32 active_gpu_id_; $/;"	m	class:kaldi::CuDevice
addr_to_list_	cu-device.cc	/^  unordered_map<void*, MemInfoForSize*> addr_to_list_;$/;"	m	class:kaldi::CuAllocator	file:
allocator_	cu-device.h	/^  CuAllocator *allocator_;$/;"	m	class:kaldi::CuDevice
block_data_	cu-block-matrix.h	/^  std::vector<BlockMatrixData> block_data_;$/;"	m	class:kaldi::CuBlockMatrix
cache_memory	cu-device.cc	/^  bool cache_memory; \/\/ Enable GPU memory caching, (false = disable).$/;"	m	struct:kaldi::CuAllocatorOptions	file:
cleanup_countdown_bytes_	cu-device.cc	/^  int32 cleanup_countdown_bytes_; \/\/ countdown in bytes, until the next time we check$/;"	m	class:kaldi::CuAllocator	file:
cleanup_interval_bytes	cu-device.cc	/^  int32 cleanup_interval_bytes;$/;"	m	struct:kaldi::CuAllocatorOptions	file:
col_offset	cu-block-matrix.h	/^    MatrixIndexT col_offset;$/;"	m	struct:kaldi::CuBlockMatrix::BlockMatrixData
col_offset	cu-matrixdim.h	/^    int32_cuda col_offset; \/\/ sum of #cols of previous M_i$/;"	m	struct:CuBlockMatrixData_
cols	cu-matrixdim.h	/^    int32_cuda cols;$/;"	m	struct:MatrixDim_
column	cu-matrixdim.h	/^  int32_cuda column;$/;"	m	struct:MatrixElement
count	cu-device.cc	/^  int32 count; \/\/ Number of times we free and delete a particular size before we$/;"	m	struct:kaldi::CuAllocatorOptions	file:
countdown	cu-device.cc	/^    size_t countdown; \/\/ number that have been freed and not cached.$/;"	m	struct:kaldi::CuAllocator::MemInfoForSize	file:
cu	cu-math.cc	/^namespace cu {$/;"	n	namespace:kaldi	file:
cu	cu-math.h	/^namespace cu {$/;"	n	namespace:kaldi
cu_data_	cu-block-matrix.h	/^  CuBlockMatrixData *cu_data_; \/\/ We store the pointers and some additional info$/;"	m	class:kaldi::CuBlockMatrix
cublas_asum	cublas-wrappers.h	/^inline double cublas_asum(int n, const double* x, int incx) {$/;"	f	namespace:kaldi
cublas_asum	cublas-wrappers.h	/^inline float cublas_asum(int n, const float* x, int incx) {$/;"	f	namespace:kaldi
cublas_axpy	cublas-wrappers.h	/^inline void cublas_axpy(int n, double alpha, const double* x, int incx, double* y, int incy) {$/;"	f	namespace:kaldi
cublas_axpy	cublas-wrappers.h	/^inline void cublas_axpy(int n, float alpha, const float* x, int incx, float* y, int incy) {$/;"	f	namespace:kaldi
cublas_copy	cublas-wrappers.h	/^inline void cublas_copy(int n, const double* x, int incx,$/;"	f	namespace:kaldi
cublas_copy	cublas-wrappers.h	/^inline void cublas_copy(int n, const float* x, int incx,$/;"	f	namespace:kaldi
cublas_dot	cublas-wrappers.h	/^inline double cublas_dot(int n, const double *x, int incx, const double *y, int incy) {$/;"	f	namespace:kaldi
cublas_dot	cublas-wrappers.h	/^inline float cublas_dot(int n, const float *x, int incx, const float *y, int incy) {$/;"	f	namespace:kaldi
cublas_gemm	cublas-wrappers.h	/^inline void cublas_gemm(char transa, char transb, int m, int n,int k, double alpha, const double *A, int lda,const double *B, int ldb, double beta, double *C, int ldc) {$/;"	f	namespace:kaldi
cublas_gemm	cublas-wrappers.h	/^inline void cublas_gemm(char transa, char transb, int m, int n,int k, float alpha, const float *A, int lda,const float *B, int ldb, float beta, float *C, int ldc) {$/;"	f	namespace:kaldi
cublas_gemv	cublas-wrappers.h	/^inline void cublas_gemv(char trans, int m, int n, double alpha,$/;"	f	namespace:kaldi
cublas_gemv	cublas-wrappers.h	/^inline void cublas_gemv(char trans, int m, int n, float alpha,$/;"	f	namespace:kaldi
cublas_nrm2	cublas-wrappers.h	/^inline double cublas_nrm2(int n, const double* x, int incx) {$/;"	f	namespace:kaldi
cublas_nrm2	cublas-wrappers.h	/^inline float cublas_nrm2(int n, const float* x, int incx) {$/;"	f	namespace:kaldi
cublas_scal	cublas-wrappers.h	/^inline void cublas_scal(int n, double alpha, double* mat, int incx) {$/;"	f	namespace:kaldi
cublas_scal	cublas-wrappers.h	/^inline void cublas_scal(int n, float alpha, float* mat, int incx) {$/;"	f	namespace:kaldi
cublas_spmv	cublas-wrappers.h	/^inline void cublas_spmv(char uplo, int n, double alpha, const double *AP, const double *x,$/;"	f	namespace:kaldi
cublas_spmv	cublas-wrappers.h	/^inline void cublas_spmv(char uplo, int n, float alpha, const float *AP, const float *x,$/;"	f	namespace:kaldi
cublas_spr	cublas-wrappers.h	/^inline void cublas_spr(char uplo, int n, double alpha, const double *x,$/;"	f	namespace:kaldi
cublas_spr	cublas-wrappers.h	/^inline void cublas_spr(char uplo, int n, float alpha, const float *x,$/;"	f	namespace:kaldi
cublas_syrk	cublas-wrappers.h	/^inline void cublas_syrk(char uplo, char trans, int n, int k,$/;"	f	namespace:kaldi
cublas_tpmv	cublas-wrappers.h	/^inline void cublas_tpmv(char trans, int n, const double* Ap,$/;"	f	namespace:kaldi
cublas_tpmv	cublas-wrappers.h	/^inline void cublas_tpmv(char trans, int n,$/;"	f	namespace:kaldi
cublas_trsm	cublas-wrappers.h	/^inline void cublas_trsm(int m, int n, double alpha, const double* A, int lda, double* B, int ldb) {$/;"	f	namespace:kaldi
cublas_trsm	cublas-wrappers.h	/^inline void cublas_trsm(int m, int n, float alpha, const float* A, int lda, float* B, int ldb) {$/;"	f	namespace:kaldi
cuda_add	cu-kernels.h	/^inline void cuda_add(dim3 Gr, dim3 Bl, double *mat, double value, MatrixDim d) { cudaD_add(Gr,Bl,mat,value,d); }$/;"	f	namespace:kaldi
cuda_add	cu-kernels.h	/^inline void cuda_add(dim3 Gr, dim3 Bl, float *mat, float value, MatrixDim d) { cudaF_add(Gr,Bl,mat,value,d); }$/;"	f	namespace:kaldi
cuda_add_col_sum_mat	cu-kernels.h	/^inline void cuda_add_col_sum_mat(dim3 Gr, dim3 Bl, const double *mat, double *vec_sum, MatrixDim d) { cudaD_add_col_sum_mat(Gr,Bl,mat,vec_sum,d); }$/;"	f	namespace:kaldi
cuda_add_col_sum_mat	cu-kernels.h	/^inline void cuda_add_col_sum_mat(dim3 Gr, dim3 Bl, const float *mat, float *vec_sum, MatrixDim d) { cudaF_add_col_sum_mat(Gr,Bl,mat,vec_sum,d); }$/;"	f	namespace:kaldi
cuda_add_diag_mat	cu-kernels.h	/^inline void cuda_add_diag_mat(int Gr, int Bl, double alpha, double* v, const double* mat, double beta, MatrixDim dmat, int dim) { cudaD_add_diag_mat(Gr,Bl,alpha,v,mat,beta,dmat,dim); }$/;"	f	namespace:kaldi
cuda_add_diag_mat	cu-kernels.h	/^inline void cuda_add_diag_mat(int Gr, int Bl, float alpha, float* v, const float* mat, float beta, MatrixDim dmat, int dim) { cudaF_add_diag_mat(Gr,Bl,alpha,v,mat,beta,dmat,dim); }$/;"	f	namespace:kaldi
cuda_add_diag_mat_mat	cu-kernels.h	/^inline void cuda_add_diag_mat_mat(int Gr, int Bl, double alpha, double* v, int v_dim, const double* M, $/;"	f	namespace:kaldi
cuda_add_diag_mat_mat	cu-kernels.h	/^inline void cuda_add_diag_mat_mat(int Gr, int Bl, float alpha, float* v, int v_dim, const float* M, $/;"	f	namespace:kaldi
cuda_add_diag_mat_trans	cu-kernels.h	/^inline void cuda_add_diag_mat_trans(int Gr, int Bl, double alpha, double* v, const double* mat, double beta, MatrixDim dmat, int dim) { cudaD_add_diag_mat_trans(Gr,Bl,alpha,v,mat,beta,dmat,dim); }$/;"	f	namespace:kaldi
cuda_add_diag_mat_trans	cu-kernels.h	/^inline void cuda_add_diag_mat_trans(int Gr, int Bl, float alpha, float* v, const float* mat, float beta, MatrixDim dmat, int dim) { cudaF_add_diag_mat_trans(Gr,Bl,alpha,v,mat,beta,dmat,dim); }$/;"	f	namespace:kaldi
cuda_add_diag_packed	cu-kernels.h	/^inline void cuda_add_diag_packed(int Gr, int Bl, double* mat, double value, int dim) { cudaD_add_diag_packed(Gr,Bl,mat,value,dim); }$/;"	f	namespace:kaldi
cuda_add_diag_packed	cu-kernels.h	/^inline void cuda_add_diag_packed(int Gr, int Bl, float* mat, float value, int dim) { cudaF_add_diag_packed(Gr,Bl,mat,value,dim); }$/;"	f	namespace:kaldi
cuda_add_diag_vec_mat	cu-kernels.h	/^inline void cuda_add_diag_vec_mat(dim3 Gr, dim3 Bl, double alpha, double *mat, MatrixDim mat_dim,$/;"	f	namespace:kaldi
cuda_add_diag_vec_mat	cu-kernels.h	/^inline void cuda_add_diag_vec_mat(dim3 Gr, dim3 Bl, float alpha, float *mat, MatrixDim mat_dim,$/;"	f	namespace:kaldi
cuda_add_mat	cu-kernels.h	/^inline void cuda_add_mat(dim3 Gr, dim3 Bl, double alpha, const double *src, double beta, double *dst, MatrixDim d, int src_stride) { cudaD_add_mat(Gr,Bl,alpha,src,beta,dst,d,src_stride); }$/;"	f	namespace:kaldi
cuda_add_mat	cu-kernels.h	/^inline void cuda_add_mat(dim3 Gr, dim3 Bl, float alpha, const float *src, float beta, float *dst, MatrixDim d, int src_stride) { cudaF_add_mat(Gr,Bl,alpha,src,beta,dst,d,src_stride); }$/;"	f	namespace:kaldi
cuda_add_mat_blockmat	cu-kernels.h	/^inline void cuda_add_mat_blockmat(dim3 Gr, dim3 Bl, double *data, MatrixDim d, const double *Adata,$/;"	f	namespace:kaldi
cuda_add_mat_blockmat	cu-kernels.h	/^inline void cuda_add_mat_blockmat(dim3 Gr, dim3 Bl, float *data, MatrixDim d, const float *Adata,$/;"	f	namespace:kaldi
cuda_add_mat_mat_div_mat	cu-kernels.h	/^inline void cuda_add_mat_mat_div_mat(dim3 Gr, dim3 Bl, const double *A, const double *B, const double *C, double *dst, MatrixDim d) { cudaD_add_mat_mat_div_mat(Gr,Bl,A,B,C,dst,d); }$/;"	f	namespace:kaldi
cuda_add_mat_mat_div_mat	cu-kernels.h	/^inline void cuda_add_mat_mat_div_mat(dim3 Gr, dim3 Bl, const float *A, const float *B, const float *C, float *dst, MatrixDim d) { cudaF_add_mat_mat_div_mat(Gr,Bl,A,B,C,dst,d); }$/;"	f	namespace:kaldi
cuda_add_row_sum_mat	cu-kernels.h	/^inline void cuda_add_row_sum_mat(dim3 Gr, dim3 Bl, const double *mat, double *vec_sum, MatrixDim d) { cudaD_add_row_sum_mat(Gr,Bl,mat,vec_sum,d); }$/;"	f	namespace:kaldi
cuda_add_row_sum_mat	cu-kernels.h	/^inline void cuda_add_row_sum_mat(dim3 Gr, dim3 Bl, const float *mat, float *vec_sum, MatrixDim d) { cudaF_add_row_sum_mat(Gr,Bl,mat,vec_sum,d); }$/;"	f	namespace:kaldi
cuda_add_vec2	cu-kernels.h	/^inline void cuda_add_vec2(dim3 Gr, dim3 Bl, double *mat, const double *vec, const double alpha, int dim) { cudaD_add_vec2(Gr,Bl,mat,vec,alpha,dim); }$/;"	f	namespace:kaldi
cuda_add_vec2	cu-kernels.h	/^inline void cuda_add_vec2(dim3 Gr, dim3 Bl, float *mat, const float *vec, const float alpha, int dim) { cudaF_add_vec2(Gr,Bl,mat,vec,alpha,dim); }$/;"	f	namespace:kaldi
cuda_add_vec_to_cols	cu-kernels.h	/^inline void cuda_add_vec_to_cols(dim3 Gr, dim3 Bl, double alpha, const double *col, double beta, double *dst, MatrixDim d) { cudaD_add_vec_to_cols(Gr,Bl,alpha,col,beta,dst,d); }$/;"	f	namespace:kaldi
cuda_add_vec_to_cols	cu-kernels.h	/^inline void cuda_add_vec_to_cols(dim3 Gr, dim3 Bl, float alpha, const float *col, float beta, float *dst, MatrixDim d) { cudaF_add_vec_to_cols(Gr,Bl,alpha,col,beta,dst,d); }$/;"	f	namespace:kaldi
cuda_add_vec_to_rows	cu-kernels.h	/^inline void cuda_add_vec_to_rows(dim3 Gr, dim3 Bl, double alpha, const double *row, double beta, double *dst, MatrixDim d) { cudaD_add_vec_to_rows(Gr,Bl,alpha,row,beta,dst,d); }$/;"	f	namespace:kaldi
cuda_add_vec_to_rows	cu-kernels.h	/^inline void cuda_add_vec_to_rows(dim3 Gr, dim3 Bl, float alpha, const float *row, float beta, float *dst, MatrixDim d) { cudaF_add_vec_to_rows(Gr,Bl,alpha,row,beta,dst,d); }$/;"	f	namespace:kaldi
cuda_add_vec_vec	cu-kernels.h	/^inline void cuda_add_vec_vec(int Gr, int Bl, double alpha, double* v, const double* x, const double* y, double beta, int dim) { cudaD_add_vec_vec(Gr,Bl,alpha,v,x,y,beta,dim); }$/;"	f	namespace:kaldi
cuda_add_vec_vec	cu-kernels.h	/^inline void cuda_add_vec_vec(int Gr, int Bl, float alpha, float* v, const float* x, const float* y, float beta, int dim) { cudaF_add_vec_vec(Gr,Bl,alpha,v,x,y,beta,dim); }$/;"	f	namespace:kaldi
cuda_apply_ceiling	cu-kernels.h	/^inline void cuda_apply_ceiling(dim3 Gr, dim3 Bl, double* mat, double ceiling_val, MatrixDim dim) { cudaD_apply_ceiling(Gr,Bl,mat,ceiling_val,dim); }$/;"	f	namespace:kaldi
cuda_apply_ceiling	cu-kernels.h	/^inline void cuda_apply_ceiling(dim3 Gr, dim3 Bl, float* mat, float ceiling_val, MatrixDim dim) { cudaF_apply_ceiling(Gr,Bl,mat,ceiling_val,dim); }$/;"	f	namespace:kaldi
cuda_apply_exp	cu-kernels.h	/^inline void cuda_apply_exp(dim3 Gr, dim3 Bl, double* mat, MatrixDim d) { cudaD_apply_exp(Gr,Bl,mat,d); }$/;"	f	namespace:kaldi
cuda_apply_exp	cu-kernels.h	/^inline void cuda_apply_exp(dim3 Gr, dim3 Bl, float* mat, MatrixDim d) { cudaF_apply_exp(Gr,Bl,mat,d); }$/;"	f	namespace:kaldi
cuda_apply_floor	cu-kernels.h	/^inline void cuda_apply_floor(dim3 Gr, dim3 Bl, double* mat, double floor_val, MatrixDim dim) { cudaD_apply_floor(Gr,Bl,mat,floor_val,dim); }$/;"	f	namespace:kaldi
cuda_apply_floor	cu-kernels.h	/^inline void cuda_apply_floor(dim3 Gr, dim3 Bl, float* mat, float floor_val, MatrixDim dim) { cudaF_apply_floor(Gr,Bl,mat,floor_val,dim); }$/;"	f	namespace:kaldi
cuda_apply_heaviside	cu-kernels.h	/^inline void cuda_apply_heaviside(dim3 Gr, dim3 Bl, double* mat, MatrixDim dim) { cudaD_apply_heaviside(Gr,Bl,mat,dim); }$/;"	f	namespace:kaldi
cuda_apply_heaviside	cu-kernels.h	/^inline void cuda_apply_heaviside(dim3 Gr, dim3 Bl, float* mat, MatrixDim dim) { cudaF_apply_heaviside(Gr,Bl,mat,dim); }$/;"	f	namespace:kaldi
cuda_apply_log	cu-kernels.h	/^inline void cuda_apply_log(dim3 Gr, dim3 Bl, double *mat, MatrixDim d) { cudaD_apply_log(Gr,Bl,mat,d); }$/;"	f	namespace:kaldi
cuda_apply_log	cu-kernels.h	/^inline void cuda_apply_log(dim3 Gr, dim3 Bl, float *mat, MatrixDim d) { cudaF_apply_log(Gr,Bl,mat,d); }$/;"	f	namespace:kaldi
cuda_apply_pow	cu-kernels.h	/^inline void cuda_apply_pow(dim3 Gr, dim3 Bl, double* mat, double power, MatrixDim dim) { cudaD_apply_pow(Gr,Bl,mat,power,dim); }$/;"	f	namespace:kaldi
cuda_apply_pow	cu-kernels.h	/^inline void cuda_apply_pow(dim3 Gr, dim3 Bl, float* mat, float power, MatrixDim dim) { cudaF_apply_pow(Gr,Bl,mat,power,dim); }$/;"	f	namespace:kaldi
cuda_axpy	cu-kernels.h	/^inline void cuda_axpy(int n, double alpha, const double *x, int incx, double *y, int incy) {$/;"	f	namespace:kaldi
cuda_axpy	cu-kernels.h	/^inline void cuda_axpy(int n, float alpha, const float *x, int incx, float *y, int incy) {$/;"	f	namespace:kaldi
cuda_binarize_probs	cu-randkernels.h	/^template<> inline void cuda_binarize_probs<double>(dim3 Gr, dim3 Bl, double *states, const double *probs, double *rand, MatrixDim d) { cudaD_binarize_probs(Gr,Bl,states,probs,rand,d); } $/;"	f	namespace:kaldi
cuda_binarize_probs	cu-randkernels.h	/^template<> inline void cuda_binarize_probs<float>(dim3 Gr, dim3 Bl, float *states, const float *probs, float *rand, MatrixDim d) { cudaF_binarize_probs(Gr,Bl,states,probs,rand,d); } $/;"	f	namespace:kaldi
cuda_binarize_probs	cu-randkernels.h	/^template<typename Real> inline void cuda_binarize_probs(dim3 Gr, dim3 Bl, Real *states, const Real *probs, Real *rand, MatrixDim d) { KALDI_ERR << __func__ << " Not implemented!"; }$/;"	f	namespace:kaldi
cuda_block_add_mat_mat	cu-kernels.h	/^inline void cuda_block_add_mat_mat(dim3 Gr, dim3 Bl, CuBlockMatrixData *B_cu_data, int num_blocks,$/;"	f	namespace:kaldi
cuda_calc_pnorm_deriv	cu-kernels.h	/^inline void cuda_calc_pnorm_deriv(dim3 Gr, dim3 Bl, double *y, const double *x1, const double *x2,  MatrixDim d, int src_stride, int group_size, double power) {cudaD_calc_pnorm_deriv(Gr, Bl, y, x1, x2, d, src_stride, group_size, power); }$/;"	f	namespace:kaldi
cuda_calc_pnorm_deriv	cu-kernels.h	/^inline void cuda_calc_pnorm_deriv(dim3 Gr, dim3 Bl, float *y, const float *x1, const float *x2,  MatrixDim d, int src_stride, int group_size, float power) {cudaF_calc_pnorm_deriv(Gr, Bl, y, x1, x2, d, src_stride, group_size, power); }$/;"	f	namespace:kaldi
cuda_comp_obj_deriv	cu-kernels.h	/^inline void cuda_comp_obj_deriv(dim3 Gr, dim3 Bl, MatrixElement<double>* x, int32 size, const double* z, MatrixDim d, double* z2, MatrixDim d2, double* t) {cudaD_comp_obj_deriv(Gr,Bl,x,size,z,d,z2,d2,t); }$/;"	f	namespace:kaldi
cuda_comp_obj_deriv	cu-kernels.h	/^inline void cuda_comp_obj_deriv(dim3 Gr, dim3 Bl, MatrixElement<float>* x, int32 size, const float* z, MatrixDim d, float* z2, MatrixDim d2, float* t) {cudaF_comp_obj_deriv(Gr,Bl,x,size,z,d,z2,d2,t); }$/;"	f	namespace:kaldi
cuda_copy	cu-kernels.h	/^inline void cuda_copy(dim3 Gr, dim3 Bl, double *y, const double *x, const int32_cuda *copy_from, MatrixDim d_out, MatrixDim d_in) { cudaD_copy(Gr,Bl,y,x,copy_from,d_out,d_in); }$/;"	f	namespace:kaldi
cuda_copy	cu-kernels.h	/^inline void cuda_copy(dim3 Gr, dim3 Bl, float *y, const float *x, const int32_cuda *copy_from, MatrixDim d_out, MatrixDim d_in) { cudaF_copy(Gr,Bl,y,x,copy_from,d_out,d_in); }$/;"	f	namespace:kaldi
cuda_copy_col_from_mat	cu-kernels.h	/^inline void cuda_copy_col_from_mat(int Gr, int Bl, double* v, int col, const double* mat, MatrixDim dmat, int dim) { cudaD_copy_col_from_mat(Gr,Bl,v,col,mat,dmat,dim); }$/;"	f	namespace:kaldi
cuda_copy_col_from_mat	cu-kernels.h	/^inline void cuda_copy_col_from_mat(int Gr, int Bl, float* v, int col, const float* mat, MatrixDim dmat, int dim) { cudaF_copy_col_from_mat(Gr,Bl,v,col,mat,dmat,dim); }$/;"	f	namespace:kaldi
cuda_copy_col_from_mat_df	cu-kernels.h	/^inline void cuda_copy_col_from_mat_df(int Gr, int Bl, double* v, int col, const double* mat, MatrixDim dmat, int dim) { cudaD_copy_col_from_mat_df(Gr,Bl,v,col,mat,dmat,dim); }$/;"	f	namespace:kaldi
cuda_copy_col_from_mat_df	cu-kernels.h	/^inline void cuda_copy_col_from_mat_df(int Gr, int Bl, double* v, int col, const float* mat, MatrixDim dmat, int dim) { cudaF_copy_col_from_mat_df(Gr,Bl,v,col,mat,dmat,dim); }$/;"	f	namespace:kaldi
cuda_copy_col_from_mat_fd	cu-kernels.h	/^inline void cuda_copy_col_from_mat_fd(int Gr, int Bl, float* v, int col, const double* mat, MatrixDim dmat, int dim) { cudaD_copy_col_from_mat_fd(Gr,Bl,v,col,mat,dmat,dim); }$/;"	f	namespace:kaldi
cuda_copy_col_from_mat_fd	cu-kernels.h	/^inline void cuda_copy_col_from_mat_fd(int Gr, int Bl, float* v, int col, const float* mat, MatrixDim dmat, int dim) { cudaF_copy_col_from_mat_fd(Gr,Bl,v,col,mat,dmat,dim); }$/;"	f	namespace:kaldi
cuda_copy_col_from_vec	cu-kernels.h	/^inline void cuda_copy_col_from_vec(int Gr, int Bl, double* mat, const double* v, int col, MatrixDim d) { cudaD_copy_col_from_vec(Gr,Bl,mat,v,col,d); }$/;"	f	namespace:kaldi
cuda_copy_col_from_vec	cu-kernels.h	/^inline void cuda_copy_col_from_vec(int Gr, int Bl, float* mat, const float* v, int col, MatrixDim d) { cudaF_copy_col_from_vec(Gr,Bl,mat,v,col,d); }$/;"	f	namespace:kaldi
cuda_copy_cols	cu-kernels.h	/^inline void cuda_copy_cols(dim3 Gr, dim3 Bl, double* dst, const double* src, const MatrixIndexT_cuda* reorder, MatrixDim dst_dim, int src_stride) {$/;"	f	namespace:kaldi
cuda_copy_cols	cu-kernels.h	/^inline void cuda_copy_cols(dim3 Gr, dim3 Bl, float* dst, const float* src, const MatrixIndexT_cuda* reorder, MatrixDim dst_dim, int src_stride) {$/;"	f	namespace:kaldi
cuda_copy_from_mat	cu-kernels.h	/^inline void cuda_copy_from_mat(dim3 Gr, dim3 Bl, double* mat_out, const double* mat_in, MatrixDim d_out, MatrixDim d_in) {$/;"	f	namespace:kaldi
cuda_copy_from_mat	cu-kernels.h	/^inline void cuda_copy_from_mat(dim3 Gr, dim3 Bl, double* mat_out, const float* mat_in, MatrixDim d_out, MatrixDim d_in) {$/;"	f	namespace:kaldi
cuda_copy_from_mat	cu-kernels.h	/^inline void cuda_copy_from_mat(dim3 Gr, dim3 Bl, float* mat_out, const double* mat_in, MatrixDim d_out, MatrixDim d_in) {$/;"	f	namespace:kaldi
cuda_copy_from_mat	cu-kernels.h	/^inline void cuda_copy_from_mat(dim3 Gr, dim3 Bl, float* mat_out, const float* mat_in, MatrixDim d_out, MatrixDim d_in) {$/;"	f	namespace:kaldi
cuda_copy_from_mat_trans	cu-kernels.h	/^inline void cuda_copy_from_mat_trans(dim3 Gr, dim3 Bl, double* mat_out, const double* mat_in, MatrixDim d_out, MatrixDim d_in) {$/;"	f	namespace:kaldi
cuda_copy_from_mat_trans	cu-kernels.h	/^inline void cuda_copy_from_mat_trans(dim3 Gr, dim3 Bl, double* mat_out, const float* mat_in, MatrixDim d_out, MatrixDim d_in) {$/;"	f	namespace:kaldi
cuda_copy_from_mat_trans	cu-kernels.h	/^inline void cuda_copy_from_mat_trans(dim3 Gr, dim3 Bl, float* mat_out, const double* mat_in, MatrixDim d_out, MatrixDim d_in) {$/;"	f	namespace:kaldi
cuda_copy_from_mat_trans	cu-kernels.h	/^inline void cuda_copy_from_mat_trans(dim3 Gr, dim3 Bl, float* mat_out, const float* mat_in, MatrixDim d_out, MatrixDim d_in) {$/;"	f	namespace:kaldi
cuda_copy_from_sp	cu-kernels.h	/^inline void cuda_copy_from_sp(int Gr, int Bl, const double* x, double* y, int d_in, MatrixDim d_out) { cudaD_copy_from_sp(Gr,Bl,x,y,d_in,d_out); }$/;"	f	namespace:kaldi
cuda_copy_from_sp	cu-kernels.h	/^inline void cuda_copy_from_sp(int Gr, int Bl, const float* x, float* y, int d_in, MatrixDim d_out) { cudaF_copy_from_sp(Gr,Bl,x,y,d_in,d_out); }$/;"	f	namespace:kaldi
cuda_copy_from_tp	cu-kernels.h	/^inline void cuda_copy_from_tp(int Gr, int Bl, double* A, const double* B, MatrixDim dmat) { cudaD_copy_from_tp(Gr,Bl,A,B,dmat); }$/;"	f	namespace:kaldi
cuda_copy_from_tp	cu-kernels.h	/^inline void cuda_copy_from_tp(int Gr, int Bl, double* A, const float* B, MatrixDim dmat) { cudaDF_copy_from_tp(Gr,Bl,A,B,dmat); }$/;"	f	namespace:kaldi
cuda_copy_from_tp	cu-kernels.h	/^inline void cuda_copy_from_tp(int Gr, int Bl, float* A, const double* B, MatrixDim dmat) { cudaFD_copy_from_tp(Gr,Bl,A,B,dmat); }$/;"	f	namespace:kaldi
cuda_copy_from_tp	cu-kernels.h	/^inline void cuda_copy_from_tp(int Gr, int Bl, float* A, const float* B, MatrixDim dmat) { cudaF_copy_from_tp(Gr,Bl,A,B,dmat); }$/;"	f	namespace:kaldi
cuda_copy_from_tp_trans	cu-kernels.h	/^inline void cuda_copy_from_tp_trans(int Gr, int Bl, double* A, const double* B, MatrixDim dmat) { cudaD_copy_from_tp_trans(Gr,Bl,A,B,dmat); }$/;"	f	namespace:kaldi
cuda_copy_from_tp_trans	cu-kernels.h	/^inline void cuda_copy_from_tp_trans(int Gr, int Bl, double* A, const float* B, MatrixDim dmat) { cudaDF_copy_from_tp_trans(Gr,Bl,A,B,dmat); }$/;"	f	namespace:kaldi
cuda_copy_from_tp_trans	cu-kernels.h	/^inline void cuda_copy_from_tp_trans(int Gr, int Bl, float* A, const double* B, MatrixDim dmat) { cudaFD_copy_from_tp_trans(Gr,Bl,A,B,dmat); }$/;"	f	namespace:kaldi
cuda_copy_from_tp_trans	cu-kernels.h	/^inline void cuda_copy_from_tp_trans(int Gr, int Bl, float* A, const float* B, MatrixDim dmat) { cudaF_copy_from_tp_trans(Gr,Bl,A,B,dmat); }$/;"	f	namespace:kaldi
cuda_copy_from_vec_df	cu-kernels.h	/^inline void cuda_copy_from_vec_df(int Gr, int Bl, double* v_out, const double* v_in, int dim) { cudaD_copy_from_vec_df(Gr,Bl,v_out,v_in,dim); }$/;"	f	namespace:kaldi
cuda_copy_from_vec_df	cu-kernels.h	/^inline void cuda_copy_from_vec_df(int Gr, int Bl, double* v_out, const float* v_in, int dim) { cudaF_copy_from_vec_df(Gr,Bl,v_out,v_in,dim); }$/;"	f	namespace:kaldi
cuda_copy_from_vec_fd	cu-kernels.h	/^inline void cuda_copy_from_vec_fd(int Gr, int Bl, float* v_out, const double* v_in, int dim) { cudaD_copy_from_vec_fd(Gr,Bl,v_out,v_in,dim); }$/;"	f	namespace:kaldi
cuda_copy_from_vec_fd	cu-kernels.h	/^inline void cuda_copy_from_vec_fd(int Gr, int Bl, float* v_out, const float* v_in, int dim) { cudaF_copy_from_vec_fd(Gr,Bl,v_out,v_in,dim); }$/;"	f	namespace:kaldi
cuda_copy_low_upp	cu-kernels.h	/^inline void cuda_copy_low_upp(dim3 Gr, dim3 Bl, double* A, MatrixDim dimA) { cudaD_copy_low_upp(Gr, Bl, A, dimA); }$/;"	f	namespace:kaldi
cuda_copy_low_upp	cu-kernels.h	/^inline void cuda_copy_low_upp(dim3 Gr, dim3 Bl, float* A, MatrixDim dimA) { cudaF_copy_low_upp(Gr, Bl, A, dimA); }$/;"	f	namespace:kaldi
cuda_copy_rows	cu-kernels.h	/^inline void cuda_copy_rows(dim3 Gr, dim3 Bl, double* dst, const double* src, const MatrixIndexT_cuda* reorder, MatrixDim dst_dim, int src_stride) {$/;"	f	namespace:kaldi
cuda_copy_rows	cu-kernels.h	/^inline void cuda_copy_rows(dim3 Gr, dim3 Bl, float* dst, const float* src, const MatrixIndexT_cuda* reorder, MatrixDim dst_dim, int src_stride) {$/;"	f	namespace:kaldi
cuda_copy_rows_from_vec	cu-kernels.h	/^inline void cuda_copy_rows_from_vec(dim3 Gr, dim3 Bl, double *mat_out, MatrixDim d_out, const double *v_in) {$/;"	f	namespace:kaldi
cuda_copy_rows_from_vec	cu-kernels.h	/^inline void cuda_copy_rows_from_vec(dim3 Gr, dim3 Bl, float *mat_out, MatrixDim d_out, const float *v_in) {$/;"	f	namespace:kaldi
cuda_copy_upp_low	cu-kernels.h	/^inline void cuda_copy_upp_low(dim3 Gr, dim3 Bl, double* A, MatrixDim dimA) { cudaD_copy_upp_low(Gr, Bl, A, dimA); }$/;"	f	namespace:kaldi
cuda_copy_upp_low	cu-kernels.h	/^inline void cuda_copy_upp_low(dim3 Gr, dim3 Bl, float* A, MatrixDim dimA) { cudaF_copy_upp_low(Gr, Bl, A, dimA); }$/;"	f	namespace:kaldi
cuda_diag_update	cu-choleskykernels.h	/^template<> inline void cuda_diag_update<double>(double* A, int block_offset, int n_remaining_blocks, MatrixDim d) { cudaD_diag_update(A,block_offset,n_remaining_blocks,d); }$/;"	f	namespace:kaldi
cuda_diag_update	cu-choleskykernels.h	/^template<> inline void cuda_diag_update<float>(float* A, int block_offset, int n_remaining_blocks, MatrixDim d) { cudaF_diag_update(A,block_offset,n_remaining_blocks,d); }$/;"	f	namespace:kaldi
cuda_diag_update	cu-choleskykernels.h	/^template<typename Real> inline void cuda_diag_update(Real* A, int block_offset, int n_remaining_blocks, MatrixDim d) { KALDI_ERR << __func__ << " Not implemented!"; }$/;"	f	namespace:kaldi
cuda_diff_sigmoid	cu-kernels.h	/^inline void cuda_diff_sigmoid(dim3 Gr, dim3 Bl, double *eout, const double *e, const double *y, MatrixDim d, int src_stride) { cudaD_diff_sigmoid(Gr,Bl,eout,e,y,d,src_stride); }$/;"	f	namespace:kaldi
cuda_diff_sigmoid	cu-kernels.h	/^inline void cuda_diff_sigmoid(dim3 Gr, dim3 Bl, float *eout, const float *e, const float *y, MatrixDim d, int src_stride) { cudaF_diff_sigmoid(Gr,Bl,eout,e,y,d,src_stride); }$/;"	f	namespace:kaldi
cuda_diff_tanh	cu-kernels.h	/^inline void cuda_diff_tanh(dim3 Gr, dim3 Bl, double *eout, const double *e, const double *y, MatrixDim d) { cudaD_diff_tanh(Gr,Bl,eout,e,y,d); }$/;"	f	namespace:kaldi
cuda_diff_tanh	cu-kernels.h	/^inline void cuda_diff_tanh(dim3 Gr, dim3 Bl, float *eout, const float *e, const float *y, MatrixDim d) { cudaF_diff_tanh(Gr,Bl,eout,e,y,d); }$/;"	f	namespace:kaldi
cuda_diff_xent	cu-kernels.h	/^inline void cuda_diff_xent(dim3 Gr, dim3 Bl, const int32_cuda *vec_tgt, double *mat_net_out, double *vec_log_post, MatrixDim d) {$/;"	f	namespace:kaldi
cuda_diff_xent	cu-kernels.h	/^inline void cuda_diff_xent(dim3 Gr, dim3 Bl, const int32_cuda *vec_tgt, float *mat_net_out, float *vec_log_post, MatrixDim d) { cudaF_diff_xent(Gr,Bl,vec_tgt,mat_net_out,vec_log_post,d); }$/;"	f	namespace:kaldi
cuda_div_rows_vec	cu-kernels.h	/^inline void cuda_div_rows_vec(dim3 Gr, dim3 Bl, double *mat, const double *vec_div, MatrixDim d) { cudaD_div_rows_vec(Gr,Bl,mat,vec_div,d); }$/;"	f	namespace:kaldi
cuda_div_rows_vec	cu-kernels.h	/^inline void cuda_div_rows_vec(dim3 Gr, dim3 Bl, float *mat, const float *vec_div, MatrixDim d) { cudaF_div_rows_vec(Gr,Bl,mat,vec_div,d); }$/;"	f	namespace:kaldi
cuda_equal_element_mask	cu-kernels.h	/^inline void cuda_equal_element_mask(dim3 Gr, dim3 Bl, const double *mat1, const double *mat2, double *mask, $/;"	f	namespace:kaldi
cuda_equal_element_mask	cu-kernels.h	/^inline void cuda_equal_element_mask(dim3 Gr, dim3 Bl, const float *mat1, const float *mat2, float *mask, $/;"	f	namespace:kaldi
cuda_factorize_diagonal_block	cu-choleskykernels.h	/^template<> inline void cuda_factorize_diagonal_block<double>(double* A, int block_offset, MatrixDim d) { cudaD_factorize_diagonal_block(A,block_offset,d); }$/;"	f	namespace:kaldi
cuda_factorize_diagonal_block	cu-choleskykernels.h	/^template<> inline void cuda_factorize_diagonal_block<float>(float* A, int block_offset, MatrixDim d) { cudaF_factorize_diagonal_block(A,block_offset,d); }$/;"	f	namespace:kaldi
cuda_factorize_diagonal_block	cu-choleskykernels.h	/^template<typename Real> inline void cuda_factorize_diagonal_block(Real* A, int block_offset, MatrixDim d) { KALDI_ERR << __func__ << " Not implemented!"; }$/;"	f	namespace:kaldi
cuda_find_row_max_id	cu-kernels.h	/^inline void cuda_find_row_max_id(dim3 Gr, dim3 Bl, const double *mat, double *vec_val, int32_cuda *vec_id, int32_cuda voff, MatrixDim d) { cudaD_find_row_max_id(Gr,Bl,mat,vec_val,vec_id,voff,d); }$/;"	f	namespace:kaldi
cuda_find_row_max_id	cu-kernels.h	/^inline void cuda_find_row_max_id(dim3 Gr, dim3 Bl, const float *mat, float *vec_val, int32_cuda *vec_id, int32_cuda voff, MatrixDim d) { cudaF_find_row_max_id(Gr,Bl,mat,vec_val,vec_id,voff,d); }$/;"	f	namespace:kaldi
cuda_gauss_rand	cu-randkernels.h	/^template<> inline void cuda_gauss_rand<double>(dim3 Gr, dim3 Bl, double *mat, uint32_cuda *z1, uint32_cuda *z2, uint32_cuda *z3, uint32_cuda *z4, MatrixDim d) { cudaD_gauss_rand(Gr,Bl,mat,z1,z2,z3,z4,d); } $/;"	f	namespace:kaldi
cuda_gauss_rand	cu-randkernels.h	/^template<> inline void cuda_gauss_rand<float>(dim3 Gr, dim3 Bl, float *mat, uint32_cuda *z1, uint32_cuda *z2, uint32_cuda *z3, uint32_cuda *z4, MatrixDim d) { cudaF_gauss_rand(Gr,Bl,mat,z1,z2,z3,z4,d); } $/;"	f	namespace:kaldi
cuda_gauss_rand	cu-randkernels.h	/^template<typename Real> inline void cuda_gauss_rand(dim3 Gr, dim3 Bl, Real *mat, uint32_cuda *z1, uint32_cuda *z2, uint32_cuda *z3, uint32_cuda *z4, MatrixDim d) { KALDI_ERR << __func__ << " Not implemented!"; }$/;"	f	namespace:kaldi
cuda_group_pnorm	cu-kernels.h	/^inline void cuda_group_pnorm(dim3 Gr, dim3 Bl, double *y, const double *x, MatrixDim d, int src_stride, int group_size, double power) { cudaD_group_pnorm(Gr, Bl, y, x, d, src_stride, group_size, power); }$/;"	f	namespace:kaldi
cuda_group_pnorm	cu-kernels.h	/^inline void cuda_group_pnorm(dim3 Gr, dim3 Bl, float *y, const float *x, MatrixDim d, int src_stride, int group_size, float power) { cudaF_group_pnorm(Gr, Bl, y, x, d, src_stride, group_size, power);}$/;"	f	namespace:kaldi
cuda_invert_elements	cu-kernels.h	/^inline void cuda_invert_elements(dim3 Gr, dim3 Bl, double *data, MatrixDim d) { cudaD_invert_elements(Gr,Bl,data,d); }$/;"	f	namespace:kaldi
cuda_invert_elements	cu-kernels.h	/^inline void cuda_invert_elements(dim3 Gr, dim3 Bl, float *data, MatrixDim d) { cudaF_invert_elements(Gr,Bl,data,d); }$/;"	f	namespace:kaldi
cuda_lo_update	cu-choleskykernels.h	/^template<> inline void cuda_lo_update<double>(double* A, int block_offset, int n_blocks, int n_remaining_blocks, MatrixDim d) { cudaD_lo_update(A,block_offset,n_blocks,n_remaining_blocks,d); }$/;"	f	namespace:kaldi
cuda_lo_update	cu-choleskykernels.h	/^template<> inline void cuda_lo_update<float>(float* A, int block_offset, int n_blocks, int n_remaining_blocks, MatrixDim d) { cudaF_lo_update(A,block_offset,n_blocks,n_remaining_blocks,d); }$/;"	f	namespace:kaldi
cuda_lo_update	cu-choleskykernels.h	/^template<typename Real> inline void cuda_lo_update(Real* A, int block_offset, int n_blocks, int n_remaining_blocks, MatrixDim d) { KALDI_ERR << __func__ << " Not implemented!"; }$/;"	f	namespace:kaldi
cuda_matrix_lookup	cu-kernels.h	/^inline void cuda_matrix_lookup(dim3 Gr, dim3 Bl, const double *data,$/;"	f	namespace:kaldi
cuda_matrix_lookup	cu-kernels.h	/^inline void cuda_matrix_lookup(dim3 Gr, dim3 Bl, const float *data,$/;"	f	namespace:kaldi
cuda_max	cu-kernels.h	/^inline void cuda_max(dim3 Gr, dim3 Bl, double *mat, const double *A, MatrixDim dst_d, int src_stride) {$/;"	f	namespace:kaldi
cuda_max	cu-kernels.h	/^inline void cuda_max(dim3 Gr, dim3 Bl, float *mat, const float *A, MatrixDim dst_d, int src_stride) {$/;"	f	namespace:kaldi
cuda_mul_cols_vec	cu-kernels.h	/^inline void cuda_mul_cols_vec(dim3 Gr, dim3 Bl, double *mat, const double *scale, MatrixDim d) { cudaD_mul_cols_vec(Gr,Bl,mat,scale,d); }$/;"	f	namespace:kaldi
cuda_mul_cols_vec	cu-kernels.h	/^inline void cuda_mul_cols_vec(dim3 Gr, dim3 Bl, float *mat, const float *scale, MatrixDim d) { cudaF_mul_cols_vec(Gr,Bl,mat,scale,d); }$/;"	f	namespace:kaldi
cuda_mul_elements	cu-kernels.h	/^inline void cuda_mul_elements(dim3 Gr, dim3 Bl, double *mat, const double *A, MatrixDim dst_d, int src_stride) {$/;"	f	namespace:kaldi
cuda_mul_elements	cu-kernels.h	/^inline void cuda_mul_elements(dim3 Gr, dim3 Bl, float *mat, const float *A, MatrixDim dst_d, int src_stride) {$/;"	f	namespace:kaldi
cuda_mul_rows_group_mat	cu-kernels.h	/^inline void cuda_mul_rows_group_mat(dim3 Gr, dim3 Bl, double *y, const double *x, MatrixDim d, int src_stride, int group_size) { cudaD_mul_rows_group_mat(Gr, Bl, y, x, d, src_stride, group_size); }$/;"	f	namespace:kaldi
cuda_mul_rows_group_mat	cu-kernels.h	/^inline void cuda_mul_rows_group_mat(dim3 Gr, dim3 Bl, float *y, const float *x, MatrixDim d, int src_stride, int group_size) { cudaF_mul_rows_group_mat(Gr, Bl, y, x, d, src_stride, group_size); }$/;"	f	namespace:kaldi
cuda_mul_rows_vec	cu-kernels.h	/^inline void cuda_mul_rows_vec(dim3 Gr, dim3 Bl, double *mat, const double *scale, MatrixDim d) { cudaD_mul_rows_vec(Gr,Bl,mat,scale,d); }$/;"	f	namespace:kaldi
cuda_mul_rows_vec	cu-kernels.h	/^inline void cuda_mul_rows_vec(dim3 Gr, dim3 Bl, float *mat, const float *scale, MatrixDim d) { cudaF_mul_rows_vec(Gr,Bl,mat,scale,d); }$/;"	f	namespace:kaldi
cuda_one	cu-kernels.h	/^inline void cuda_one(int Gr,int Bl,double* x,int dim) { cudaD_one(Gr,Bl,x,dim); }$/;"	f	namespace:kaldi
cuda_one	cu-kernels.h	/^inline void cuda_one(int Gr,int Bl,float* x,int dim) { cudaF_one(Gr,Bl,x,dim); }$/;"	f	namespace:kaldi
cuda_pvec_sum	cu-kernels.h	/^inline void cuda_pvec_sum(int Gr, int Bl, double* vec, double* pvec_sum, int dim, int size) { cudaD_pvec_sum(Gr,Bl,vec,pvec_sum,dim,size); }$/;"	f	namespace:kaldi
cuda_pvec_sum	cu-kernels.h	/^inline void cuda_pvec_sum(int Gr, int Bl, float* vec, float* pvec_sum, int dim, int size) { cudaF_pvec_sum(Gr, Bl, vec, pvec_sum, dim, size); }$/;"	f	namespace:kaldi
cuda_rand	cu-randkernels.h	/^template<> inline void cuda_rand<double>(dim3 Gr, dim3 Bl, double *mat, uint32_cuda *z1, uint32_cuda *z2, uint32_cuda *z3, uint32_cuda *z4, MatrixDim d) { cudaD_rand(Gr,Bl,mat,z1,z2,z3,z4,d); }$/;"	f	namespace:kaldi
cuda_rand	cu-randkernels.h	/^template<> inline void cuda_rand<float>(dim3 Gr, dim3 Bl, float *mat, uint32_cuda *z1, uint32_cuda *z2, uint32_cuda *z3, uint32_cuda *z4, MatrixDim d) { cudaF_rand(Gr,Bl,mat,z1,z2,z3,z4,d); }$/;"	f	namespace:kaldi
cuda_rand	cu-randkernels.h	/^template<typename Real> inline void cuda_rand(dim3 Gr, dim3 Bl, Real *mat, uint32_cuda *z1, uint32_cuda *z2, uint32_cuda *z3, uint32_cuda *z4, MatrixDim d) { KALDI_ERR << __func__ << " Not implemented!"; }$/;"	f	namespace:kaldi
cuda_randomize	cu-kernels.h	/^inline void cuda_randomize(dim3 Gr, dim3 Bl, double *y, const double *x, const int32_cuda *copy_from, MatrixDim d_out, MatrixDim d_in) { cudaD_randomize(Gr,Bl,y,x,copy_from,d_out,d_in); }$/;"	f	namespace:kaldi
cuda_randomize	cu-kernels.h	/^inline void cuda_randomize(dim3 Gr, dim3 Bl, float *y, const float *x, const int32_cuda *copy_from, MatrixDim d_out, MatrixDim d_in) { cudaF_randomize(Gr,Bl,y,x,copy_from,d_out,d_in); }$/;"	f	namespace:kaldi
cuda_regularize_l1	cu-kernels.h	/^inline void cuda_regularize_l1(dim3 Gr, dim3 Bl, double *wei, double *grad, double l1, double lr, MatrixDim d) { cudaD_regularize_l1(Gr,Bl,wei,grad,l1,lr,d); }$/;"	f	namespace:kaldi
cuda_regularize_l1	cu-kernels.h	/^inline void cuda_regularize_l1(dim3 Gr, dim3 Bl, float *wei, float *grad, float l1, float lr, MatrixDim d) { cudaF_regularize_l1(Gr,Bl,wei,grad,l1,lr,d); }$/;"	f	namespace:kaldi
cuda_replace_value	cu-kernels.h	/^inline void cuda_replace_value(int Gr, int Bl, double *v, int dim, double orig, double changed) {cudaD_replace_value(Gr, Bl, v, dim, orig, changed); }$/;"	f	namespace:kaldi
cuda_replace_value	cu-kernels.h	/^inline void cuda_replace_value(int Gr, int Bl, float *v, int dim, float orig, float changed) {cudaF_replace_value(Gr, Bl, v, dim, orig, changed); }$/;"	f	namespace:kaldi
cuda_scal	cu-kernels.h	/^inline void cuda_scal(int n, double alpha, double *x, int incx) {$/;"	f	namespace:kaldi
cuda_scal	cu-kernels.h	/^inline void cuda_scal(int n, float alpha, float *x, int incx) {$/;"	f	namespace:kaldi
cuda_scale	cu-kernels.h	/^inline void cuda_scale(dim3 Gr, dim3 Bl, double *mat, double value, MatrixDim d) { cudaD_scale(Gr,Bl,mat,value,d); }$/;"	f	namespace:kaldi
cuda_scale	cu-kernels.h	/^inline void cuda_scale(dim3 Gr, dim3 Bl, float *mat, float value, MatrixDim d) { cudaF_scale(Gr,Bl,mat,value,d); }$/;"	f	namespace:kaldi
cuda_scale_diag	cu-kernels.h	/^inline void cuda_scale_diag(int Gr, int Bl, double* mat, double value, int dim) { cudaD_scale_diag(Gr,Bl,mat,value,dim); }$/;"	f	namespace:kaldi
cuda_scale_diag	cu-kernels.h	/^inline void cuda_scale_diag(int Gr, int Bl, float* mat, float value, int dim) { cudaF_scale_diag(Gr,Bl,mat,value,dim); }$/;"	f	namespace:kaldi
cuda_set_bias_params	cu-kernels.h	/^inline void cuda_set_bias_params(int Gr, int Bl, double* v, const double* a, double param_1, double param_2, double param_3, int* flag, int dim) { cudaD_set_bias_params(Gr,Bl,v,a,param_1,param_2,param_3,flag,dim); }$/;"	f	namespace:kaldi
cuda_set_bias_params	cu-kernels.h	/^inline void cuda_set_bias_params(int Gr, int Bl, float* v, const float* a, float param_1, float param_2, float param_3, int* flag, int dim) { cudaF_set_bias_params(Gr,Bl,v,a,param_1,param_2,param_3,flag,dim); }$/;"	f	namespace:kaldi
cuda_set_const	cu-kernels.h	/^inline void cuda_set_const(dim3 Gr, dim3 Bl, double *mat, double value, MatrixDim d) { cudaD_set_const(Gr,Bl,mat,value,d); }$/;"	f	namespace:kaldi
cuda_set_const	cu-kernels.h	/^inline void cuda_set_const(dim3 Gr, dim3 Bl, float *mat, float value, MatrixDim d) { cudaF_set_const(Gr,Bl,mat,value,d); }$/;"	f	namespace:kaldi
cuda_set_diag	cu-kernels.h	/^inline void cuda_set_diag(int Gr, int Bl, double* mat, double value, MatrixDim d) { cudaD_set_diag(Gr,Bl,mat,value,d); }$/;"	f	namespace:kaldi
cuda_set_diag	cu-kernels.h	/^inline void cuda_set_diag(int Gr, int Bl, float* mat, float value, MatrixDim d) { cudaF_set_diag(Gr,Bl,mat,value,d); }$/;"	f	namespace:kaldi
cuda_set_diag_packed	cu-kernels.h	/^inline void cuda_set_diag_packed(int Gr, int Bl, double* mat, double value, int dim) { cudaD_set_diag_packed(Gr,Bl,mat,value,dim); }$/;"	f	namespace:kaldi
cuda_set_diag_packed	cu-kernels.h	/^inline void cuda_set_diag_packed(int Gr, int Bl, float* mat, float value, int dim) { cudaF_set_diag_packed(Gr,Bl,mat,value,dim); }$/;"	f	namespace:kaldi
cuda_set_zero_above_diag	cu-kernels.h	/^inline void cuda_set_zero_above_diag(dim3 Gr, dim3 Bl, double* mat, MatrixDim d) { cudaD_set_zero_above_diag(Gr,Bl,mat,d); }$/;"	f	namespace:kaldi
cuda_set_zero_above_diag	cu-kernels.h	/^inline void cuda_set_zero_above_diag(dim3 Gr, dim3 Bl, float* mat, MatrixDim d) { cudaF_set_zero_above_diag(Gr,Bl,mat,d); }$/;"	f	namespace:kaldi
cuda_sigmoid	cu-kernels.h	/^inline void cuda_sigmoid(dim3 Gr, dim3 Bl, double *y, const double *x, MatrixDim d, int src_stride) { cudaD_sigmoid(Gr,Bl,y,x,d,src_stride); }$/;"	f	namespace:kaldi
cuda_sigmoid	cu-kernels.h	/^inline void cuda_sigmoid(dim3 Gr, dim3 Bl, float *y, const float *x, MatrixDim d, int src_stride) { cudaF_sigmoid(Gr,Bl,y,x,d,src_stride); }$/;"	f	namespace:kaldi
cuda_soft_hinge	cu-kernels.h	/^inline void cuda_soft_hinge(dim3 Gr, dim3 Bl, double *y, const double *x, MatrixDim d, int src_stride) { cudaD_soft_hinge(Gr,Bl,y,x,d,src_stride); }$/;"	f	namespace:kaldi
cuda_soft_hinge	cu-kernels.h	/^inline void cuda_soft_hinge(dim3 Gr, dim3 Bl, float *y, const float *x, MatrixDim d, int src_stride) { cudaF_soft_hinge(Gr,Bl,y,x,d,src_stride); }$/;"	f	namespace:kaldi
cuda_softmax	cu-kernels.h	/^inline void cuda_softmax(size_t Gr, size_t Bl, double *y, const double *x, MatrixDim d) { cudaD_softmax(Gr,Bl,y,x,d); }$/;"	f	namespace:kaldi
cuda_softmax	cu-kernels.h	/^inline void cuda_softmax(size_t Gr, size_t Bl, float *y, const float *x, MatrixDim d) { cudaF_softmax(Gr,Bl,y,x,d); }$/;"	f	namespace:kaldi
cuda_softmax_part	cu-kernels.h	/^inline void cuda_softmax_part(dim3 Gr, dim3 Bl, const double *X, const int32_cuda *vec_ids, double* Y, MatrixDim d) { cudaD_softmax_part(Gr,Bl,X,vec_ids,Y,d); }$/;"	f	namespace:kaldi
cuda_softmax_part	cu-kernels.h	/^inline void cuda_softmax_part(dim3 Gr, dim3 Bl, const float *X, const int32_cuda *vec_ids, float* Y, MatrixDim d) { cudaF_softmax_part(Gr,Bl,X,vec_ids,Y,d); }$/;"	f	namespace:kaldi
cuda_softmax_reduce	cu-kernels.h	/^inline void cuda_softmax_reduce(size_t Gr, size_t Bl, double *y, const double *x, MatrixDim d, int src_stride) { cudaD_softmax_reduce(Gr,Bl,y,x,d,src_stride); }$/;"	f	namespace:kaldi
cuda_softmax_reduce	cu-kernels.h	/^inline void cuda_softmax_reduce(size_t Gr, size_t Bl, float *y, const float *x, MatrixDim d, int src_stride) { cudaF_softmax_reduce(Gr,Bl,y,x,d,src_stride); }$/;"	f	namespace:kaldi
cuda_splice	cu-kernels.h	/^inline void cuda_splice(dim3 Gr, dim3 Bl, double *y, const double *x, const int32_cuda *off, MatrixDim d_out, MatrixDim d_in) { cudaD_splice(Gr,Bl,y,x,off,d_out,d_in); }$/;"	f	namespace:kaldi
cuda_splice	cu-kernels.h	/^inline void cuda_splice(dim3 Gr, dim3 Bl, float *y, const float *x, const int32_cuda *off, MatrixDim d_out, MatrixDim d_in) { cudaF_splice(Gr,Bl,y,x,off,d_out,d_in); }$/;"	f	namespace:kaldi
cuda_strip_update	cu-choleskykernels.h	/^template<> inline void cuda_strip_update<double>(double* A, int block_offset, int n_remaining_blocks, MatrixDim d) { cudaD_strip_update(A,block_offset,n_remaining_blocks,d); }$/;"	f	namespace:kaldi
cuda_strip_update	cu-choleskykernels.h	/^template<> inline void cuda_strip_update<float>(float* A, int block_offset, int n_remaining_blocks, MatrixDim d) { cudaF_strip_update(A,block_offset,n_remaining_blocks,d); }$/;"	f	namespace:kaldi
cuda_strip_update	cu-choleskykernels.h	/^template<typename Real> inline void cuda_strip_update(Real* A, int block_offset, int n_remaining_blocks, MatrixDim d) { KALDI_ERR << __func__ << " Not implemented!"; }$/;"	f	namespace:kaldi
cuda_sum_column_ranges	cu-kernels.h	/^inline void cuda_sum_column_ranges(dim3 Gr, dim3 Bl, double *data, MatrixDim dim,$/;"	f	namespace:kaldi
cuda_sum_column_ranges	cu-kernels.h	/^inline void cuda_sum_column_ranges(dim3 Gr, dim3 Bl, float *data, MatrixDim dim,$/;"	f	namespace:kaldi
cuda_sy_add_tr2	cu-kernels.h	/^inline void cuda_sy_add_tr2(dim3 Gr, dim3 Bl, double alpha, double beta, const double* T, MatrixDim tdim,$/;"	f	namespace:kaldi
cuda_sy_add_tr2	cu-kernels.h	/^inline void cuda_sy_add_tr2(dim3 Gr, dim3 Bl, float alpha, float beta, const float* T, MatrixDim tdim,$/;"	f	namespace:kaldi
cuda_take_lower	cu-kernels.h	/^inline void cuda_take_lower(dim3 Gr, dim3 Bl, const double* x, double* y, MatrixDim d_in) { cudaD_take_lower(Gr,Bl,x,y,d_in); }$/;"	f	namespace:kaldi
cuda_take_lower	cu-kernels.h	/^inline void cuda_take_lower(dim3 Gr, dim3 Bl, const float* x, float* y, MatrixDim d_in) { cudaF_take_lower(Gr,Bl,x,y,d_in); }$/;"	f	namespace:kaldi
cuda_take_mean	cu-kernels.h	/^inline void cuda_take_mean(dim3 Gr, dim3 Bl, const double* x, double* y, MatrixDim d_in) { cudaD_take_mean(Gr,Bl,x,y,d_in); }$/;"	f	namespace:kaldi
cuda_take_mean	cu-kernels.h	/^inline void cuda_take_mean(dim3 Gr, dim3 Bl, const float* x, float* y, MatrixDim d_in) { cudaF_take_mean(Gr,Bl,x,y,d_in); }$/;"	f	namespace:kaldi
cuda_take_upper	cu-kernels.h	/^inline void cuda_take_upper(dim3 Gr, dim3 Bl, const double* x, double* y, MatrixDim d_in) { cudaD_take_upper(Gr,Bl,x,y,d_in); }$/;"	f	namespace:kaldi
cuda_take_upper	cu-kernels.h	/^inline void cuda_take_upper(dim3 Gr, dim3 Bl, const float* x, float* y, MatrixDim d_in) { cudaF_take_upper(Gr,Bl,x,y,d_in); }$/;"	f	namespace:kaldi
cuda_tanh	cu-kernels.h	/^inline void cuda_tanh(dim3 Gr, dim3 Bl, double *y, const double *x, MatrixDim d, int src_stride) { cudaD_tanh(Gr,Bl,y,x,d,src_stride); }$/;"	f	namespace:kaldi
cuda_tanh	cu-kernels.h	/^inline void cuda_tanh(dim3 Gr, dim3 Bl, float *y, const float *x, MatrixDim d, int src_stride) { cudaF_tanh(Gr,Bl,y,x,d,src_stride); }$/;"	f	namespace:kaldi
cuda_trace	cu-kernels.h	/^inline void cuda_trace(int Gr, int Bl, double* mat, double* value, int dim) { cudaD_trace(Gr,Bl,mat,value,dim); }$/;"	f	namespace:kaldi
cuda_trace	cu-kernels.h	/^inline void cuda_trace(int Gr, int Bl, float* mat, float* value, int dim) { cudaF_trace(Gr,Bl,mat,value,dim); }$/;"	f	namespace:kaldi
cuda_trace_mat_mat	cu-kernels.h	/^inline void cuda_trace_mat_mat(const double* A, const double* B, MatrixDim dA, int B_stride, double* value) { cudaD_trace_mat_mat(A,B,dA,B_stride,value); }$/;"	f	namespace:kaldi
cuda_trace_mat_mat	cu-kernels.h	/^inline void cuda_trace_mat_mat(const float* A, const float* B, MatrixDim dA, int B_stride, float* value) { cudaF_trace_mat_mat(A,B,dA,B_stride,value); }$/;"	f	namespace:kaldi
cuda_trace_mat_mat_trans	cu-kernels.h	/^inline void cuda_trace_mat_mat_trans(const double* A, const double* B, MatrixDim dA, int B_stride, double* value) { cudaD_trace_mat_mat_trans(A,B,dA,B_stride,value); }$/;"	f	namespace:kaldi
cuda_trace_mat_mat_trans	cu-kernels.h	/^inline void cuda_trace_mat_mat_trans(const float* A, const float* B, MatrixDim dA, int B_stride, float* value) { cudaF_trace_mat_mat_trans(A,B,dA,B_stride,value); }$/;"	f	namespace:kaldi
cuda_transpose_matrix	cu-kernels.h	/^inline void cuda_transpose_matrix(dim3 Gr, dim3 Bl, double *mat, MatrixDim d) { cudaD_transpose_matrix(Gr, Bl, mat, d); }$/;"	f	namespace:kaldi
cuda_transpose_matrix	cu-kernels.h	/^inline void cuda_transpose_matrix(dim3 Gr, dim3 Bl, float* mat, MatrixDim d) { cudaF_transpose_matrix(Gr, Bl, mat, d); }$/;"	f	namespace:kaldi
cuda_vec_apply_exp	cu-kernels.h	/^inline void cuda_vec_apply_exp(int Gr, int Bl, double* v, int dim) { cudaD_vec_apply_exp(Gr,Bl,v,dim); }$/;"	f	namespace:kaldi
cuda_vec_apply_exp	cu-kernels.h	/^inline void cuda_vec_apply_exp(int Gr, int Bl, float* v, int dim) { cudaF_vec_apply_exp(Gr,Bl,v,dim); }$/;"	f	namespace:kaldi
cuda_vec_apply_floor	cu-kernels.h	/^inline void cuda_vec_apply_floor(int Gr, int Bl, double* v, double floor_val, float* num, int dim) { cudaD_vec_apply_floor(Gr,Bl,v,floor_val,num,dim); }$/;"	f	namespace:kaldi
cuda_vec_apply_floor	cu-kernels.h	/^inline void cuda_vec_apply_floor(int Gr, int Bl, float* v, float floor_val, float* num, int dim) { cudaF_vec_apply_floor(Gr,Bl,v,floor_val,num,dim); }$/;"	f	namespace:kaldi
cuda_vec_apply_log	cu-kernels.h	/^inline void cuda_vec_apply_log(int Gr, int Bl, double* v, double* flag, int dim) { cudaD_vec_apply_log(Gr,Bl,v,flag,dim); }$/;"	f	namespace:kaldi
cuda_vec_apply_log	cu-kernels.h	/^inline void cuda_vec_apply_log(int Gr, int Bl, float* v, float* flag, int dim) { cudaF_vec_apply_log(Gr,Bl,v,flag,dim); }$/;"	f	namespace:kaldi
cuda_vec_copy_diag_from_packed	cu-kernels.h	/^inline void cuda_vec_copy_diag_from_packed(int Gr, int Bl, double *dst, const double *src, int dim) { cudaD_vec_copy_diag_from_packed(Gr,Bl,dst,src,dim); }$/;"	f	namespace:kaldi
cuda_vec_copy_diag_from_packed	cu-kernels.h	/^inline void cuda_vec_copy_diag_from_packed(int Gr, int Bl, float *dst, const float *src, int dim) { cudaF_vec_copy_diag_from_packed(Gr,Bl,dst,src,dim); }$/;"	f	namespace:kaldi
cuda_vec_gauss_rand	cu-randkernels.h	/^template<> inline void cuda_vec_gauss_rand<double>(int Gr, int Bl, double *v, uint32_cuda *z1, uint32_cuda *z2, uint32_cuda *z3, uint32_cuda *z4, int dim) { cudaD_vec_gauss_rand(Gr,Bl,v,z1,z2,z3,z4,dim); } $/;"	f	namespace:kaldi
cuda_vec_gauss_rand	cu-randkernels.h	/^template<> inline void cuda_vec_gauss_rand<float>(int Gr, int Bl, float *v, uint32_cuda *z1, uint32_cuda *z2, uint32_cuda *z3, uint32_cuda *z4, int dim) { cudaF_vec_gauss_rand(Gr,Bl,v,z1,z2,z3,z4,dim); } $/;"	f	namespace:kaldi
cuda_vec_gauss_rand	cu-randkernels.h	/^template<typename Real> inline void cuda_vec_gauss_rand(int Gr, int Bl, Real *v, uint32_cuda *z1, uint32_cuda *z2, uint32_cuda *z3, uint32_cuda *z4, int dim) { KALDI_ERR << __func__ << " Not implemented!"; }$/;"	f	namespace:kaldi
cuda_vec_max	cu-kernels.h	/^inline void cuda_vec_max(const double* v, double* value, int dim) { cudaD_vec_max(v,value,dim); }$/;"	f	namespace:kaldi
cuda_vec_max	cu-kernels.h	/^inline void cuda_vec_max(const float* v, float* value, int dim) { cudaF_vec_max(v,value,dim); }$/;"	f	namespace:kaldi
cuda_vec_min	cu-kernels.h	/^inline void cuda_vec_min(const double* v, double* value, int dim) { cudaD_vec_min(v,value,dim); }$/;"	f	namespace:kaldi
cuda_vec_min	cu-kernels.h	/^inline void cuda_vec_min(const float* v, float* value, int dim) { cudaF_vec_min(v,value,dim); }$/;"	f	namespace:kaldi
cuda_vec_mul_elements	cu-kernels.h	/^inline void cuda_vec_mul_elements(int Gr, int Bl, double* v, const double* a, int dim) { cudaD_vec_mul_elements(Gr,Bl,v,a,dim); }$/;"	f	namespace:kaldi
cuda_vec_mul_elements	cu-kernels.h	/^inline void cuda_vec_mul_elements(int Gr, int Bl, float* v, const float* a, int dim) { cudaF_vec_mul_elements(Gr,Bl,v,a,dim); }$/;"	f	namespace:kaldi
cuda_vec_soft_max	cu-kernels.h	/^inline void cuda_vec_soft_max(int Gr, int Bl, double* v, int dim) { cudaD_vec_soft_max(Gr,Bl,v,dim); }$/;"	f	namespace:kaldi
cuda_vec_soft_max	cu-kernels.h	/^inline void cuda_vec_soft_max(int Gr, int Bl, float* v, int dim) { cudaF_vec_soft_max(Gr,Bl,v,dim); }$/;"	f	namespace:kaldi
cuda_vec_sum	cu-kernels.h	/^inline void cuda_vec_sum(int Gr, int Bl, double* v, double* value, int dim, int inc) { cudaD_vec_sum(Gr,Bl,v,value,dim,inc); }$/;"	f	namespace:kaldi
cuda_vec_sum	cu-kernels.h	/^inline void cuda_vec_sum(int Gr, int Bl, float* v, float* value, int dim, int inc) { cudaF_vec_sum(Gr,Bl,v,value,dim,inc); }$/;"	f	namespace:kaldi
currently_used	cu-device.cc	/^    size_t currently_used; \/\/ number that are "in the wild".. kept for$/;"	m	struct:kaldi::CuAllocator::MemInfoForSize	file:
data_	cu-array.h	/^  T *data_;  \/\/\/< GPU data pointer (if GPU not available,$/;"	m	class:kaldi::CuArray
data_	cu-block-matrix.h	/^  CuMatrix<Real> data_; \/\/ This is a single matrix into which$/;"	m	class:kaldi::CuBlockMatrix
data_	cu-matrix.h	/^  Real *data_;       \/\/\/< GPU data pointer (or regular matrix data pointer,$/;"	m	class:kaldi::CuMatrixBase
data_	cu-packed-matrix.h	/^  Real *data_;$/;"	m	class:kaldi::CuPackedMatrix
data_	cu-value.h	/^  Real *data_;$/;"	m	class:kaldi::CuValue
data_	cu-vector.h	/^  Real *data_; \/\/\/< GPU data pointer (or regular data pointer$/;"	m	class:kaldi::CuVectorBase
device_	cu-device.cc	/^  CuDevice *device_; \/\/ device this is attached to...$/;"	m	class:kaldi::CuAllocator	file:
dim_	cu-array.h	/^  MatrixIndexT dim_;     \/\/\/< dimension of the vector$/;"	m	class:kaldi::CuArray
dim_	cu-vector.h	/^  MatrixIndexT dim_; \/\/\/< dimension of the vector$/;"	m	class:kaldi::CuVectorBase
first	cu-matrixdim.h	/^    int32_cuda first;$/;"	m	struct:Int32Pair
free_memory_at_startup_	cu-device.h	/^  int64 free_memory_at_startup_;$/;"	m	class:kaldi::CuDevice
freed	cu-device.cc	/^    std::vector<void*> freed; \/\/ freed and cached...$/;"	m	struct:kaldi::CuAllocator::MemInfoForSize	file:
global_device_	cu-device.cc	/^CuDevice CuDevice::global_device_;$/;"	m	class:kaldi::CuDevice	file:
global_device_	cu-device.h	/^  static CuDevice global_device_;$/;"	m	class:kaldi::CuDevice
int32_cuda	cu-matrixdim.h	/^  typedef __int32          int32_cuda;$/;"	t
int32_cuda	cu-matrixdim.h	/^  typedef int32_t          int32_cuda;$/;"	t
kaldi	cu-array-inl.h	/^namespace kaldi {$/;"	n
kaldi	cu-array-test.cc	/^namespace kaldi {$/;"	n	file:
kaldi	cu-array.h	/^namespace kaldi {$/;"	n
kaldi	cu-block-matrix-test.cc	/^namespace kaldi {$/;"	n	file:
kaldi	cu-block-matrix.cc	/^namespace kaldi {$/;"	n	file:
kaldi	cu-block-matrix.h	/^namespace kaldi {$/;"	n
kaldi	cu-choleskykernels.h	/^namespace kaldi {$/;"	n
kaldi	cu-common.cc	/^namespace kaldi {$/;"	n	file:
kaldi	cu-common.h	/^namespace kaldi {$/;"	n
kaldi	cu-device.cc	/^namespace kaldi {$/;"	n	file:
kaldi	cu-device.h	/^namespace kaldi {$/;"	n
kaldi	cu-kernels.h	/^namespace kaldi {$/;"	n
kaldi	cu-math-test.cc	/^namespace kaldi {$/;"	n	file:
kaldi	cu-math.cc	/^namespace kaldi {$/;"	n	file:
kaldi	cu-math.h	/^namespace kaldi {$/;"	n
kaldi	cu-matrix-inl.h	/^namespace kaldi {$/;"	n
kaldi	cu-matrix-speed-test.cc	/^namespace kaldi {$/;"	n	file:
kaldi	cu-matrix-test.cc	/^namespace kaldi {$/;"	n	file:
kaldi	cu-matrix.cc	/^namespace kaldi {$/;"	n	file:
kaldi	cu-matrix.h	/^namespace kaldi {$/;"	n
kaldi	cu-packed-matrix-test.cc	/^namespace kaldi {$/;"	n	file:
kaldi	cu-packed-matrix.cc	/^namespace kaldi {$/;"	n	file:
kaldi	cu-packed-matrix.h	/^namespace kaldi {$/;"	n
kaldi	cu-rand.cc	/^namespace kaldi {$/;"	n	file:
kaldi	cu-rand.h	/^namespace kaldi {$/;"	n
kaldi	cu-randkernels.h	/^namespace kaldi {$/;"	n
kaldi	cu-sp-matrix-speed-test.cc	/^namespace kaldi {$/;"	n	file:
kaldi	cu-sp-matrix-test.cc	/^namespace kaldi {$/;"	n	file:
kaldi	cu-sp-matrix.cc	/^namespace kaldi {$/;"	n	file:
kaldi	cu-sp-matrix.h	/^namespace kaldi {$/;"	n
kaldi	cu-test.cc	/^namespace kaldi {$/;"	n	file:
kaldi	cu-tp-matrix-test.cc	/^namespace kaldi {$/;"	n	file:
kaldi	cu-tp-matrix.cc	/^namespace kaldi {$/;"	n	file:
kaldi	cu-tp-matrix.h	/^namespace kaldi {$/;"	n
kaldi	cu-value.h	/^namespace kaldi {$/;"	n
kaldi	cu-vector-speed-test.cc	/^namespace kaldi {$/;"	n	file:
kaldi	cu-vector-test.cc	/^namespace kaldi {$/;"	n	file:
kaldi	cu-vector.cc	/^namespace kaldi {$/;"	n	file:
kaldi	cu-vector.h	/^namespace kaldi {$/;"	n
kaldi	cublas-wrappers.h	/^namespace kaldi {$/;"	n
kaldi::ApproxEqual	cu-block-matrix-test.cc	/^static bool ApproxEqual(const CuBlockMatrix<Real> &A,$/;"	f	namespace:kaldi
kaldi::ApproxEqual	cu-matrix.h	/^bool ApproxEqual(const CuMatrixBase<Real> &A,$/;"	f	namespace:kaldi
kaldi::ApproxEqual	cu-packed-matrix-test.cc	/^static bool ApproxEqual(const PackedMatrix<Real> &A,$/;"	f	namespace:kaldi
kaldi::ApproxEqual	cu-sp-matrix.h	/^inline bool ApproxEqual(const CuSpMatrix<Real> &A,$/;"	f	namespace:kaldi
kaldi::ApproxEqual	cu-vector.h	/^bool ApproxEqual(const CuVectorBase<Real> &a,$/;"	f	namespace:kaldi
kaldi::AssertDiagEqual	cu-packed-matrix-test.cc	/^static void AssertDiagEqual(const PackedMatrix<Real> &A,$/;"	f	namespace:kaldi
kaldi::AssertEqual	cu-array-test.cc	/^void AssertEqual(const std::vector<T> &vec1,$/;"	f	namespace:kaldi
kaldi::AssertEqual	cu-block-matrix-test.cc	/^static void AssertEqual(const CuBlockMatrix<Real> &A,$/;"	f	namespace:kaldi
kaldi::AssertEqual	cu-block-matrix-test.cc	/^static void AssertEqual(const CuMatrixBase<Real> &A,$/;"	f	namespace:kaldi
kaldi::AssertEqual	cu-block-matrix-test.cc	/^static void AssertEqual(const MatrixBase<Real> &A,$/;"	f	namespace:kaldi
kaldi::AssertEqual	cu-matrix-test.cc	/^static void AssertEqual(std::vector<Real> &A, std::vector<Real> &B) {$/;"	f	namespace:kaldi
kaldi::AssertEqual	cu-matrix.h	/^inline void AssertEqual(CuMatrixBase<Real> &A, CuMatrixBase<Real> &B,$/;"	f	namespace:kaldi
kaldi::AssertEqual	cu-packed-matrix-test.cc	/^static void AssertEqual(const CuPackedMatrix<Real> &A,$/;"	f	namespace:kaldi
kaldi::AssertEqual	cu-packed-matrix-test.cc	/^static void AssertEqual(const PackedMatrix<Real> &A,$/;"	f	namespace:kaldi
kaldi::AssertEqual	cu-sp-matrix.h	/^inline void AssertEqual(const CuSpMatrix<Real> &A,$/;"	f	namespace:kaldi
kaldi::AssertEqual	cu-tp-matrix-test.cc	/^static void AssertEqual(const CuPackedMatrix<Real> &A,$/;"	f	namespace:kaldi
kaldi::AssertEqual	cu-tp-matrix-test.cc	/^static void AssertEqual(const PackedMatrix<Real> &A,$/;"	f	namespace:kaldi
kaldi::AssertEqual	cu-vector.h	/^inline void AssertEqual(CuVectorBase<Real> &a, CuVectorBase<Real> &b,$/;"	f	namespace:kaldi
kaldi::CuAllocator	cu-device.cc	/^class CuAllocator {$/;"	c	namespace:kaldi	file:
kaldi::CuAllocator::Cleanup	cu-device.cc	/^void CuAllocator::Cleanup() {$/;"	f	class:kaldi::CuAllocator
kaldi::CuAllocator::CuAllocator	cu-device.cc	/^  CuAllocator(const CuAllocatorOptions &opts, CuDevice *device):$/;"	f	class:kaldi::CuAllocator
kaldi::CuAllocator::DisableCaching	cu-device.cc	/^inline void CuAllocator::DisableCaching() {$/;"	f	class:kaldi::CuAllocator
kaldi::CuAllocator::FindMemInfo	cu-device.cc	/^  inline MemInfoForSize *FindMemInfo(size_t row_bytes,$/;"	f	class:kaldi::CuAllocator	file:
kaldi::CuAllocator::Free	cu-device.cc	/^void CuAllocator::Free(void *addr) {$/;"	f	class:kaldi::CuAllocator
kaldi::CuAllocator::Malloc	cu-device.cc	/^void* CuAllocator::Malloc(size_t size) {$/;"	f	class:kaldi::CuAllocator
kaldi::CuAllocator::MallocInternal	cu-device.cc	/^void* CuAllocator::MallocInternal(size_t row_bytes,$/;"	f	class:kaldi::CuAllocator
kaldi::CuAllocator::MallocPitch	cu-device.cc	/^void* CuAllocator::MallocPitch(size_t num_rows, size_t row_bytes,$/;"	f	class:kaldi::CuAllocator
kaldi::CuAllocator::MemInfoForSize	cu-device.cc	/^  struct MemInfoForSize {$/;"	s	class:kaldi::CuAllocator	file:
kaldi::CuAllocator::MemInfoForSize::MemInfoForSize	cu-device.cc	/^    MemInfoForSize(size_t row_bytes,$/;"	f	struct:kaldi::CuAllocator::MemInfoForSize
kaldi::CuAllocator::MemInfoForSize::countdown	cu-device.cc	/^    size_t countdown; \/\/ number that have been freed and not cached.$/;"	m	struct:kaldi::CuAllocator::MemInfoForSize	file:
kaldi::CuAllocator::MemInfoForSize::currently_used	cu-device.cc	/^    size_t currently_used; \/\/ number that are "in the wild".. kept for$/;"	m	struct:kaldi::CuAllocator::MemInfoForSize	file:
kaldi::CuAllocator::MemInfoForSize::freed	cu-device.cc	/^    std::vector<void*> freed; \/\/ freed and cached...$/;"	m	struct:kaldi::CuAllocator::MemInfoForSize	file:
kaldi::CuAllocator::MemInfoForSize::num_rows	cu-device.cc	/^    size_t num_rows; \/\/ or the number of rows, if it's a regular CudaMalloc$/;"	m	struct:kaldi::CuAllocator::MemInfoForSize	file:
kaldi::CuAllocator::MemInfoForSize::pitch	cu-device.cc	/^    size_t pitch; \/\/ If CudaMallocPitch, the pitch returned by CudaMallocPitch;$/;"	m	struct:kaldi::CuAllocator::MemInfoForSize	file:
kaldi::CuAllocator::MemInfoForSize::row_bytes	cu-device.cc	/^    size_t row_bytes; \/\/ or zero, if a regular CudaMalloc, not$/;"	m	struct:kaldi::CuAllocator::MemInfoForSize	file:
kaldi::CuAllocator::PossiblyCleanup	cu-device.cc	/^void CuAllocator::PossiblyCleanup(size_t num_bytes) {$/;"	f	class:kaldi::CuAllocator
kaldi::CuAllocator::ReleaseAllCachedMemory	cu-device.cc	/^void CuAllocator::ReleaseAllCachedMemory(bool destroy) {$/;"	f	class:kaldi::CuAllocator
kaldi::CuAllocator::addr_to_list_	cu-device.cc	/^  unordered_map<void*, MemInfoForSize*> addr_to_list_;$/;"	m	class:kaldi::CuAllocator	file:
kaldi::CuAllocator::cleanup_countdown_bytes_	cu-device.cc	/^  int32 cleanup_countdown_bytes_; \/\/ countdown in bytes, until the next time we check$/;"	m	class:kaldi::CuAllocator	file:
kaldi::CuAllocator::device_	cu-device.cc	/^  CuDevice *device_; \/\/ device this is attached to...$/;"	m	class:kaldi::CuAllocator	file:
kaldi::CuAllocator::opts_	cu-device.cc	/^  CuAllocatorOptions opts_;$/;"	m	class:kaldi::CuAllocator	file:
kaldi::CuAllocator::size_to_list_	cu-device.cc	/^  std::vector<std::map<size_t, MemInfoForSize*>* > size_to_list_;$/;"	m	class:kaldi::CuAllocator	file:
kaldi::CuAllocator::~CuAllocator	cu-device.cc	/^CuAllocator::~CuAllocator() {$/;"	f	class:kaldi::CuAllocator
kaldi::CuAllocatorOptions	cu-device.cc	/^struct CuAllocatorOptions {$/;"	s	namespace:kaldi	file:
kaldi::CuAllocatorOptions::CuAllocatorOptions	cu-device.cc	/^  CuAllocatorOptions()$/;"	f	struct:kaldi::CuAllocatorOptions
kaldi::CuAllocatorOptions::cache_memory	cu-device.cc	/^  bool cache_memory; \/\/ Enable GPU memory caching, (false = disable).$/;"	m	struct:kaldi::CuAllocatorOptions	file:
kaldi::CuAllocatorOptions::cleanup_interval_bytes	cu-device.cc	/^  int32 cleanup_interval_bytes;$/;"	m	struct:kaldi::CuAllocatorOptions	file:
kaldi::CuAllocatorOptions::count	cu-device.cc	/^  int32 count; \/\/ Number of times we free and delete a particular size before we$/;"	m	struct:kaldi::CuAllocatorOptions	file:
kaldi::CuArray	cu-array.h	/^class CuArray {$/;"	c	namespace:kaldi
kaldi::CuArray::CopyFromArray	cu-array-inl.h	/^void CuArray<T>::CopyFromArray(const CuArray<T> &src) {$/;"	f	class:kaldi::CuArray
kaldi::CuArray::CopyFromVec	cu-array-inl.h	/^void CuArray<T>::CopyFromVec(const std::vector<T> &src) {$/;"	f	class:kaldi::CuArray
kaldi::CuArray::CopyToVec	cu-array-inl.h	/^void CuArray<T>::CopyToVec(std::vector<T> *dst) const {$/;"	f	class:kaldi::CuArray
kaldi::CuArray::CuArray	cu-array.h	/^  CuArray<T>() : dim_(0), data_(NULL) {  }$/;"	f	class:kaldi::CuArray
kaldi::CuArray::CuArray	cu-array.h	/^  explicit CuArray<T>(MatrixIndexT dim, MatrixResizeType resize_type = kSetZero):$/;"	f	class:kaldi::CuArray
kaldi::CuArray::CuArray	cu-array.h	/^  explicit CuArray<T>(const CuArray<T> &src):$/;"	f	class:kaldi::CuArray
kaldi::CuArray::CuArray	cu-array.h	/^  explicit CuArray<T>(const std::vector<T> &src):$/;"	f	class:kaldi::CuArray
kaldi::CuArray::Data	cu-array.h	/^  T* Data() { return data_; }$/;"	f	class:kaldi::CuArray
kaldi::CuArray::Data	cu-array.h	/^  const T* Data() const { return data_; }$/;"	f	class:kaldi::CuArray
kaldi::CuArray::Destroy	cu-array-inl.h	/^void CuArray<T>::Destroy() {$/;"	f	class:kaldi::CuArray
kaldi::CuArray::Dim	cu-array.h	/^  MatrixIndexT Dim() const { return dim_;  }$/;"	f	class:kaldi::CuArray
kaldi::CuArray::Resize	cu-array-inl.h	/^void CuArray<T>::Resize(MatrixIndexT dim, MatrixResizeType resize_type) {$/;"	f	class:kaldi::CuArray
kaldi::CuArray::Set	cu-array-inl.h	/^inline void CuArray<T>::Set(const T &value) {$/;"	f	class:kaldi::CuArray
kaldi::CuArray::Set	cu-array-inl.h	/^inline void CuArray<int32>::Set(const int32 &value) {$/;"	f	class:kaldi::CuArray
kaldi::CuArray::SetZero	cu-array-inl.h	/^void CuArray<T>::SetZero() {$/;"	f	class:kaldi::CuArray
kaldi::CuArray::ThisType	cu-array.h	/^  typedef CuArray<T> ThisType;$/;"	t	class:kaldi::CuArray
kaldi::CuArray::data_	cu-array.h	/^  T *data_;  \/\/\/< GPU data pointer (if GPU not available,$/;"	m	class:kaldi::CuArray
kaldi::CuArray::dim_	cu-array.h	/^  MatrixIndexT dim_;     \/\/\/< dimension of the vector$/;"	m	class:kaldi::CuArray
kaldi::CuArray::operator =	cu-array.h	/^  CuArray<T> &operator= (const CuArray<T> &in) {$/;"	f	class:kaldi::CuArray
kaldi::CuArray::operator =	cu-array.h	/^  CuArray<T> &operator= (const std::vector<T> &in) {$/;"	f	class:kaldi::CuArray
kaldi::CuArray::~CuArray	cu-array.h	/^  ~CuArray() { Destroy(); }$/;"	f	class:kaldi::CuArray
kaldi::CuBlockMatrix	cu-block-matrix.h	/^class CuBlockMatrix {$/;"	c	namespace:kaldi
kaldi::CuBlockMatrix::AddMatMat	cu-block-matrix.cc	/^void CuBlockMatrix<Real>::AddMatMat($/;"	f	class:kaldi::CuBlockMatrix
kaldi::CuBlockMatrix::Block	cu-block-matrix.cc	/^CuSubMatrix<Real> CuBlockMatrix<Real>::Block(int32 b) {$/;"	f	class:kaldi::CuBlockMatrix
kaldi::CuBlockMatrix::Block	cu-block-matrix.cc	/^const CuSubMatrix<Real> CuBlockMatrix<Real>::Block(int32 b) const {$/;"	f	class:kaldi::CuBlockMatrix
kaldi::CuBlockMatrix::BlockMatrixData	cu-block-matrix.h	/^  struct BlockMatrixData{$/;"	s	class:kaldi::CuBlockMatrix
kaldi::CuBlockMatrix::BlockMatrixData::col_offset	cu-block-matrix.h	/^    MatrixIndexT col_offset;$/;"	m	struct:kaldi::CuBlockMatrix::BlockMatrixData
kaldi::CuBlockMatrix::BlockMatrixData::num_cols	cu-block-matrix.h	/^    MatrixIndexT num_cols;$/;"	m	struct:kaldi::CuBlockMatrix::BlockMatrixData
kaldi::CuBlockMatrix::BlockMatrixData::num_rows	cu-block-matrix.h	/^    MatrixIndexT num_rows;$/;"	m	struct:kaldi::CuBlockMatrix::BlockMatrixData
kaldi::CuBlockMatrix::BlockMatrixData::row_offset	cu-block-matrix.h	/^    MatrixIndexT row_offset;$/;"	m	struct:kaldi::CuBlockMatrix::BlockMatrixData
kaldi::CuBlockMatrix::CopyFromMat	cu-block-matrix.cc	/^void CuBlockMatrix<Real>::CopyFromMat(const CuMatrix<Real> &M) {$/;"	f	class:kaldi::CuBlockMatrix
kaldi::CuBlockMatrix::CuBlockMatrix	cu-block-matrix.cc	/^CuBlockMatrix<Real>::CuBlockMatrix() {$/;"	f	class:kaldi::CuBlockMatrix
kaldi::CuBlockMatrix::CuBlockMatrix	cu-block-matrix.cc	/^CuBlockMatrix<Real>::CuBlockMatrix(const CuBlockMatrix<Real> &other):$/;"	f	class:kaldi::CuBlockMatrix
kaldi::CuBlockMatrix::CuBlockMatrix	cu-block-matrix.cc	/^CuBlockMatrix<Real>::CuBlockMatrix(const std::vector<CuMatrix<Real> >&data) {$/;"	f	class:kaldi::CuBlockMatrix
kaldi::CuBlockMatrix::CuData	cu-block-matrix.h	/^  const CuBlockMatrixData* CuData() const { return cu_data_; }$/;"	f	class:kaldi::CuBlockMatrix
kaldi::CuBlockMatrix::Destroy	cu-block-matrix.cc	/^void CuBlockMatrix<Real>::Destroy() {$/;"	f	class:kaldi::CuBlockMatrix
kaldi::CuBlockMatrix::FreeCudaData	cu-block-matrix.cc	/^void CuBlockMatrix<Real>::FreeCudaData() {$/;"	f	class:kaldi::CuBlockMatrix
kaldi::CuBlockMatrix::MaxBlockCols	cu-block-matrix.cc	/^MatrixIndexT CuBlockMatrix<Real>::MaxBlockCols() const {$/;"	f	class:kaldi::CuBlockMatrix
kaldi::CuBlockMatrix::MaxBlockRows	cu-block-matrix.cc	/^MatrixIndexT CuBlockMatrix<Real>::MaxBlockRows() const {$/;"	f	class:kaldi::CuBlockMatrix
kaldi::CuBlockMatrix::NumBlocks	cu-block-matrix.h	/^  MatrixIndexT NumBlocks() const { return block_data_.size(); }$/;"	f	class:kaldi::CuBlockMatrix
kaldi::CuBlockMatrix::NumCols	cu-block-matrix.h	/^  MatrixIndexT NumCols() const { return data_.num_cols_; }$/;"	f	class:kaldi::CuBlockMatrix
kaldi::CuBlockMatrix::NumRows	cu-block-matrix.h	/^  MatrixIndexT NumRows() const { return num_rows_; }$/;"	f	class:kaldi::CuBlockMatrix
kaldi::CuBlockMatrix::Read	cu-block-matrix.cc	/^void CuBlockMatrix<Real>::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::CuBlockMatrix
kaldi::CuBlockMatrix::SetCudaData	cu-block-matrix.cc	/^void CuBlockMatrix<Real>::SetCudaData() {$/;"	f	class:kaldi::CuBlockMatrix
kaldi::CuBlockMatrix::Swap	cu-block-matrix.cc	/^void CuBlockMatrix<Real>::Swap(CuBlockMatrix<Real> *other) {$/;"	f	class:kaldi::CuBlockMatrix
kaldi::CuBlockMatrix::Write	cu-block-matrix.cc	/^void CuBlockMatrix<Real>::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::CuBlockMatrix
kaldi::CuBlockMatrix::block_data_	cu-block-matrix.h	/^  std::vector<BlockMatrixData> block_data_;$/;"	m	class:kaldi::CuBlockMatrix
kaldi::CuBlockMatrix::cu_data_	cu-block-matrix.h	/^  CuBlockMatrixData *cu_data_; \/\/ We store the pointers and some additional info$/;"	m	class:kaldi::CuBlockMatrix
kaldi::CuBlockMatrix::data_	cu-block-matrix.h	/^  CuMatrix<Real> data_; \/\/ This is a single matrix into which$/;"	m	class:kaldi::CuBlockMatrix
kaldi::CuBlockMatrix::num_rows_	cu-block-matrix.h	/^  MatrixIndexT num_rows_; \/\/ sum of num_rows of elements of block_data_.$/;"	m	class:kaldi::CuBlockMatrix
kaldi::CuBlockMatrix::operator =	cu-block-matrix.cc	/^CuBlockMatrix<Real> &CuBlockMatrix<Real>::operator =(const CuBlockMatrix<Real> &other) {$/;"	f	class:kaldi::CuBlockMatrix
kaldi::CuBlockMatrix::~CuBlockMatrix	cu-block-matrix.h	/^  ~CuBlockMatrix() { Destroy(); }$/;"	f	class:kaldi::CuBlockMatrix
kaldi::CuBlockMatrixUnitTest	cu-block-matrix-test.cc	/^template<typename Real> void CuBlockMatrixUnitTest() {$/;"	f	namespace:kaldi
kaldi::CuDevice	cu-device.h	/^class CuDevice {$/;"	c	namespace:kaldi
kaldi::CuDevice::AccuProfile	cu-device.cc	/^void CuDevice::AccuProfile(const std::string &key, double time) { $/;"	f	class:kaldi::CuDevice
kaldi::CuDevice::ActiveGpuId	cu-device.h	/^  int32 ActiveGpuId() {$/;"	f	class:kaldi::CuDevice
kaldi::CuDevice::CuDevice	cu-device.cc	/^CuDevice::CuDevice(): active_gpu_id_(-1), verbose_(true),$/;"	f	class:kaldi::CuDevice
kaldi::CuDevice::DeviceGetName	cu-device.cc	/^void CuDevice::DeviceGetName(char* name, int32 len, int32 dev) {$/;"	f	class:kaldi::CuDevice
kaldi::CuDevice::DisableCaching	cu-device.cc	/^void CuDevice::DisableCaching() {$/;"	f	class:kaldi::CuDevice
kaldi::CuDevice::DoublePrecisionSupported	cu-device.cc	/^bool CuDevice::DoublePrecisionSupported() {$/;"	f	class:kaldi::CuDevice
kaldi::CuDevice::Enabled	cu-device.h	/^  bool Enabled() const {$/;"	f	class:kaldi::CuDevice
kaldi::CuDevice::FinalizeActiveGpu	cu-device.cc	/^void CuDevice::FinalizeActiveGpu() {$/;"	f	class:kaldi::CuDevice
kaldi::CuDevice::Free	cu-device.cc	/^void CuDevice::Free(void *ptr) { allocator_->Free(ptr); }$/;"	f	class:kaldi::CuDevice
kaldi::CuDevice::GetFreeMemory	cu-device.cc	/^std::string CuDevice::GetFreeMemory(int64* free, int64* total) const {$/;"	f	class:kaldi::CuDevice
kaldi::CuDevice::Instantiate	cu-device.h	/^  static inline CuDevice& Instantiate() { return global_device_; }$/;"	f	class:kaldi::CuDevice
kaldi::CuDevice::IsComputeExclusive	cu-device.cc	/^bool CuDevice::IsComputeExclusive() {$/;"	f	class:kaldi::CuDevice
kaldi::CuDevice::Malloc	cu-device.cc	/^void* CuDevice::Malloc(size_t size) {$/;"	f	class:kaldi::CuDevice
kaldi::CuDevice::MallocPitch	cu-device.cc	/^void* CuDevice::MallocPitch(size_t row_bytes, size_t num_rows, size_t *pitch) {$/;"	f	class:kaldi::CuDevice
kaldi::CuDevice::PrintMemoryUsage	cu-device.cc	/^void CuDevice::PrintMemoryUsage() const {$/;"	f	class:kaldi::CuDevice
kaldi::CuDevice::PrintProfile	cu-device.cc	/^void CuDevice::PrintProfile() {$/;"	f	class:kaldi::CuDevice
kaldi::CuDevice::ResetProfile	cu-device.h	/^  void ResetProfile() { $/;"	f	class:kaldi::CuDevice
kaldi::CuDevice::SelectGpuId	cu-device.cc	/^void CuDevice::SelectGpuId(std::string use_gpu) {$/;"	f	class:kaldi::CuDevice
kaldi::CuDevice::SelectGpuIdAuto	cu-device.cc	/^bool CuDevice::SelectGpuIdAuto() {$/;"	f	class:kaldi::CuDevice
kaldi::CuDevice::SetVerbose	cu-device.h	/^  void SetVerbose(bool verbose) {  verbose_ = verbose; }$/;"	f	class:kaldi::CuDevice
kaldi::CuDevice::active_gpu_id_	cu-device.h	/^  int32 active_gpu_id_; $/;"	m	class:kaldi::CuDevice
kaldi::CuDevice::allocator_	cu-device.h	/^  CuAllocator *allocator_;$/;"	m	class:kaldi::CuDevice
kaldi::CuDevice::free_memory_at_startup_	cu-device.h	/^  int64 free_memory_at_startup_;$/;"	m	class:kaldi::CuDevice
kaldi::CuDevice::global_device_	cu-device.cc	/^CuDevice CuDevice::global_device_;$/;"	m	class:kaldi::CuDevice	file:
kaldi::CuDevice::global_device_	cu-device.h	/^  static CuDevice global_device_;$/;"	m	class:kaldi::CuDevice
kaldi::CuDevice::profile_map_	cu-device.h	/^  std::map<std::string, double> profile_map_;$/;"	m	class:kaldi::CuDevice
kaldi::CuDevice::properties_	cu-device.h	/^  cudaDeviceProp properties_;$/;"	m	class:kaldi::CuDevice
kaldi::CuDevice::verbose_	cu-device.h	/^  bool verbose_;$/;"	m	class:kaldi::CuDevice
kaldi::CuDevice::~CuDevice	cu-device.cc	/^CuDevice::~CuDevice() {$/;"	f	class:kaldi::CuDevice
kaldi::CuMatrix	cu-matrix.h	/^class CuMatrix: public CuMatrixBase<Real> {$/;"	c	namespace:kaldi
kaldi::CuMatrix::CompObjfAndDeriv	cu-matrix.cc	/^void CuMatrix<Real>::CompObjfAndDeriv(const std::vector<MatrixElement<Real> >& sv_labels,$/;"	f	class:kaldi::CuMatrix
kaldi::CuMatrix::CuMatrix	cu-matrix.cc	/^ CuMatrix<Real>::CuMatrix(const CuBlockMatrix<Real> &B,$/;"	f	class:kaldi::CuMatrix
kaldi::CuMatrix::CuMatrix	cu-matrix.cc	/^CuMatrix<Real>::CuMatrix(const CuMatrix<Real> &other, MatrixTransposeType trans) {$/;"	f	class:kaldi::CuMatrix
kaldi::CuMatrix::CuMatrix	cu-matrix.cc	/^CuMatrix<Real>::CuMatrix(const CuMatrixBase<OtherReal> & M,$/;"	f	class:kaldi::CuMatrix
kaldi::CuMatrix::CuMatrix	cu-matrix.cc	/^CuMatrix<Real>::CuMatrix(const CuMatrixBase<Real> &other, MatrixTransposeType trans) {$/;"	f	class:kaldi::CuMatrix
kaldi::CuMatrix::CuMatrix	cu-matrix.cc	/^CuMatrix<Real>::CuMatrix(const MatrixBase<OtherReal> &other, MatrixTransposeType trans) {$/;"	f	class:kaldi::CuMatrix
kaldi::CuMatrix::CuMatrix	cu-matrix.h	/^  CuMatrix() { }$/;"	f	class:kaldi::CuMatrix
kaldi::CuMatrix::CuMatrix	cu-matrix.h	/^  CuMatrix(MatrixIndexT rows, MatrixIndexT cols,$/;"	f	class:kaldi::CuMatrix
kaldi::CuMatrix::CuMatrix	cu-matrix.h	/^  explicit CuMatrix(const CuSpMatrix<Real> &M) : CuMatrixBase<Real>() {$/;"	f	class:kaldi::CuMatrix
kaldi::CuMatrix::CuMatrix	cu-matrix.h	/^  explicit CuMatrix(const CuTpMatrix<OtherReal> & M,$/;"	f	class:kaldi::CuMatrix
kaldi::CuMatrix::Destroy	cu-matrix.cc	/^void CuMatrix<Real>::Destroy() {$/;"	f	class:kaldi::CuMatrix
kaldi::CuMatrix::Mat	cu-matrix.h	/^  inline Matrix<Real> &Mat() {$/;"	f	class:kaldi::CuMatrix
kaldi::CuMatrix::Mat	cu-matrix.h	/^  inline const Matrix<Real> &Mat() const {$/;"	f	class:kaldi::CuMatrix
kaldi::CuMatrix::Read	cu-matrix.cc	/^void CuMatrix<Real>::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::CuMatrix
kaldi::CuMatrix::Resize	cu-matrix.cc	/^void CuMatrix<Real>::Resize(MatrixIndexT rows, MatrixIndexT cols,$/;"	f	class:kaldi::CuMatrix
kaldi::CuMatrix::Swap	cu-matrix.cc	/^void CuMatrix<Real>::Swap(CuMatrix<Real> *mat) {$/;"	f	class:kaldi::CuMatrix
kaldi::CuMatrix::Swap	cu-matrix.cc	/^void CuMatrix<Real>::Swap(Matrix<Real> *mat) {$/;"	f	class:kaldi::CuMatrix
kaldi::CuMatrix::Transpose	cu-matrix.cc	/^void CuMatrix<Real>::Transpose() {$/;"	f	class:kaldi::CuMatrix
kaldi::CuMatrix::operator =	cu-matrix.h	/^  CuMatrix<Real> &operator = (const CuMatrix<Real> &other) {$/;"	f	class:kaldi::CuMatrix
kaldi::CuMatrix::operator =	cu-matrix.h	/^  CuMatrix<Real> &operator = (const CuMatrixBase<Real> &other) {$/;"	f	class:kaldi::CuMatrix
kaldi::CuMatrix::operator =	cu-matrix.h	/^  CuMatrix<Real> &operator = (const MatrixBase<Real> &other) {$/;"	f	class:kaldi::CuMatrix
kaldi::CuMatrix::~CuMatrix	cu-matrix.h	/^  ~CuMatrix() { Destroy(); }$/;"	f	class:kaldi::CuMatrix
kaldi::CuMatrixBase	cu-matrix.h	/^class CuMatrixBase {$/;"	c	namespace:kaldi
kaldi::CuMatrixBase::Add	cu-matrix.cc	/^void CuMatrixBase<Real>::Add(Real value) { $/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::AddDiagVecMat	cu-matrix.cc	/^void CuMatrixBase<Real>::AddDiagVecMat($/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::AddMat	cu-matrix.cc	/^void CuMatrixBase<Real>::AddMat(Real alpha, const CuMatrixBase<Real>& A, Real beta) {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::AddMatBlock	cu-matrix.cc	/^void CuMatrixBase<Real>::AddMatBlock($/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::AddMatMat	cu-matrix.cc	/^void CuMatrixBase<Real>::AddMatMat($/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::AddMatMatDivMat	cu-matrix.cc	/^void CuMatrixBase<Real>::AddMatMatDivMat(const CuMatrixBase<Real> &A, $/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::AddMatSp	cu-matrix.h	/^  void AddMatSp(const Real alpha,$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::AddMatTp	cu-matrix.h	/^  void AddMatTp(const Real alpha,$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::AddSpMat	cu-matrix.h	/^  void AddSpMat(const Real alpha,$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::AddToDiag	cu-matrix.cc	/^void CuMatrixBase<Real>::AddToDiag(Real value) { $/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::AddTpMat	cu-matrix.h	/^  void AddTpMat(const Real alpha,$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::AddVecToCols	cu-matrix.cc	/^void CuMatrixBase<Real>::AddVecToCols(Real alpha,$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::AddVecToRows	cu-matrix.cc	/^void CuMatrixBase<Real>::AddVecToRows(Real alpha,$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::ApplyCeiling	cu-matrix.cc	/^void CuMatrixBase<Real>::ApplyCeiling(Real ceiling_val) {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::ApplyExp	cu-matrix.cc	/^void CuMatrixBase<Real>::ApplyExp() {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::ApplyFloor	cu-matrix.cc	/^void CuMatrixBase<Real>::ApplyFloor(Real floor_val) {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::ApplyHeaviside	cu-matrix.cc	/^void CuMatrixBase<Real>::ApplyHeaviside() {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::ApplyLog	cu-matrix.cc	/^void CuMatrixBase<Real>::ApplyLog() { $/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::ApplyPow	cu-matrix.cc	/^void CuMatrixBase<Real>::ApplyPow(Real power) {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::ApplySoftMaxPerRow	cu-matrix.cc	/^void CuMatrixBase<Real>::ApplySoftMaxPerRow(const CuMatrixBase<Real> &src) {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::ApproxEqual	cu-matrix.cc	/^bool CuMatrixBase<Real>::ApproxEqual(const CuMatrixBase<Real> &other,$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::Cholesky	cu-matrix.cc	/^void CuMatrixBase<Real>::Cholesky() {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::ColRange	cu-matrix.h	/^  inline CuSubMatrix<Real> ColRange(const MatrixIndexT col_offset,$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::CopyColFromVec	cu-matrix.cc	/^void CuMatrixBase<Real>::CopyColFromVec(const CuVectorBase<Real> &v,$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::CopyCols	cu-matrix.cc	/^void CuMatrixBase<Real>::CopyCols(const CuMatrixBase<Real> &src,$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::CopyFromBlock	cu-matrix.cc	/^void CuMatrixBase<Real>::CopyFromBlock(const CuBlockMatrix<Real> &B,$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::CopyFromMat	cu-matrix.cc	/^void CuMatrixBase<Real>::CopyFromMat(const CuMatrixBase<OtherReal> &M,$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::CopyFromMat	cu-matrix.cc	/^void CuMatrixBase<Real>::CopyFromMat(const MatrixBase<OtherReal> &src,$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::CopyFromMat	cu-matrix.cc	/^void CuMatrixBase<Real>::CopyFromMat(const MatrixBase<Real> &src,$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::CopyFromSp	cu-matrix.cc	/^void CuMatrixBase<Real>::CopyFromSp(const CuSpMatrix<Real> &M) {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::CopyFromTp	cu-matrix.cc	/^void CuMatrixBase<Real>::CopyFromTp(const CuTpMatrix<OtherReal> &M,$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::CopyLowerToUpper	cu-matrix.cc	/^void CuMatrixBase<Real>::CopyLowerToUpper() {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::CopyRows	cu-matrix.cc	/^void CuMatrixBase<Real>::CopyRows(const CuMatrixBase<Real> &src,$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::CopyRowsFromVec	cu-matrix.cc	/^void CuMatrixBase<Real>::CopyRowsFromVec(const CuVectorBase<Real> &v) {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::CopyRowsFromVec	cu-matrix.cc	/^void CuMatrixBase<Real>::CopyRowsFromVec(const VectorBase<Real> &v) {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::CopyToMat	cu-matrix.cc	/^void CuMatrixBase<Real>::CopyToMat(MatrixBase<OtherReal> *dst,$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::CopyUpperToLower	cu-matrix.cc	/^void CuMatrixBase<Real>::CopyUpperToLower() {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::CuMatrixBase	cu-matrix.h	/^  CuMatrixBase<Real>(): data_(NULL), num_cols_(0), num_rows_(0), stride_(0) { }$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::CuMatrixBase	cu-matrix.h	/^  CuMatrixBase<Real>(Real *data,$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::Data	cu-matrix.h	/^  inline Real *Data() { return data_; }$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::Data	cu-matrix.h	/^  inline const Real *Data() const { return data_; }$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::DiffSigmoid	cu-matrix.cc	/^void CuMatrixBase<Real>::DiffSigmoid(const CuMatrixBase<Real> &value,$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::DiffTanh	cu-matrix.cc	/^void CuMatrixBase<Real>::DiffTanh(const CuMatrixBase<Real> &value,$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::DiffXent	cu-matrix.cc	/^void CuMatrixBase<Real>::DiffXent(const CuArray<int32> &tgt,$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::Dim	cu-matrix.h	/^  ::MatrixDim Dim() const { $/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::DivRowsVec	cu-matrix.cc	/^void CuMatrixBase<Real>::DivRowsVec(const CuVectorBase<Real> &div) {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::EqualElementMask	cu-matrix.cc	/^void CuMatrixBase<Real>::EqualElementMask(const CuMatrixBase<Real> &mat, CuMatrix<Real> *mask) const {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::FindRowMaxId	cu-matrix.cc	/^void CuMatrixBase<Real>::FindRowMaxId(CuArray<int32> *id) const {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::FrobeniusNorm	cu-matrix.h	/^  Real FrobeniusNorm() const { return sqrt(TraceMatMat(*this, *this, kTrans)); }$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::GroupPnorm	cu-matrix.cc	/^void CuMatrixBase<Real>::GroupPnorm(const CuMatrixBase<Real> &src, Real power) {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::GroupPnormDeriv	cu-matrix.cc	/^void CuMatrixBase<Real>::GroupPnormDeriv(const CuMatrixBase<Real> &src1,$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::IsUnit	cu-matrix.cc	/^bool CuMatrixBase<Real>::IsUnit(Real tol) const {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::Lookup	cu-matrix.cc	/^void CuMatrixBase<Real>::Lookup(const std::vector<Int32Pair> &indices,$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::Mat	cu-matrix.h	/^  inline MatrixBase<Real> &Mat() {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::Mat	cu-matrix.h	/^  inline const MatrixBase<Real> &Mat() const {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::Max	cu-matrix.cc	/^void CuMatrixBase<Real>::Max(const CuMatrixBase<Real>& A) {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::MulColsVec	cu-matrix.cc	/^void CuMatrixBase<Real>::MulColsVec(const CuVectorBase<Real> &scale) {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::MulElements	cu-matrix.cc	/^void CuMatrixBase<Real>::MulElements(const CuMatrixBase<Real>& A) {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::MulRowsGroupMat	cu-matrix.cc	/^void CuMatrixBase<Real>::MulRowsGroupMat(const CuMatrixBase<Real> &src) {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::MulRowsVec	cu-matrix.cc	/^void CuMatrixBase<Real>::MulRowsVec(const CuVectorBase<Real> &scale) {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::NumCols	cu-matrix.h	/^  MatrixIndexT NumCols() const { return num_cols_;  }$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::NumRows	cu-matrix.h	/^  MatrixIndexT NumRows() const { return num_rows_;  }$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::Range	cu-matrix.h	/^  inline CuSubMatrix<Real> Range(const MatrixIndexT row_offset,$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::Row	cu-matrix.h	/^  inline CuSubVector<Real> Row(MatrixIndexT i) {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::Row	cu-matrix.h	/^  inline const CuSubVector<Real> Row(MatrixIndexT i) const {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::RowData	cu-matrix.h	/^  inline Real* RowData(MatrixIndexT r) { return data_ + r * stride_; }$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::RowData	cu-matrix.h	/^  inline const Real* RowData(MatrixIndexT r) const { return data_ + r * stride_; }$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::RowRange	cu-matrix.h	/^  inline CuSubMatrix<Real> RowRange(const MatrixIndexT row_offset,$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::Scale	cu-matrix.cc	/^void CuMatrixBase<Real>::Scale(Real value) { $/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::Set	cu-matrix.cc	/^void CuMatrixBase<Real>::Set(Real value) {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::SetRandUniform	cu-matrix.cc	/^void CuMatrixBase<Real>::SetRandUniform() {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::SetRandn	cu-matrix.cc	/^void CuMatrixBase<Real>::SetRandn() {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::SetZero	cu-matrix.cc	/^void CuMatrixBase<Real>::SetZero() {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::SetZeroUpperDiag	cu-matrix.cc	/^void CuMatrixBase<Real>::SetZeroUpperDiag() {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::Sigmoid	cu-matrix.cc	/^void CuMatrixBase<Real>::Sigmoid(const CuMatrixBase<Real> &src) {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::SizeInBytes	cu-matrix.h	/^  MatrixIndexT SizeInBytes() const { return num_rows_*stride_*sizeof(Real); }$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::SoftHinge	cu-matrix.cc	/^void CuMatrixBase<Real>::SoftHinge(const CuMatrixBase<Real> &src) {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::Stride	cu-matrix.h	/^  MatrixIndexT Stride() const { return stride_; }$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::Sum	cu-matrix.cc	/^Real CuMatrixBase<Real>::Sum() const {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::SumColumnRanges	cu-matrix.cc	/^void CuMatrixBase<Real>::SumColumnRanges(const CuMatrixBase<Real> &src,$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::SymAddMat2	cu-matrix.cc	/^void CuMatrixBase<Real>::SymAddMat2($/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::SymInvertPosDef	cu-matrix.cc	/^void CuMatrixBase<Real>::SymInvertPosDef() {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::Tanh	cu-matrix.cc	/^void CuMatrixBase<Real>::Tanh(const CuMatrixBase<Real> &src) {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::Trace	cu-matrix.cc	/^Real CuMatrixBase<Real>::Trace(bool check_square) const {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::Write	cu-matrix.cc	/^void CuMatrixBase<Real>::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::data_	cu-matrix.h	/^  Real *data_;       \/\/\/< GPU data pointer (or regular matrix data pointer,$/;"	m	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::num_cols_	cu-matrix.h	/^  MatrixIndexT num_cols_;$/;"	m	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::num_rows_	cu-matrix.h	/^  MatrixIndexT num_rows_;$/;"	m	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::operator ()	cu-matrix.h	/^  inline CuValue<Real> operator() (MatrixIndexT r, MatrixIndexT c) {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::operator ()	cu-matrix.h	/^  inline Real operator() (MatrixIndexT r, MatrixIndexT c) const {$/;"	f	class:kaldi::CuMatrixBase
kaldi::CuMatrixBase::stride_	cu-matrix.h	/^  MatrixIndexT stride_;$/;"	m	class:kaldi::CuMatrixBase
kaldi::CuMatrixUnitTest	cu-test.cc	/^static void CuMatrixUnitTest() {$/;"	f	namespace:kaldi
kaldi::CuPackedMatrix	cu-packed-matrix.h	/^class CuPackedMatrix {$/;"	c	namespace:kaldi
kaldi::CuPackedMatrix::AddPacked	cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::AddPacked(const Real alpha, const CuPackedMatrix<Real> &M) {$/;"	f	class:kaldi::CuPackedMatrix
kaldi::CuPackedMatrix::AddToDiag	cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::AddToDiag(Real r) {$/;"	f	class:kaldi::CuPackedMatrix
kaldi::CuPackedMatrix::CopyFromPacked	cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::CopyFromPacked(const CuPackedMatrix<Real> &src) {$/;"	f	class:kaldi::CuPackedMatrix
kaldi::CuPackedMatrix::CopyFromPacked	cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::CopyFromPacked(const PackedMatrix<Real> &src) {$/;"	f	class:kaldi::CuPackedMatrix
kaldi::CuPackedMatrix::CopyToPacked	cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::CopyToPacked(PackedMatrix<Real> *dst) const {$/;"	f	class:kaldi::CuPackedMatrix
kaldi::CuPackedMatrix::CuPackedMatrix	cu-packed-matrix.h	/^  CuPackedMatrix() : data_(NULL), num_rows_(0) {}$/;"	f	class:kaldi::CuPackedMatrix
kaldi::CuPackedMatrix::CuPackedMatrix	cu-packed-matrix.h	/^  explicit CuPackedMatrix(MatrixIndexT r,$/;"	f	class:kaldi::CuPackedMatrix
kaldi::CuPackedMatrix::CuPackedMatrix	cu-packed-matrix.h	/^  explicit CuPackedMatrix(const CuPackedMatrix<Real> &orig) : data_(NULL), num_rows_(0) {$/;"	f	class:kaldi::CuPackedMatrix
kaldi::CuPackedMatrix::CuPackedMatrix	cu-packed-matrix.h	/^  explicit CuPackedMatrix(const PackedMatrix<Real> &orig) : data_(NULL), num_rows_(0) {$/;"	f	class:kaldi::CuPackedMatrix
kaldi::CuPackedMatrix::Data	cu-packed-matrix.h	/^  Real* Data() { return data_; }  $/;"	f	class:kaldi::CuPackedMatrix
kaldi::CuPackedMatrix::Data	cu-packed-matrix.h	/^  const Real* Data() const { return data_; }$/;"	f	class:kaldi::CuPackedMatrix
kaldi::CuPackedMatrix::Destroy	cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::Destroy() {$/;"	f	class:kaldi::CuPackedMatrix
kaldi::CuPackedMatrix::Mat	cu-packed-matrix.h	/^  inline PackedMatrix<Real> &Mat() {$/;"	f	class:kaldi::CuPackedMatrix
kaldi::CuPackedMatrix::Mat	cu-packed-matrix.h	/^  inline const PackedMatrix<Real> &Mat() const {$/;"	f	class:kaldi::CuPackedMatrix
kaldi::CuPackedMatrix::NumCols	cu-packed-matrix.h	/^  inline MatrixIndexT NumCols() const { return num_rows_; }$/;"	f	class:kaldi::CuPackedMatrix
kaldi::CuPackedMatrix::NumRows	cu-packed-matrix.h	/^  inline MatrixIndexT NumRows() const { return num_rows_; }$/;"	f	class:kaldi::CuPackedMatrix
kaldi::CuPackedMatrix::Read	cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::CuPackedMatrix
kaldi::CuPackedMatrix::Resize	cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::Resize(MatrixIndexT rows,$/;"	f	class:kaldi::CuPackedMatrix
kaldi::CuPackedMatrix::Scale	cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::Scale(Real alpha) {$/;"	f	class:kaldi::CuPackedMatrix
kaldi::CuPackedMatrix::ScaleDiag	cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::ScaleDiag(Real alpha) {$/;"	f	class:kaldi::CuPackedMatrix
kaldi::CuPackedMatrix::SetDiag	cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::SetDiag(Real alpha) {$/;"	f	class:kaldi::CuPackedMatrix
kaldi::CuPackedMatrix::SetRandn	cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::SetRandn() {$/;"	f	class:kaldi::CuPackedMatrix
kaldi::CuPackedMatrix::SetUnit	cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::SetUnit() {$/;"	f	class:kaldi::CuPackedMatrix
kaldi::CuPackedMatrix::SetZero	cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::SetZero() {$/;"	f	class:kaldi::CuPackedMatrix
kaldi::CuPackedMatrix::SizeInBytes	cu-packed-matrix.h	/^  size_t  SizeInBytes() const {$/;"	f	class:kaldi::CuPackedMatrix
kaldi::CuPackedMatrix::Swap	cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::Swap(PackedMatrix<Real> *mat) {$/;"	f	class:kaldi::CuPackedMatrix
kaldi::CuPackedMatrix::Trace	cu-packed-matrix.cc	/^Real CuPackedMatrix<Real>::Trace() const {$/;"	f	class:kaldi::CuPackedMatrix
kaldi::CuPackedMatrix::Write	cu-packed-matrix.cc	/^void CuPackedMatrix<Real>::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::CuPackedMatrix
kaldi::CuPackedMatrix::data_	cu-packed-matrix.h	/^  Real *data_;$/;"	m	class:kaldi::CuPackedMatrix
kaldi::CuPackedMatrix::num_rows_	cu-packed-matrix.h	/^  MatrixIndexT num_rows_;$/;"	m	class:kaldi::CuPackedMatrix
kaldi::CuPackedMatrix::operator ()	cu-packed-matrix.h	/^  inline Real operator() (MatrixIndexT r, MatrixIndexT c) const {$/;"	f	class:kaldi::CuPackedMatrix
kaldi::CuPackedMatrix::~CuPackedMatrix	cu-packed-matrix.h	/^  ~CuPackedMatrix() { Destroy(); }$/;"	f	class:kaldi::CuPackedMatrix
kaldi::CuRand	cu-rand.h	/^class CuRand {$/;"	c	namespace:kaldi
kaldi::CuRand::AddGaussNoise	cu-rand.cc	/^template<typename Real> void CuRand<Real>::AddGaussNoise(CuMatrix<Real> *tgt, Real gscale) {$/;"	f	class:kaldi::CuRand
kaldi::CuRand::BinarizeProbs	cu-rand.cc	/^template<typename Real> void CuRand<Real>::BinarizeProbs(const CuMatrix<Real> &probs, CuMatrix<Real> *states) {$/;"	f	class:kaldi::CuRand
kaldi::CuRand::CuRand	cu-rand.h	/^  CuRand(): z1_(NULL), z2_(NULL), z3_(NULL), z4_(NULL), state_size_(0) { }$/;"	f	class:kaldi::CuRand
kaldi::CuRand::RandGaussian	cu-rand.cc	/^template<typename Real> void CuRand<Real>::RandGaussian(CuMatrixBase<Real> *tgt) {$/;"	f	class:kaldi::CuRand
kaldi::CuRand::RandGaussian	cu-rand.cc	/^template<typename Real> void CuRand<Real>::RandGaussian(CuVectorBase<Real> *tgt) {$/;"	f	class:kaldi::CuRand
kaldi::CuRand::RandUniform	cu-rand.cc	/^template<typename Real> void CuRand<Real>::RandUniform(CuMatrixBase<Real> *tgt) {$/;"	f	class:kaldi::CuRand
kaldi::CuRand::SeedBuffer	cu-rand.cc	/^void CuRand<Real>::SeedBuffer(MatrixIndexT state_size, uint32 **tgt) {$/;"	f	class:kaldi::CuRand
kaldi::CuRand::SeedGpu	cu-rand.cc	/^void CuRand<Real>::SeedGpu(MatrixIndexT state_size) {$/;"	f	class:kaldi::CuRand
kaldi::CuRand::state_size_	cu-rand.h	/^  int32 state_size_; \/\/\/< size of the buffers$/;"	m	class:kaldi::CuRand
kaldi::CuRand::tmp_	cu-rand.h	/^  CuMatrix<Real> tmp_; \/\/\/< auxiliary matrix$/;"	m	class:kaldi::CuRand
kaldi::CuRand::z1_	cu-rand.h	/^  uint32 *z1_, *z2_, *z3_, *z4_; $/;"	m	class:kaldi::CuRand
kaldi::CuRand::z2_	cu-rand.h	/^  uint32 *z1_, *z2_, *z3_, *z4_; $/;"	m	class:kaldi::CuRand
kaldi::CuRand::z3_	cu-rand.h	/^  uint32 *z1_, *z2_, *z3_, *z4_; $/;"	m	class:kaldi::CuRand
kaldi::CuRand::z4_	cu-rand.h	/^  uint32 *z1_, *z2_, *z3_, *z4_; $/;"	m	class:kaldi::CuRand
kaldi::CuRand::~CuRand	cu-rand.cc	/^CuRand<Real>::~CuRand() {$/;"	f	class:kaldi::CuRand
kaldi::CuSpMatrix	cu-sp-matrix.h	/^class CuSpMatrix : public CuPackedMatrix<Real> {$/;"	c	namespace:kaldi
kaldi::CuSpMatrix::AddMat2	cu-sp-matrix.cc	/^void CuSpMatrix<Real>::AddMat2(const Real alpha, const CuMatrixBase<Real> &M,$/;"	f	class:kaldi::CuSpMatrix
kaldi::CuSpMatrix::AddSp	cu-sp-matrix.h	/^  void AddSp(const Real alpha, const CuSpMatrix<Real> &Ma) {$/;"	f	class:kaldi::CuSpMatrix
kaldi::CuSpMatrix::AddVec2	cu-sp-matrix.cc	/^void CuSpMatrix<Real>::AddVec2(const Real alpha, const CuVectorBase<Real> &v) {$/;"	f	class:kaldi::CuSpMatrix
kaldi::CuSpMatrix::ApproxEqual	cu-sp-matrix.cc	/^bool CuSpMatrix<Real>::ApproxEqual(const CuSpMatrix<Real> &B, Real tol) const {$/;"	f	class:kaldi::CuSpMatrix
kaldi::CuSpMatrix::CopyFromMat	cu-sp-matrix.cc	/^void CuSpMatrix<Real>::CopyFromMat(const CuMatrixBase<Real> &M,$/;"	f	class:kaldi::CuSpMatrix
kaldi::CuSpMatrix::CopyFromSp	cu-sp-matrix.h	/^  void CopyFromSp(const CuSpMatrix<Real> &other) {$/;"	f	class:kaldi::CuSpMatrix
kaldi::CuSpMatrix::CopyFromSp	cu-sp-matrix.h	/^  void CopyFromSp(const SpMatrix<Real> &other) {$/;"	f	class:kaldi::CuSpMatrix
kaldi::CuSpMatrix::CopyToSp	cu-sp-matrix.h	/^  void CopyToSp(SpMatrix<Real> *dst) const { \/\/added const by hxu$/;"	f	class:kaldi::CuSpMatrix
kaldi::CuSpMatrix::CuSpMatrix	cu-sp-matrix.h	/^  CuSpMatrix(): CuPackedMatrix<Real>() {}$/;"	f	class:kaldi::CuSpMatrix
kaldi::CuSpMatrix::CuSpMatrix	cu-sp-matrix.h	/^  explicit CuSpMatrix(MatrixIndexT r, MatrixResizeType resize_type = kSetZero)$/;"	f	class:kaldi::CuSpMatrix
kaldi::CuSpMatrix::CuSpMatrix	cu-sp-matrix.h	/^  explicit CuSpMatrix(const CuMatrixBase<Real> &orig,$/;"	f	class:kaldi::CuSpMatrix
kaldi::CuSpMatrix::CuSpMatrix	cu-sp-matrix.h	/^  explicit CuSpMatrix(const CuSpMatrix<Real> &orig)$/;"	f	class:kaldi::CuSpMatrix
kaldi::CuSpMatrix::CuSpMatrix	cu-sp-matrix.h	/^  explicit CuSpMatrix(const SpMatrix<Real> &orig)$/;"	f	class:kaldi::CuSpMatrix
kaldi::CuSpMatrix::FrobeniusNorm	cu-sp-matrix.h	/^  Real FrobeniusNorm() const { return sqrt(TraceSpSp(*this, *this)); }$/;"	f	class:kaldi::CuSpMatrix
kaldi::CuSpMatrix::Invert	cu-sp-matrix.cc	/^void CuSpMatrix<Real>::Invert() {$/;"	f	class:kaldi::CuSpMatrix
kaldi::CuSpMatrix::InvertPosDefApprox	cu-sp-matrix.cc	/^void CuSpMatrix<Real>::InvertPosDefApprox(BaseFloat max_error) {$/;"	f	class:kaldi::CuSpMatrix
kaldi::CuSpMatrix::IsUnit	cu-sp-matrix.cc	/^bool CuSpMatrix<Real>::IsUnit(Real tol) const {$/;"	f	class:kaldi::CuSpMatrix
kaldi::CuSpMatrix::Mat	cu-sp-matrix.h	/^  inline SpMatrix<Real> &Mat() {$/;"	f	class:kaldi::CuSpMatrix
kaldi::CuSpMatrix::Mat	cu-sp-matrix.h	/^  inline const SpMatrix<Real> &Mat() const {$/;"	f	class:kaldi::CuSpMatrix
kaldi::CuSpMatrix::Resize	cu-sp-matrix.h	/^  inline void Resize(MatrixIndexT nRows, MatrixResizeType resize_type = kSetZero) {$/;"	f	class:kaldi::CuSpMatrix
kaldi::CuSpMatrix::operator ()	cu-sp-matrix.h	/^  inline CuValue<Real> operator() (MatrixIndexT r, MatrixIndexT c) {$/;"	f	class:kaldi::CuSpMatrix
kaldi::CuSpMatrix::operator ()	cu-sp-matrix.h	/^  inline Real operator() (MatrixIndexT r, MatrixIndexT c) const {$/;"	f	class:kaldi::CuSpMatrix
kaldi::CuSpMatrix::~CuSpMatrix	cu-sp-matrix.h	/^  ~CuSpMatrix() {}  $/;"	f	class:kaldi::CuSpMatrix
kaldi::CuSpMatrixSpeedTest	cu-sp-matrix-speed-test.cc	/^template<typename Real> void CuSpMatrixSpeedTest() {$/;"	f	namespace:kaldi
kaldi::CuSubMatrix	cu-matrix.h	/^class CuSubMatrix: public CuMatrixBase<Real> {$/;"	c	namespace:kaldi
kaldi::CuSubMatrix::CuSubMatrix	cu-matrix-inl.h	/^inline CuSubMatrix<Real>::CuSubMatrix(const CuMatrixBase<Real> &mat,$/;"	f	class:kaldi::CuSubMatrix
kaldi::CuSubMatrix::CuSubMatrix	cu-matrix.h	/^  inline CuSubMatrix<Real> (const CuSubMatrix &other):$/;"	f	class:kaldi::CuSubMatrix
kaldi::CuSubVector	cu-vector.h	/^class CuSubVector: public CuVectorBase<Real> {$/;"	c	namespace:kaldi
kaldi::CuSubVector::CuSubVector	cu-vector.h	/^  CuSubVector(const CuMatrixBase<Real> &matrix, MatrixIndexT row) {$/;"	f	class:kaldi::CuSubVector
kaldi::CuSubVector::CuSubVector	cu-vector.h	/^  CuSubVector(const CuSubVector &other) : CuVectorBase<Real> () {$/;"	f	class:kaldi::CuSubVector
kaldi::CuSubVector::CuSubVector	cu-vector.h	/^  CuSubVector(const CuVectorBase<Real> &t, const MatrixIndexT origin,$/;"	f	class:kaldi::CuSubVector
kaldi::CuSubVector::CuSubVector	cu-vector.h	/^  CuSubVector(const Real* data, MatrixIndexT length) : CuVectorBase<Real> () {$/;"	f	class:kaldi::CuSubVector
kaldi::CuTpMatrix	cu-tp-matrix.h	/^class CuTpMatrix : public CuPackedMatrix<Real> {$/;"	c	namespace:kaldi
kaldi::CuTpMatrix::Cholesky	cu-tp-matrix.cc	/^void CuTpMatrix<Real>::Cholesky(const CuSpMatrix<Real> &orig) {$/;"	f	class:kaldi::CuTpMatrix
kaldi::CuTpMatrix::CopyFromMat	cu-tp-matrix.cc	/^void CuTpMatrix<Real>::CopyFromMat(const CuMatrixBase<Real> &M,$/;"	f	class:kaldi::CuTpMatrix
kaldi::CuTpMatrix::CopyFromTp	cu-tp-matrix.h	/^  void CopyFromTp(const CuTpMatrix<Real> &other) {$/;"	f	class:kaldi::CuTpMatrix
kaldi::CuTpMatrix::CopyFromTp	cu-tp-matrix.h	/^  void CopyFromTp(const TpMatrix<Real> &other) {$/;"	f	class:kaldi::CuTpMatrix
kaldi::CuTpMatrix::CuTpMatrix	cu-tp-matrix.cc	/^CuTpMatrix<Real>::CuTpMatrix(const CuMatrixBase<Real> &orig, MatrixTransposeType trans):$/;"	f	class:kaldi::CuTpMatrix
kaldi::CuTpMatrix::CuTpMatrix	cu-tp-matrix.h	/^  CuTpMatrix() : CuPackedMatrix<Real>() {}$/;"	f	class:kaldi::CuTpMatrix
kaldi::CuTpMatrix::CuTpMatrix	cu-tp-matrix.h	/^  explicit CuTpMatrix(MatrixIndexT r, MatrixResizeType resize_type = kSetZero)$/;"	f	class:kaldi::CuTpMatrix
kaldi::CuTpMatrix::CuTpMatrix	cu-tp-matrix.h	/^  explicit CuTpMatrix<Real>(const CuTpMatrix<Real> &orig)$/;"	f	class:kaldi::CuTpMatrix
kaldi::CuTpMatrix::CuTpMatrix	cu-tp-matrix.h	/^  explicit CuTpMatrix<Real>(const TpMatrix<Real> &orig)$/;"	f	class:kaldi::CuTpMatrix
kaldi::CuTpMatrix::Invert	cu-tp-matrix.cc	/^void CuTpMatrix<Real>::Invert() {$/;"	f	class:kaldi::CuTpMatrix
kaldi::CuTpMatrix::Mat	cu-tp-matrix.h	/^  inline TpMatrix<Real> &Mat() {$/;"	f	class:kaldi::CuTpMatrix
kaldi::CuTpMatrix::Mat	cu-tp-matrix.h	/^  inline const TpMatrix<Real> &Mat() const {$/;"	f	class:kaldi::CuTpMatrix
kaldi::CuTpMatrix::~CuTpMatrix	cu-tp-matrix.h	/^  ~CuTpMatrix() {}$/;"	f	class:kaldi::CuTpMatrix
kaldi::CuValue	cu-value.h	/^class CuValue {$/;"	c	namespace:kaldi
kaldi::CuValue::CuValue	cu-value.h	/^  CuValue(Real *data): data_(data) { }$/;"	f	class:kaldi::CuValue
kaldi::CuValue::CuValue	cu-value.h	/^  CuValue(const CuValue &other): data_(other.data_) { }$/;"	f	class:kaldi::CuValue
kaldi::CuValue::data_	cu-value.h	/^  Real *data_;$/;"	m	class:kaldi::CuValue
kaldi::CuValue::operator +=	cu-value.h	/^  inline Real operator += (Real r) { return (*this = r + Real(*this)); }$/;"	f	class:kaldi::CuValue
kaldi::CuValue::operator =	cu-value.h	/^  inline CuValue operator = (const CuValue<Real> &other) {$/;"	f	class:kaldi::CuValue
kaldi::CuValue::operator =	cu-value.h	/^  inline Real operator = (Real r) { \/\/ assignment from Real$/;"	f	class:kaldi::CuValue
kaldi::CuValue::operator Real	cu-value.h	/^  inline operator Real () const { \/\/ assignment to Real$/;"	f	class:kaldi::CuValue
kaldi::CuVector	cu-vector.h	/^class CuVector: public CuVectorBase<Real> {$/;"	c	namespace:kaldi
kaldi::CuVector::CuVector	cu-vector.cc	/^CuVector<Real>::CuVector(const CuVectorBase<Real> &v) {$/;"	f	class:kaldi::CuVector
kaldi::CuVector::CuVector	cu-vector.cc	/^CuVector<Real>::CuVector(const VectorBase<Real> &v) {$/;"	f	class:kaldi::CuVector
kaldi::CuVector::CuVector	cu-vector.h	/^  CuVector() { }$/;"	f	class:kaldi::CuVector
kaldi::CuVector::CuVector	cu-vector.h	/^  CuVector(MatrixIndexT dim, MatrixResizeType t = kSetZero) { Resize(dim, t); }$/;"	f	class:kaldi::CuVector
kaldi::CuVector::CuVector	cu-vector.h	/^  explicit CuVector(const CuVector<Real> &v) : CuVectorBase<Real>() {$/;"	f	class:kaldi::CuVector
kaldi::CuVector::CuVector	cu-vector.h	/^  explicit CuVector(const CuVectorBase<OtherReal> &v) : CuVectorBase<Real>() {$/;"	f	class:kaldi::CuVector
kaldi::CuVector::CuVector	cu-vector.h	/^  explicit CuVector(const VectorBase<OtherReal> &v) : CuVectorBase<Real>() {$/;"	f	class:kaldi::CuVector
kaldi::CuVector::Destroy	cu-vector.cc	/^void CuVector<Real>::Destroy() {$/;"	f	class:kaldi::CuVector
kaldi::CuVector::Read	cu-vector.cc	/^void CuVector<Real>::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::CuVector
kaldi::CuVector::Resize	cu-vector.cc	/^void CuVector<Real>::Resize(MatrixIndexT dim, MatrixResizeType t) {$/;"	f	class:kaldi::CuVector
kaldi::CuVector::Swap	cu-vector.cc	/^void CuVector<Real>::Swap(Vector<Real> *vec) {$/;"	f	class:kaldi::CuVector
kaldi::CuVector::Write	cu-vector.cc	/^void CuVector<Real>::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::CuVector
kaldi::CuVector::operator =	cu-vector.h	/^  CuVector<Real> &operator = (const CuVector<Real> &other) {$/;"	f	class:kaldi::CuVector
kaldi::CuVector::operator =	cu-vector.h	/^  CuVector<Real> &operator = (const CuVectorBase<Real> &other) {$/;"	f	class:kaldi::CuVector
kaldi::CuVector::operator =	cu-vector.h	/^  CuVector<Real> &operator = (const VectorBase<Real> &other) {$/;"	f	class:kaldi::CuVector
kaldi::CuVector::~CuVector	cu-vector.h	/^  ~CuVector() { Destroy(); }$/;"	f	class:kaldi::CuVector
kaldi::CuVectorBase	cu-vector.h	/^class CuVectorBase {$/;"	c	namespace:kaldi
kaldi::CuVectorBase::Add	cu-vector.cc	/^void CuVectorBase<Real>::Add(Real value) {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::AddColSumMat	cu-vector.cc	/^void CuVectorBase<Real>::AddColSumMat(Real alpha,$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::AddDiagMat2	cu-vector.cc	/^void CuVectorBase<Real>::AddDiagMat2(Real alpha, const CuMatrixBase<Real> &M,$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::AddDiagMatMat	cu-vector.cc	/^void CuVectorBase<Real>::AddDiagMatMat($/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::AddMatVec	cu-vector.cc	/^void CuVectorBase<Real>::AddMatVec(const Real alpha,$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::AddRowSumMat	cu-vector.cc	/^void CuVectorBase<Real>::AddRowSumMat(Real alpha, const CuMatrixBase<Real> &mat,$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::AddSpVec	cu-vector.cc	/^void CuVectorBase<Real>::AddSpVec(const Real alpha,$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::AddTpVec	cu-vector.cc	/^void CuVectorBase<Real>::AddTpVec(const Real alpha, const CuTpMatrix<Real> &M,$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::AddVec	cu-vector.cc	/^void CuVectorBase<Real>::AddVec(Real alpha, const CuVectorBase<OtherReal> &vec,$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::AddVec	cu-vector.cc	/^void CuVectorBase<Real>::AddVec(Real alpha, const CuVectorBase<Real> &vec,$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::AddVecVec	cu-vector.cc	/^void CuVectorBase<Real>::AddVecVec(Real alpha, const CuVectorBase<Real> &v,$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::ApplyExp	cu-vector.cc	/^void CuVectorBase<Real>::ApplyExp() {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::ApplyFloor	cu-vector.cc	/^MatrixIndexT CuVectorBase<Real>::ApplyFloor(Real floor_val) {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::ApplyLog	cu-vector.cc	/^void CuVectorBase<Real>::ApplyLog() {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::ApplyPow	cu-vector.cc	/^void CuVectorBase<Real>::ApplyPow(Real power) {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::ApplySoftMax	cu-vector.cc	/^void CuVectorBase<Real>::ApplySoftMax() {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::ApproxEqual	cu-vector.cc	/^bool CuVectorBase<Real>::ApproxEqual(const CuVectorBase<Real> &other, float tol) const {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::CopyColFromMat	cu-vector.cc	/^void CuVectorBase<Real>::CopyColFromMat(const CuMatrixBase<Real> &mat, MatrixIndexT col) {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::CopyColFromMat	cu-vector.cc	/^void CuVectorBase<double>::CopyColFromMat(const CuMatrixBase<float> &mat, MatrixIndexT col) {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::CopyColFromMat	cu-vector.cc	/^void CuVectorBase<float>::CopyColFromMat(const CuMatrixBase<double> &mat, MatrixIndexT col) {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::CopyDiagFromMat	cu-vector.cc	/^void CuVectorBase<Real>::CopyDiagFromMat(const CuMatrix<Real> &M) {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::CopyDiagFromPacked	cu-vector.cc	/^void CuVectorBase<Real>::CopyDiagFromPacked(const CuPackedMatrix<Real> &M) {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::CopyFromVec	cu-vector.cc	/^void CuVectorBase<Real>::CopyFromVec(const CuVectorBase<Real> &src) {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::CopyFromVec	cu-vector.cc	/^void CuVectorBase<Real>::CopyFromVec(const VectorBase<OtherReal> &src) {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::CopyFromVec	cu-vector.cc	/^void CuVectorBase<double>::CopyFromVec(const CuVectorBase<float> &src) {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::CopyFromVec	cu-vector.cc	/^void CuVectorBase<float>::CopyFromVec(const CuVectorBase<double> &src) {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::CopyFromVec	cu-vector.h	/^void CuVectorBase<Real>::CopyFromVec(const CuVectorBase<OtherReal> &v) {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::CopyRowsFromMat	cu-vector.cc	/^void CuVectorBase<Real>::CopyRowsFromMat(const CuMatrixBase<Real> &mat) {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::CopyRowsFromMat	cu-vector.cc	/^void CuVectorBase<Real>::CopyRowsFromMat(const MatrixBase<Real> &mat) {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::CopyToVec	cu-vector.cc	/^void CuVectorBase<Real>::CopyToVec(VectorBase<OtherReal> *dst) const {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::CuVectorBase	cu-vector.h	/^  CuVectorBase<Real>(): data_(NULL), dim_(0) { }$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::Data	cu-vector.h	/^  inline Real* Data() { return data_; }$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::Data	cu-vector.h	/^  inline const Real* Data() const { return data_; }$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::Dim	cu-vector.h	/^  MatrixIndexT Dim() const { return dim_;  }   $/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::InvertElements	cu-vector.cc	/^void CuVectorBase<Real>::InvertElements() {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::Max	cu-vector.cc	/^Real CuVectorBase<Real>::Max() const {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::Min	cu-vector.cc	/^Real CuVectorBase<Real>::Min() const {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::MulElements	cu-vector.cc	/^void CuVectorBase<Real>::MulElements(const CuVectorBase<Real> &v) {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::MulTp	cu-vector.cc	/^void CuVectorBase<Real>::MulTp(const CuTpMatrix<Real> &M, const MatrixTransposeType trans) {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::Norm	cu-vector.cc	/^Real CuVectorBase<Real>::Norm(BaseFloat p) {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::Range	cu-vector.h	/^  CuSubVector<Real> Range(const MatrixIndexT o, const MatrixIndexT l) {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::Range	cu-vector.h	/^  const CuSubVector<Real> Range(const MatrixIndexT o,$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::ReplaceValue	cu-vector.cc	/^void CuVectorBase<Real>::ReplaceValue(Real orig, Real changed) {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::Scale	cu-vector.cc	/^void CuVectorBase<Real>::Scale(Real value) {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::Set	cu-vector.cc	/^void CuVectorBase<Real>::Set(Real value) {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::SetRandn	cu-vector.cc	/^void CuVectorBase<Real>::SetRandn() {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::SetZero	cu-vector.cc	/^void CuVectorBase<Real>::SetZero() {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::Sum	cu-vector.cc	/^Real CuVectorBase<Real>::Sum() const {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::Vec	cu-vector.h	/^  inline VectorBase<Real> &Vec() {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::Vec	cu-vector.h	/^  inline const VectorBase<Real> &Vec() const {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::data_	cu-vector.h	/^  Real *data_; \/\/\/< GPU data pointer (or regular data pointer$/;"	m	class:kaldi::CuVectorBase
kaldi::CuVectorBase::dim_	cu-vector.h	/^  MatrixIndexT dim_; \/\/\/< dimension of the vector$/;"	m	class:kaldi::CuVectorBase
kaldi::CuVectorBase::operator ()	cu-vector.h	/^  inline CuValue<Real> operator() (MatrixIndexT i) {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorBase::operator ()	cu-vector.h	/^  inline Real operator() (MatrixIndexT i) const {$/;"	f	class:kaldi::CuVectorBase
kaldi::CuVectorUnitTest	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTest() {$/;"	f	namespace:kaldi
kaldi::CuVectorUnitTestAddColSumMat	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestAddColSumMat() {$/;"	f	namespace:kaldi
kaldi::CuVectorUnitTestAddDiagMat2	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestAddDiagMat2() {$/;"	f	namespace:kaldi
kaldi::CuVectorUnitTestAddDiagMatMat	cu-vector-test.cc	/^static void CuVectorUnitTestAddDiagMatMat() {$/;"	f	namespace:kaldi
kaldi::CuVectorUnitTestAddMatVec	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestAddMatVec() {$/;"	f	namespace:kaldi
kaldi::CuVectorUnitTestAddRowSumMat	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestAddRowSumMat() {$/;"	f	namespace:kaldi
kaldi::CuVectorUnitTestAddSpVec	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestAddSpVec() {$/;"	f	namespace:kaldi
kaldi::CuVectorUnitTestAddVec	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestAddVec() {$/;"	f	namespace:kaldi
kaldi::CuVectorUnitTestAddVecCross	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestAddVecCross() {$/;"	f	namespace:kaldi
kaldi::CuVectorUnitTestAddVecExtra	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestAddVecExtra() {$/;"	f	namespace:kaldi
kaldi::CuVectorUnitTestAddVecVec	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestAddVecVec() {$/;"	f	namespace:kaldi
kaldi::CuVectorUnitTestApplyExp	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestApplyExp() {$/;"	f	namespace:kaldi
kaldi::CuVectorUnitTestApplyFloor	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestApplyFloor() {$/;"	f	namespace:kaldi
kaldi::CuVectorUnitTestApplyLog	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestApplyLog() {$/;"	f	namespace:kaldi
kaldi::CuVectorUnitTestApplyPow	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestApplyPow() {$/;"	f	namespace:kaldi
kaldi::CuVectorUnitTestApplySoftMax	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestApplySoftMax() {$/;"	f	namespace:kaldi
kaldi::CuVectorUnitTestApproxEqual	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestApproxEqual() {$/;"	f	namespace:kaldi
kaldi::CuVectorUnitTestCopyCross	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestCopyCross() {$/;"	f	namespace:kaldi
kaldi::CuVectorUnitTestCopyCross2	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestCopyCross2() {$/;"	f	namespace:kaldi
kaldi::CuVectorUnitTestCopyDiagFromMat	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestCopyDiagFromMat() {$/;"	f	namespace:kaldi
kaldi::CuVectorUnitTestCopyDiagFromPacked	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestCopyDiagFromPacked() {$/;"	f	namespace:kaldi
kaldi::CuVectorUnitTestCopyFromMat	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestCopyFromMat() {$/;"	f	namespace:kaldi
kaldi::CuVectorUnitTestInvertElements	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestInvertElements() {$/;"	f	namespace:kaldi
kaldi::CuVectorUnitTestMax	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestMax() {$/;"	f	namespace:kaldi
kaldi::CuVectorUnitTestMin	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestMin() {$/;"	f	namespace:kaldi
kaldi::CuVectorUnitTestNorm	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestNorm() {$/;"	f	namespace:kaldi
kaldi::CuVectorUnitTestScale	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestScale() {$/;"	f	namespace:kaldi
kaldi::CuVectorUnitTestSum	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestSum() {$/;"	f	namespace:kaldi
kaldi::CuVectorUnitTestVecVec	cu-vector-test.cc	/^template<typename Real> void CuVectorUnitTestVecVec() {$/;"	f	namespace:kaldi
kaldi::CudaMathUnitTest	cu-math-test.cc	/^template<typename Real> void CudaMathUnitTest() {$/;"	f	namespace:kaldi
kaldi::CudaMatrixSpeedTest	cu-matrix-speed-test.cc	/^template<typename Real> void CudaMatrixSpeedTest() {$/;"	f	namespace:kaldi
kaldi::CudaMatrixUnitTest	cu-matrix-test.cc	/^template<typename Real> void CudaMatrixUnitTest() {$/;"	f	namespace:kaldi
kaldi::CudaPackedMatrixUnitTest	cu-packed-matrix-test.cc	/^template<typename Real> void CudaPackedMatrixUnitTest() {$/;"	f	namespace:kaldi
kaldi::CudaSpMatrixUnitTest	cu-sp-matrix-test.cc	/^template<typename Real, typename OtherReal> void CudaSpMatrixUnitTest() {$/;"	f	namespace:kaldi
kaldi::CudaSpMatrixUnitTest	cu-sp-matrix-test.cc	/^template<typename Real> void CudaSpMatrixUnitTest() {$/;"	f	namespace:kaldi
kaldi::CudaTpMatrixUnitTest	cu-tp-matrix-test.cc	/^template<typename Real> void CudaTpMatrixUnitTest() {$/;"	f	namespace:kaldi
kaldi::CudaVectorSpeedTest	cu-vector-speed-test.cc	/^template<typename Real> void CudaVectorSpeedTest() {$/;"	f	namespace:kaldi
kaldi::DoubleFactorial	cu-matrix-test.cc	/^static int32 DoubleFactorial(int32 i) {$/;"	f	namespace:kaldi
kaldi::InitRand	cu-matrix-test.cc	/^static void InitRand(MatrixBase<Real> *M) {$/;"	f	namespace:kaldi
kaldi::InitRand	cu-matrix-test.cc	/^static void InitRand(VectorBase<Real> *v) {$/;"	f	namespace:kaldi
kaldi::InitRand	cu-test.cc	/^static void InitRand(SpMatrix<Real> *M) {$/;"	f	namespace:kaldi
kaldi::InitRand	cu-test.cc	/^static void InitRand(VectorBase<Real> *v) {$/;"	f	namespace:kaldi
kaldi::KaldiTransToCuTrans	cu-common.cc	/^cublasOperation_t KaldiTransToCuTrans(MatrixTransposeType kaldi_trans) {$/;"	f	namespace:kaldi
kaldi::Matrix::Matrix	cu-matrix.h	/^Matrix<Real>::Matrix(const CuMatrixBase<OtherReal> &M,$/;"	f	class:kaldi::Matrix
kaldi::Matrix::Swap	cu-matrix.cc	/^void Matrix<Real>::Swap(CuMatrix<Real> *mat) { mat->Swap(this); }$/;"	f	class:kaldi::Matrix
kaldi::MatrixBase::CopyFromMat	cu-matrix.h	/^void MatrixBase<Real>::CopyFromMat(const CuMatrixBase<OtherReal> &cu,$/;"	f	class:kaldi::MatrixBase
kaldi::MatrixBase::CopyRowsFromVec	cu-vector.cc	/^void MatrixBase<Real>::CopyRowsFromVec(const CuVectorBase<Real> &v) {$/;"	f	class:kaldi::MatrixBase
kaldi::NameOf	cu-matrix-speed-test.cc	/^std::string NameOf() {$/;"	f	namespace:kaldi
kaldi::NameOf	cu-sp-matrix-speed-test.cc	/^std::string NameOf() {$/;"	f	namespace:kaldi
kaldi::NameOf	cu-vector-speed-test.cc	/^std::string NameOf() {$/;"	f	namespace:kaldi
kaldi::RandGaussMatrix	cu-matrix-test.cc	/^static void RandGaussMatrix(MatrixBase<Real>* mat) {$/;"	f	namespace:kaldi
kaldi::RandZeroToOneMatrix	cu-matrix-test.cc	/^static void RandZeroToOneMatrix(MatrixBase<Real>* mat) {$/;"	f	namespace:kaldi
kaldi::SameDim	cu-matrix.h	/^bool SameDim(const CuMatrixBase<Real> &M, const CuMatrixBase<Real> &N) {$/;"	f	namespace:kaldi
kaldi::SameDimAndStride	cu-matrix.h	/^bool SameDimAndStride(const CuMatrixBase<Real> &M, const CuMatrixBase<Real> &N) {$/;"	f	namespace:kaldi
kaldi::SpMatrix::SpMatrix	cu-sp-matrix.h	/^SpMatrix<Real>::SpMatrix(const CuSpMatrix<Real> &cu) {$/;"	f	class:kaldi::SpMatrix
kaldi::TestCuMatrixCopyLowerToUpper	cu-matrix-speed-test.cc	/^template<typename Real> void TestCuMatrixCopyLowerToUpper(int32 dim) {$/;"	f	namespace:kaldi
kaldi::TestCuMatrixCopyUpperToLower	cu-matrix-speed-test.cc	/^template<typename Real> void TestCuMatrixCopyUpperToLower(int32 dim) {$/;"	f	namespace:kaldi
kaldi::TestCuMatrixMatMat	cu-matrix-speed-test.cc	/^template<typename Real> void TestCuMatrixMatMat(int32 dim) {$/;"	f	namespace:kaldi
kaldi::TestCuMatrixSigmoid	cu-matrix-speed-test.cc	/^template<typename Real> void TestCuMatrixSigmoid(int32 dim) {$/;"	f	namespace:kaldi
kaldi::TestCuMatrixSoftmax	cu-matrix-speed-test.cc	/^template<typename Real> void TestCuMatrixSoftmax(int32 dim) {$/;"	f	namespace:kaldi
kaldi::TestCuMatrixTraceMatMat	cu-matrix-speed-test.cc	/^template<typename Real> void TestCuMatrixTraceMatMat(int32 dim) {$/;"	f	namespace:kaldi
kaldi::TestCuVectorAddDiagMatMat	cu-vector-speed-test.cc	/^template<typename Real> void TestCuVectorAddDiagMatMat(int32 dim) {$/;"	f	namespace:kaldi
kaldi::TestCuVectorSoftmax	cu-vector-speed-test.cc	/^template<typename Real> void TestCuVectorSoftmax(int32 dim) {$/;"	f	namespace:kaldi
kaldi::TestCuVectorSum	cu-vector-speed-test.cc	/^template<typename Real> void TestCuVectorSum(int32 dim) {$/;"	f	namespace:kaldi
kaldi::TestCuVectorVecVecOne	cu-vector-speed-test.cc	/^template<typename Real> void TestCuVectorVecVecOne(int32 dim) {$/;"	f	namespace:kaldi
kaldi::TpMatrix::CopyFromMat	cu-tp-matrix.cc	/^void TpMatrix<Real>::CopyFromMat(const CuTpMatrix<Real> &other) {$/;"	f	class:kaldi::TpMatrix
kaldi::TpMatrix::TpMatrix	cu-tp-matrix.cc	/^TpMatrix<Real>::TpMatrix(const CuTpMatrix<Real> &cu) {$/;"	f	class:kaldi::TpMatrix
kaldi::TraceMatMat	cu-matrix.cc	/^Real TraceMatMat(const CuMatrixBase<Real> &A,$/;"	f	namespace:kaldi
kaldi::TraceSpSp	cu-sp-matrix.cc	/^Real TraceSpSp(const CuSpMatrix<Real> &A, const CuSpMatrix<OtherReal> &B) {$/;"	f	namespace:kaldi
kaldi::UnitInvert	cu-test.cc	/^template<typename Real> static void UnitInvert() {$/;"	f	namespace:kaldi
kaldi::UnitTestCheck	cu-matrix-test.cc	/^template<typename Real> void UnitTestCheck() {$/;"	f	namespace:kaldi
kaldi::UnitTestCholesky	cu-test.cc	/^template<typename Real> static void UnitTestCholesky() {$/;"	f	namespace:kaldi
kaldi::UnitTestConstructor	cu-test.cc	/^template<typename Real> static void UnitTestConstructor() {$/;"	f	namespace:kaldi
kaldi::UnitTestCopyFromMat	cu-test.cc	/^template<typename Real> static void UnitTestCopyFromMat() {$/;"	f	namespace:kaldi
kaldi::UnitTestCopySp	cu-test.cc	/^template<typename Real> static void UnitTestCopySp() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuApproxEqual	cu-matrix-test.cc	/^static void UnitTestCuApproxEqual() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuArray	cu-array-test.cc	/^static void UnitTestCuArray() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuBlockMatrixAddMatBlock	cu-block-matrix-test.cc	/^static void UnitTestCuBlockMatrixAddMatBlock() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuBlockMatrixAddMatMat	cu-block-matrix-test.cc	/^static void UnitTestCuBlockMatrixAddMatMat() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuBlockMatrixIO	cu-block-matrix-test.cc	/^static void UnitTestCuBlockMatrixIO() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuCopy	cu-matrix-test.cc	/^static void UnitTestCuCopy() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuDiffSigmoid	cu-matrix-test.cc	/^static void UnitTestCuDiffSigmoid() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuDiffTanh	cu-matrix-test.cc	/^static void UnitTestCuDiffTanh() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuDiffXent	cu-matrix-test.cc	/^static void UnitTestCuDiffXent() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuFindRowMaxId	cu-matrix-test.cc	/^static void UnitTestCuFindRowMaxId() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMathCopy	cu-math-test.cc	/^static void UnitTestCuMathCopy() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMathRandomize	cu-math-test.cc	/^static void UnitTestCuMathRandomize() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMathSplice	cu-math-test.cc	/^static void UnitTestCuMathSplice() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixAdd	cu-matrix-test.cc	/^static void UnitTestCuMatrixAdd() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixAdd2	cu-matrix-test.cc	/^static void UnitTestCuMatrixAdd2() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixAddDiagVecMat	cu-matrix-test.cc	/^template<typename Real> static void UnitTestCuMatrixAddDiagVecMat() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixAddMat	cu-matrix-test.cc	/^static void UnitTestCuMatrixAddMat() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixAddMatMat	cu-matrix-test.cc	/^static void UnitTestCuMatrixAddMatMat() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixAddMatTp	cu-matrix-test.cc	/^static void UnitTestCuMatrixAddMatTp() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixAddToDiag	cu-matrix-test.cc	/^static void UnitTestCuMatrixAddToDiag() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixAddTpMat	cu-matrix-test.cc	/^static void UnitTestCuMatrixAddTpMat() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixAddVecToCols	cu-matrix-test.cc	/^static void UnitTestCuMatrixAddVecToCols() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixAddVecToRows	cu-matrix-test.cc	/^static void UnitTestCuMatrixAddVecToRows() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixApplyFloor	cu-matrix-test.cc	/^static void UnitTestCuMatrixApplyFloor() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixApplyHeaviside	cu-matrix-test.cc	/^static void UnitTestCuMatrixApplyHeaviside() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixApplyLog	cu-matrix-test.cc	/^static void UnitTestCuMatrixApplyLog() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixApplyPow	cu-matrix-test.cc	/^static void UnitTestCuMatrixApplyPow() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixApproxInvert	cu-sp-matrix-speed-test.cc	/^static void UnitTestCuMatrixApproxInvert(int32 dim) {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixCopyCols	cu-matrix-test.cc	/^static void UnitTestCuMatrixCopyCols() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixCopyCross	cu-matrix-test.cc	/^void UnitTestCuMatrixCopyCross() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixCopyCross2	cu-matrix-test.cc	/^template<typename Real> void UnitTestCuMatrixCopyCross2() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixCopyFromMat	cu-matrix-test.cc	/^static void UnitTestCuMatrixCopyFromMat() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixCopyFromTp	cu-matrix-test.cc	/^static void UnitTestCuMatrixCopyFromTp() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixCopyLowerToUpper	cu-matrix-test.cc	/^static void UnitTestCuMatrixCopyLowerToUpper() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixCopyRows	cu-matrix-test.cc	/^static void UnitTestCuMatrixCopyRows() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixCopyRowsFromVec	cu-matrix-test.cc	/^static void UnitTestCuMatrixCopyRowsFromVec() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixCopyUpperToLower	cu-matrix-test.cc	/^static void UnitTestCuMatrixCopyUpperToLower() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixDivRowsVec	cu-matrix-test.cc	/^static void UnitTestCuMatrixDivRowsVec() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixEqualElementMask	cu-matrix-test.cc	/^static void UnitTestCuMatrixEqualElementMask() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixGroupPnorm	cu-matrix-test.cc	/^static void UnitTestCuMatrixGroupPnorm() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixGroupPnormDeriv	cu-matrix-test.cc	/^static void UnitTestCuMatrixGroupPnormDeriv() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixIO	cu-matrix-test.cc	/^static void UnitTestCuMatrixIO() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixLookup	cu-matrix-test.cc	/^static void UnitTestCuMatrixLookup() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixMax	cu-matrix-test.cc	/^static void UnitTestCuMatrixMax() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixMulColsVec	cu-matrix-test.cc	/^static void UnitTestCuMatrixMulColsVec() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixMulElements	cu-matrix-test.cc	/^static void UnitTestCuMatrixMulElements() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixMulRowsGroupMat	cu-matrix-test.cc	/^static void UnitTestCuMatrixMulRowsGroupMat() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixMulRowsVec	cu-matrix-test.cc	/^static void UnitTestCuMatrixMulRowsVec() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixObjfDeriv	cu-matrix-test.cc	/^static void UnitTestCuMatrixObjfDeriv() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixScale	cu-matrix-test.cc	/^static void UnitTestCuMatrixScale() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixSet	cu-matrix-test.cc	/^static void UnitTestCuMatrixSet() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixSetRandUniform	cu-matrix-test.cc	/^static void UnitTestCuMatrixSetRandUniform() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixSetRandn	cu-matrix-test.cc	/^static void UnitTestCuMatrixSetRandn() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixSigmoid	cu-matrix-test.cc	/^static void UnitTestCuMatrixSigmoid() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixSoftHinge	cu-matrix-test.cc	/^static void UnitTestCuMatrixSoftHinge() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixSum	cu-matrix-test.cc	/^static void UnitTestCuMatrixSum() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixSumColumnRanges	cu-matrix-test.cc	/^static void UnitTestCuMatrixSumColumnRanges() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixSymAddMat2	cu-matrix-test.cc	/^static void UnitTestCuMatrixSymAddMat2() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixSymInvertPosDef	cu-matrix-test.cc	/^static void UnitTestCuMatrixSymInvertPosDef() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixTraceMatMat	cu-matrix-test.cc	/^static void UnitTestCuMatrixTraceMatMat() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuMatrixTranspose	cu-matrix-test.cc	/^static void UnitTestCuMatrixTranspose() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuPackedMatrixAddToDiag	cu-packed-matrix-test.cc	/^static void UnitTestCuPackedMatrixAddToDiag() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuPackedMatrixConstructor	cu-packed-matrix-test.cc	/^static void UnitTestCuPackedMatrixConstructor() { $/;"	f	namespace:kaldi
kaldi::UnitTestCuPackedMatrixCopy	cu-packed-matrix-test.cc	/^static void UnitTestCuPackedMatrixCopy() { $/;"	f	namespace:kaldi
kaldi::UnitTestCuPackedMatrixScale	cu-packed-matrix-test.cc	/^static void UnitTestCuPackedMatrixScale() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuPackedMatrixScaleDiag	cu-packed-matrix-test.cc	/^static void UnitTestCuPackedMatrixScaleDiag() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuPackedMatrixSetUnit	cu-packed-matrix-test.cc	/^static void UnitTestCuPackedMatrixSetUnit() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuPackedMatrixTrace	cu-packed-matrix-test.cc	/^static void UnitTestCuPackedMatrixTrace() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuSigmoid	cu-matrix-test.cc	/^static void UnitTestCuSigmoid() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuSoftmax	cu-matrix-test.cc	/^static void UnitTestCuSoftmax() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuSpMatrixAddMat2	cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixAddMat2() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuSpMatrixAddSp	cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixAddSp() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuSpMatrixAddToDiag	cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixAddToDiag() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuSpMatrixAddVec2	cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixAddVec2() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuSpMatrixApproxEqual	cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixApproxEqual() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuSpMatrixApproxInvert	cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixApproxInvert(int32 dim) {$/;"	f	namespace:kaldi
kaldi::UnitTestCuSpMatrixConstructor	cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixConstructor() { $/;"	f	namespace:kaldi
kaldi::UnitTestCuSpMatrixCopyFromMat	cu-sp-matrix-speed-test.cc	/^static void UnitTestCuSpMatrixCopyFromMat(int32 dim, SpCopyType copy_type) {$/;"	f	namespace:kaldi
kaldi::UnitTestCuSpMatrixCopyFromMat	cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixCopyFromMat() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuSpMatrixIO	cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixIO() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuSpMatrixInvert	cu-sp-matrix-speed-test.cc	/^static void UnitTestCuSpMatrixInvert(int32 dim) {$/;"	f	namespace:kaldi
kaldi::UnitTestCuSpMatrixInvert	cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixInvert() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuSpMatrixOperator	cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixOperator() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuSpMatrixSetUnit	cu-sp-matrix-test.cc	/^void UnitTestCuSpMatrixSetUnit() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuSpMatrixTraceSpSp	cu-sp-matrix-test.cc	/^static void UnitTestCuSpMatrixTraceSpSp() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuSubMatrix	cu-matrix-test.cc	/^static void UnitTestCuSubMatrix() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuSubVector	cu-vector-test.cc	/^static void UnitTestCuSubVector() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuTanh	cu-matrix-test.cc	/^void UnitTestCuTanh() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuTpMatrixCholesky	cu-tp-matrix-test.cc	/^static void UnitTestCuTpMatrixCholesky() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuTpMatrixCopyFromMat	cu-tp-matrix-test.cc	/^static void UnitTestCuTpMatrixCopyFromMat() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuTpMatrixCopyFromTp	cu-tp-matrix-test.cc	/^static void UnitTestCuTpMatrixCopyFromTp() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuTpMatrixIO	cu-tp-matrix-test.cc	/^static void UnitTestCuTpMatrixIO() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuTpMatrixInvert	cu-tp-matrix-test.cc	/^static void UnitTestCuTpMatrixInvert() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuVectorAddColSumMat	cu-matrix-test.cc	/^static void UnitTestCuVectorAddColSumMat() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuVectorAddColSumMatLarge	cu-matrix-test.cc	/^static void UnitTestCuVectorAddColSumMatLarge() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuVectorAddRowSumMat	cu-matrix-test.cc	/^static void UnitTestCuVectorAddRowSumMat() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuVectorAddRowSumMatLarge	cu-matrix-test.cc	/^static void UnitTestCuVectorAddRowSumMatLarge() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuVectorAddTp	cu-vector-test.cc	/^static void UnitTestCuVectorAddTp() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuVectorAddTpVec	cu-matrix-test.cc	/^static void UnitTestCuVectorAddTpVec() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuVectorAddVec	cu-matrix-test.cc	/^static void UnitTestCuVectorAddVec() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuVectorCopyFromVec	cu-vector-test.cc	/^static void UnitTestCuVectorCopyFromVec() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuVectorIO	cu-vector-test.cc	/^static void UnitTestCuVectorIO() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuVectorInvertElements	cu-matrix-test.cc	/^static void UnitTestCuVectorInvertElements() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuVectorMulTp	cu-matrix-test.cc	/^static void UnitTestCuVectorMulTp() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuVectorMulTp	cu-vector-test.cc	/^static void UnitTestCuVectorMulTp() {$/;"	f	namespace:kaldi
kaldi::UnitTestCuVectorReplaceValue	cu-vector-test.cc	/^template<typename Real> static void UnitTestCuVectorReplaceValue() {$/;"	f	namespace:kaldi
kaldi::UnitTestInvert	cu-test.cc	/^template<typename Real> static void UnitTestInvert() {$/;"	f	namespace:kaldi
kaldi::UnitTestMatrix	cu-test.cc	/^template<typename Real> static void UnitTestMatrix() {$/;"	f	namespace:kaldi
kaldi::UnitTestMulTp	cu-test.cc	/^template<typename Real> static void UnitTestMulTp() {$/;"	f	namespace:kaldi
kaldi::UnitTestSetZeroUpperDiag	cu-test.cc	/^static void UnitTestSetZeroUpperDiag() {$/;"	f	namespace:kaldi
kaldi::UnitTestSwapCu2Cu	cu-matrix-test.cc	/^void UnitTestSwapCu2Cu() {$/;"	f	namespace:kaldi
kaldi::UnitTestSwapCu2M	cu-matrix-test.cc	/^void UnitTestSwapCu2M() {$/;"	f	namespace:kaldi
kaldi::UnitTestTrace	cu-test.cc	/^template<typename Real> static void UnitTestTrace() {$/;"	f	namespace:kaldi
kaldi::UnitTestVector	cu-test.cc	/^template<typename Real> static void UnitTestVector() {$/;"	f	namespace:kaldi
kaldi::VecVec	cu-vector.cc	/^Real VecVec(const CuVectorBase<Real> &A, const CuVectorBase<OtherReal> &B) {$/;"	f	namespace:kaldi
kaldi::VecVec	cu-vector.cc	/^Real VecVec(const CuVectorBase<Real> &a,$/;"	f	namespace:kaldi
kaldi::Vector::Vector	cu-vector.h	/^Vector<Real>::Vector(const CuVectorBase<OtherReal> &cu) {$/;"	f	class:kaldi::Vector
kaldi::VectorBase::CopyFromVec	cu-vector.h	/^void VectorBase<Real>::CopyFromVec(const CuVectorBase<OtherReal> &cu) {$/;"	f	class:kaldi::VectorBase
kaldi::VectorBase::CopyRowsFromMat	cu-matrix.cc	/^void VectorBase<Real>::CopyRowsFromMat(const CuMatrixBase<Real> &mat) {$/;"	f	class:kaldi::VectorBase
kaldi::cu	cu-math.cc	/^namespace cu {$/;"	n	namespace:kaldi	file:
kaldi::cu	cu-math.h	/^namespace cu {$/;"	n	namespace:kaldi
kaldi::cu::Copy	cu-math.cc	/^void Copy(const CuMatrix<Real> &src, const CuArray<int32> &copy_from_indices, CuMatrix<Real> *tgt) { $/;"	f	namespace:kaldi::cu
kaldi::cu::Randomize	cu-math.cc	/^void Randomize(const CuMatrixBase<Real> &src,$/;"	f	namespace:kaldi::cu
kaldi::cu::RegularizeL1	cu-math.cc	/^void RegularizeL1(CuMatrixBase<Real> *weight, CuMatrixBase<Real> *grad, Real l1, Real lr) {$/;"	f	namespace:kaldi::cu
kaldi::cu::Splice	cu-math.cc	/^void Splice(const CuMatrix<Real> &src, const CuArray<int32> &frame_offsets, CuMatrix<Real> *tgt) {$/;"	f	namespace:kaldi::cu
kaldi::cublas_asum	cublas-wrappers.h	/^inline double cublas_asum(int n, const double* x, int incx) {$/;"	f	namespace:kaldi
kaldi::cublas_asum	cublas-wrappers.h	/^inline float cublas_asum(int n, const float* x, int incx) {$/;"	f	namespace:kaldi
kaldi::cublas_axpy	cublas-wrappers.h	/^inline void cublas_axpy(int n, double alpha, const double* x, int incx, double* y, int incy) {$/;"	f	namespace:kaldi
kaldi::cublas_axpy	cublas-wrappers.h	/^inline void cublas_axpy(int n, float alpha, const float* x, int incx, float* y, int incy) {$/;"	f	namespace:kaldi
kaldi::cublas_copy	cublas-wrappers.h	/^inline void cublas_copy(int n, const double* x, int incx,$/;"	f	namespace:kaldi
kaldi::cublas_copy	cublas-wrappers.h	/^inline void cublas_copy(int n, const float* x, int incx,$/;"	f	namespace:kaldi
kaldi::cublas_dot	cublas-wrappers.h	/^inline double cublas_dot(int n, const double *x, int incx, const double *y, int incy) {$/;"	f	namespace:kaldi
kaldi::cublas_dot	cublas-wrappers.h	/^inline float cublas_dot(int n, const float *x, int incx, const float *y, int incy) {$/;"	f	namespace:kaldi
kaldi::cublas_gemm	cublas-wrappers.h	/^inline void cublas_gemm(char transa, char transb, int m, int n,int k, double alpha, const double *A, int lda,const double *B, int ldb, double beta, double *C, int ldc) {$/;"	f	namespace:kaldi
kaldi::cublas_gemm	cublas-wrappers.h	/^inline void cublas_gemm(char transa, char transb, int m, int n,int k, float alpha, const float *A, int lda,const float *B, int ldb, float beta, float *C, int ldc) {$/;"	f	namespace:kaldi
kaldi::cublas_gemv	cublas-wrappers.h	/^inline void cublas_gemv(char trans, int m, int n, double alpha,$/;"	f	namespace:kaldi
kaldi::cublas_gemv	cublas-wrappers.h	/^inline void cublas_gemv(char trans, int m, int n, float alpha,$/;"	f	namespace:kaldi
kaldi::cublas_nrm2	cublas-wrappers.h	/^inline double cublas_nrm2(int n, const double* x, int incx) {$/;"	f	namespace:kaldi
kaldi::cublas_nrm2	cublas-wrappers.h	/^inline float cublas_nrm2(int n, const float* x, int incx) {$/;"	f	namespace:kaldi
kaldi::cublas_scal	cublas-wrappers.h	/^inline void cublas_scal(int n, double alpha, double* mat, int incx) {$/;"	f	namespace:kaldi
kaldi::cublas_scal	cublas-wrappers.h	/^inline void cublas_scal(int n, float alpha, float* mat, int incx) {$/;"	f	namespace:kaldi
kaldi::cublas_spmv	cublas-wrappers.h	/^inline void cublas_spmv(char uplo, int n, double alpha, const double *AP, const double *x,$/;"	f	namespace:kaldi
kaldi::cublas_spmv	cublas-wrappers.h	/^inline void cublas_spmv(char uplo, int n, float alpha, const float *AP, const float *x,$/;"	f	namespace:kaldi
kaldi::cublas_spr	cublas-wrappers.h	/^inline void cublas_spr(char uplo, int n, double alpha, const double *x,$/;"	f	namespace:kaldi
kaldi::cublas_spr	cublas-wrappers.h	/^inline void cublas_spr(char uplo, int n, float alpha, const float *x,$/;"	f	namespace:kaldi
kaldi::cublas_syrk	cublas-wrappers.h	/^inline void cublas_syrk(char uplo, char trans, int n, int k,$/;"	f	namespace:kaldi
kaldi::cublas_tpmv	cublas-wrappers.h	/^inline void cublas_tpmv(char trans, int n, const double* Ap,$/;"	f	namespace:kaldi
kaldi::cublas_tpmv	cublas-wrappers.h	/^inline void cublas_tpmv(char trans, int n,$/;"	f	namespace:kaldi
kaldi::cublas_trsm	cublas-wrappers.h	/^inline void cublas_trsm(int m, int n, double alpha, const double* A, int lda, double* B, int ldb) {$/;"	f	namespace:kaldi
kaldi::cublas_trsm	cublas-wrappers.h	/^inline void cublas_trsm(int m, int n, float alpha, const float* A, int lda, float* B, int ldb) {$/;"	f	namespace:kaldi
kaldi::cuda_add	cu-kernels.h	/^inline void cuda_add(dim3 Gr, dim3 Bl, double *mat, double value, MatrixDim d) { cudaD_add(Gr,Bl,mat,value,d); }$/;"	f	namespace:kaldi
kaldi::cuda_add	cu-kernels.h	/^inline void cuda_add(dim3 Gr, dim3 Bl, float *mat, float value, MatrixDim d) { cudaF_add(Gr,Bl,mat,value,d); }$/;"	f	namespace:kaldi
kaldi::cuda_add_col_sum_mat	cu-kernels.h	/^inline void cuda_add_col_sum_mat(dim3 Gr, dim3 Bl, const double *mat, double *vec_sum, MatrixDim d) { cudaD_add_col_sum_mat(Gr,Bl,mat,vec_sum,d); }$/;"	f	namespace:kaldi
kaldi::cuda_add_col_sum_mat	cu-kernels.h	/^inline void cuda_add_col_sum_mat(dim3 Gr, dim3 Bl, const float *mat, float *vec_sum, MatrixDim d) { cudaF_add_col_sum_mat(Gr,Bl,mat,vec_sum,d); }$/;"	f	namespace:kaldi
kaldi::cuda_add_diag_mat	cu-kernels.h	/^inline void cuda_add_diag_mat(int Gr, int Bl, double alpha, double* v, const double* mat, double beta, MatrixDim dmat, int dim) { cudaD_add_diag_mat(Gr,Bl,alpha,v,mat,beta,dmat,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_add_diag_mat	cu-kernels.h	/^inline void cuda_add_diag_mat(int Gr, int Bl, float alpha, float* v, const float* mat, float beta, MatrixDim dmat, int dim) { cudaF_add_diag_mat(Gr,Bl,alpha,v,mat,beta,dmat,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_add_diag_mat_mat	cu-kernels.h	/^inline void cuda_add_diag_mat_mat(int Gr, int Bl, double alpha, double* v, int v_dim, const double* M, $/;"	f	namespace:kaldi
kaldi::cuda_add_diag_mat_mat	cu-kernels.h	/^inline void cuda_add_diag_mat_mat(int Gr, int Bl, float alpha, float* v, int v_dim, const float* M, $/;"	f	namespace:kaldi
kaldi::cuda_add_diag_mat_trans	cu-kernels.h	/^inline void cuda_add_diag_mat_trans(int Gr, int Bl, double alpha, double* v, const double* mat, double beta, MatrixDim dmat, int dim) { cudaD_add_diag_mat_trans(Gr,Bl,alpha,v,mat,beta,dmat,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_add_diag_mat_trans	cu-kernels.h	/^inline void cuda_add_diag_mat_trans(int Gr, int Bl, float alpha, float* v, const float* mat, float beta, MatrixDim dmat, int dim) { cudaF_add_diag_mat_trans(Gr,Bl,alpha,v,mat,beta,dmat,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_add_diag_packed	cu-kernels.h	/^inline void cuda_add_diag_packed(int Gr, int Bl, double* mat, double value, int dim) { cudaD_add_diag_packed(Gr,Bl,mat,value,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_add_diag_packed	cu-kernels.h	/^inline void cuda_add_diag_packed(int Gr, int Bl, float* mat, float value, int dim) { cudaF_add_diag_packed(Gr,Bl,mat,value,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_add_diag_vec_mat	cu-kernels.h	/^inline void cuda_add_diag_vec_mat(dim3 Gr, dim3 Bl, double alpha, double *mat, MatrixDim mat_dim,$/;"	f	namespace:kaldi
kaldi::cuda_add_diag_vec_mat	cu-kernels.h	/^inline void cuda_add_diag_vec_mat(dim3 Gr, dim3 Bl, float alpha, float *mat, MatrixDim mat_dim,$/;"	f	namespace:kaldi
kaldi::cuda_add_mat	cu-kernels.h	/^inline void cuda_add_mat(dim3 Gr, dim3 Bl, double alpha, const double *src, double beta, double *dst, MatrixDim d, int src_stride) { cudaD_add_mat(Gr,Bl,alpha,src,beta,dst,d,src_stride); }$/;"	f	namespace:kaldi
kaldi::cuda_add_mat	cu-kernels.h	/^inline void cuda_add_mat(dim3 Gr, dim3 Bl, float alpha, const float *src, float beta, float *dst, MatrixDim d, int src_stride) { cudaF_add_mat(Gr,Bl,alpha,src,beta,dst,d,src_stride); }$/;"	f	namespace:kaldi
kaldi::cuda_add_mat_blockmat	cu-kernels.h	/^inline void cuda_add_mat_blockmat(dim3 Gr, dim3 Bl, double *data, MatrixDim d, const double *Adata,$/;"	f	namespace:kaldi
kaldi::cuda_add_mat_blockmat	cu-kernels.h	/^inline void cuda_add_mat_blockmat(dim3 Gr, dim3 Bl, float *data, MatrixDim d, const float *Adata,$/;"	f	namespace:kaldi
kaldi::cuda_add_mat_mat_div_mat	cu-kernels.h	/^inline void cuda_add_mat_mat_div_mat(dim3 Gr, dim3 Bl, const double *A, const double *B, const double *C, double *dst, MatrixDim d) { cudaD_add_mat_mat_div_mat(Gr,Bl,A,B,C,dst,d); }$/;"	f	namespace:kaldi
kaldi::cuda_add_mat_mat_div_mat	cu-kernels.h	/^inline void cuda_add_mat_mat_div_mat(dim3 Gr, dim3 Bl, const float *A, const float *B, const float *C, float *dst, MatrixDim d) { cudaF_add_mat_mat_div_mat(Gr,Bl,A,B,C,dst,d); }$/;"	f	namespace:kaldi
kaldi::cuda_add_row_sum_mat	cu-kernels.h	/^inline void cuda_add_row_sum_mat(dim3 Gr, dim3 Bl, const double *mat, double *vec_sum, MatrixDim d) { cudaD_add_row_sum_mat(Gr,Bl,mat,vec_sum,d); }$/;"	f	namespace:kaldi
kaldi::cuda_add_row_sum_mat	cu-kernels.h	/^inline void cuda_add_row_sum_mat(dim3 Gr, dim3 Bl, const float *mat, float *vec_sum, MatrixDim d) { cudaF_add_row_sum_mat(Gr,Bl,mat,vec_sum,d); }$/;"	f	namespace:kaldi
kaldi::cuda_add_vec2	cu-kernels.h	/^inline void cuda_add_vec2(dim3 Gr, dim3 Bl, double *mat, const double *vec, const double alpha, int dim) { cudaD_add_vec2(Gr,Bl,mat,vec,alpha,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_add_vec2	cu-kernels.h	/^inline void cuda_add_vec2(dim3 Gr, dim3 Bl, float *mat, const float *vec, const float alpha, int dim) { cudaF_add_vec2(Gr,Bl,mat,vec,alpha,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_add_vec_to_cols	cu-kernels.h	/^inline void cuda_add_vec_to_cols(dim3 Gr, dim3 Bl, double alpha, const double *col, double beta, double *dst, MatrixDim d) { cudaD_add_vec_to_cols(Gr,Bl,alpha,col,beta,dst,d); }$/;"	f	namespace:kaldi
kaldi::cuda_add_vec_to_cols	cu-kernels.h	/^inline void cuda_add_vec_to_cols(dim3 Gr, dim3 Bl, float alpha, const float *col, float beta, float *dst, MatrixDim d) { cudaF_add_vec_to_cols(Gr,Bl,alpha,col,beta,dst,d); }$/;"	f	namespace:kaldi
kaldi::cuda_add_vec_to_rows	cu-kernels.h	/^inline void cuda_add_vec_to_rows(dim3 Gr, dim3 Bl, double alpha, const double *row, double beta, double *dst, MatrixDim d) { cudaD_add_vec_to_rows(Gr,Bl,alpha,row,beta,dst,d); }$/;"	f	namespace:kaldi
kaldi::cuda_add_vec_to_rows	cu-kernels.h	/^inline void cuda_add_vec_to_rows(dim3 Gr, dim3 Bl, float alpha, const float *row, float beta, float *dst, MatrixDim d) { cudaF_add_vec_to_rows(Gr,Bl,alpha,row,beta,dst,d); }$/;"	f	namespace:kaldi
kaldi::cuda_add_vec_vec	cu-kernels.h	/^inline void cuda_add_vec_vec(int Gr, int Bl, double alpha, double* v, const double* x, const double* y, double beta, int dim) { cudaD_add_vec_vec(Gr,Bl,alpha,v,x,y,beta,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_add_vec_vec	cu-kernels.h	/^inline void cuda_add_vec_vec(int Gr, int Bl, float alpha, float* v, const float* x, const float* y, float beta, int dim) { cudaF_add_vec_vec(Gr,Bl,alpha,v,x,y,beta,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_apply_ceiling	cu-kernels.h	/^inline void cuda_apply_ceiling(dim3 Gr, dim3 Bl, double* mat, double ceiling_val, MatrixDim dim) { cudaD_apply_ceiling(Gr,Bl,mat,ceiling_val,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_apply_ceiling	cu-kernels.h	/^inline void cuda_apply_ceiling(dim3 Gr, dim3 Bl, float* mat, float ceiling_val, MatrixDim dim) { cudaF_apply_ceiling(Gr,Bl,mat,ceiling_val,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_apply_exp	cu-kernels.h	/^inline void cuda_apply_exp(dim3 Gr, dim3 Bl, double* mat, MatrixDim d) { cudaD_apply_exp(Gr,Bl,mat,d); }$/;"	f	namespace:kaldi
kaldi::cuda_apply_exp	cu-kernels.h	/^inline void cuda_apply_exp(dim3 Gr, dim3 Bl, float* mat, MatrixDim d) { cudaF_apply_exp(Gr,Bl,mat,d); }$/;"	f	namespace:kaldi
kaldi::cuda_apply_floor	cu-kernels.h	/^inline void cuda_apply_floor(dim3 Gr, dim3 Bl, double* mat, double floor_val, MatrixDim dim) { cudaD_apply_floor(Gr,Bl,mat,floor_val,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_apply_floor	cu-kernels.h	/^inline void cuda_apply_floor(dim3 Gr, dim3 Bl, float* mat, float floor_val, MatrixDim dim) { cudaF_apply_floor(Gr,Bl,mat,floor_val,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_apply_heaviside	cu-kernels.h	/^inline void cuda_apply_heaviside(dim3 Gr, dim3 Bl, double* mat, MatrixDim dim) { cudaD_apply_heaviside(Gr,Bl,mat,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_apply_heaviside	cu-kernels.h	/^inline void cuda_apply_heaviside(dim3 Gr, dim3 Bl, float* mat, MatrixDim dim) { cudaF_apply_heaviside(Gr,Bl,mat,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_apply_log	cu-kernels.h	/^inline void cuda_apply_log(dim3 Gr, dim3 Bl, double *mat, MatrixDim d) { cudaD_apply_log(Gr,Bl,mat,d); }$/;"	f	namespace:kaldi
kaldi::cuda_apply_log	cu-kernels.h	/^inline void cuda_apply_log(dim3 Gr, dim3 Bl, float *mat, MatrixDim d) { cudaF_apply_log(Gr,Bl,mat,d); }$/;"	f	namespace:kaldi
kaldi::cuda_apply_pow	cu-kernels.h	/^inline void cuda_apply_pow(dim3 Gr, dim3 Bl, double* mat, double power, MatrixDim dim) { cudaD_apply_pow(Gr,Bl,mat,power,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_apply_pow	cu-kernels.h	/^inline void cuda_apply_pow(dim3 Gr, dim3 Bl, float* mat, float power, MatrixDim dim) { cudaF_apply_pow(Gr,Bl,mat,power,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_axpy	cu-kernels.h	/^inline void cuda_axpy(int n, double alpha, const double *x, int incx, double *y, int incy) {$/;"	f	namespace:kaldi
kaldi::cuda_axpy	cu-kernels.h	/^inline void cuda_axpy(int n, float alpha, const float *x, int incx, float *y, int incy) {$/;"	f	namespace:kaldi
kaldi::cuda_binarize_probs	cu-randkernels.h	/^template<> inline void cuda_binarize_probs<double>(dim3 Gr, dim3 Bl, double *states, const double *probs, double *rand, MatrixDim d) { cudaD_binarize_probs(Gr,Bl,states,probs,rand,d); } $/;"	f	namespace:kaldi
kaldi::cuda_binarize_probs	cu-randkernels.h	/^template<> inline void cuda_binarize_probs<float>(dim3 Gr, dim3 Bl, float *states, const float *probs, float *rand, MatrixDim d) { cudaF_binarize_probs(Gr,Bl,states,probs,rand,d); } $/;"	f	namespace:kaldi
kaldi::cuda_binarize_probs	cu-randkernels.h	/^template<typename Real> inline void cuda_binarize_probs(dim3 Gr, dim3 Bl, Real *states, const Real *probs, Real *rand, MatrixDim d) { KALDI_ERR << __func__ << " Not implemented!"; }$/;"	f	namespace:kaldi
kaldi::cuda_block_add_mat_mat	cu-kernels.h	/^inline void cuda_block_add_mat_mat(dim3 Gr, dim3 Bl, CuBlockMatrixData *B_cu_data, int num_blocks,$/;"	f	namespace:kaldi
kaldi::cuda_calc_pnorm_deriv	cu-kernels.h	/^inline void cuda_calc_pnorm_deriv(dim3 Gr, dim3 Bl, double *y, const double *x1, const double *x2,  MatrixDim d, int src_stride, int group_size, double power) {cudaD_calc_pnorm_deriv(Gr, Bl, y, x1, x2, d, src_stride, group_size, power); }$/;"	f	namespace:kaldi
kaldi::cuda_calc_pnorm_deriv	cu-kernels.h	/^inline void cuda_calc_pnorm_deriv(dim3 Gr, dim3 Bl, float *y, const float *x1, const float *x2,  MatrixDim d, int src_stride, int group_size, float power) {cudaF_calc_pnorm_deriv(Gr, Bl, y, x1, x2, d, src_stride, group_size, power); }$/;"	f	namespace:kaldi
kaldi::cuda_comp_obj_deriv	cu-kernels.h	/^inline void cuda_comp_obj_deriv(dim3 Gr, dim3 Bl, MatrixElement<double>* x, int32 size, const double* z, MatrixDim d, double* z2, MatrixDim d2, double* t) {cudaD_comp_obj_deriv(Gr,Bl,x,size,z,d,z2,d2,t); }$/;"	f	namespace:kaldi
kaldi::cuda_comp_obj_deriv	cu-kernels.h	/^inline void cuda_comp_obj_deriv(dim3 Gr, dim3 Bl, MatrixElement<float>* x, int32 size, const float* z, MatrixDim d, float* z2, MatrixDim d2, float* t) {cudaF_comp_obj_deriv(Gr,Bl,x,size,z,d,z2,d2,t); }$/;"	f	namespace:kaldi
kaldi::cuda_copy	cu-kernels.h	/^inline void cuda_copy(dim3 Gr, dim3 Bl, double *y, const double *x, const int32_cuda *copy_from, MatrixDim d_out, MatrixDim d_in) { cudaD_copy(Gr,Bl,y,x,copy_from,d_out,d_in); }$/;"	f	namespace:kaldi
kaldi::cuda_copy	cu-kernels.h	/^inline void cuda_copy(dim3 Gr, dim3 Bl, float *y, const float *x, const int32_cuda *copy_from, MatrixDim d_out, MatrixDim d_in) { cudaF_copy(Gr,Bl,y,x,copy_from,d_out,d_in); }$/;"	f	namespace:kaldi
kaldi::cuda_copy_col_from_mat	cu-kernels.h	/^inline void cuda_copy_col_from_mat(int Gr, int Bl, double* v, int col, const double* mat, MatrixDim dmat, int dim) { cudaD_copy_col_from_mat(Gr,Bl,v,col,mat,dmat,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_copy_col_from_mat	cu-kernels.h	/^inline void cuda_copy_col_from_mat(int Gr, int Bl, float* v, int col, const float* mat, MatrixDim dmat, int dim) { cudaF_copy_col_from_mat(Gr,Bl,v,col,mat,dmat,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_copy_col_from_mat_df	cu-kernels.h	/^inline void cuda_copy_col_from_mat_df(int Gr, int Bl, double* v, int col, const double* mat, MatrixDim dmat, int dim) { cudaD_copy_col_from_mat_df(Gr,Bl,v,col,mat,dmat,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_copy_col_from_mat_df	cu-kernels.h	/^inline void cuda_copy_col_from_mat_df(int Gr, int Bl, double* v, int col, const float* mat, MatrixDim dmat, int dim) { cudaF_copy_col_from_mat_df(Gr,Bl,v,col,mat,dmat,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_copy_col_from_mat_fd	cu-kernels.h	/^inline void cuda_copy_col_from_mat_fd(int Gr, int Bl, float* v, int col, const double* mat, MatrixDim dmat, int dim) { cudaD_copy_col_from_mat_fd(Gr,Bl,v,col,mat,dmat,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_copy_col_from_mat_fd	cu-kernels.h	/^inline void cuda_copy_col_from_mat_fd(int Gr, int Bl, float* v, int col, const float* mat, MatrixDim dmat, int dim) { cudaF_copy_col_from_mat_fd(Gr,Bl,v,col,mat,dmat,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_copy_col_from_vec	cu-kernels.h	/^inline void cuda_copy_col_from_vec(int Gr, int Bl, double* mat, const double* v, int col, MatrixDim d) { cudaD_copy_col_from_vec(Gr,Bl,mat,v,col,d); }$/;"	f	namespace:kaldi
kaldi::cuda_copy_col_from_vec	cu-kernels.h	/^inline void cuda_copy_col_from_vec(int Gr, int Bl, float* mat, const float* v, int col, MatrixDim d) { cudaF_copy_col_from_vec(Gr,Bl,mat,v,col,d); }$/;"	f	namespace:kaldi
kaldi::cuda_copy_cols	cu-kernels.h	/^inline void cuda_copy_cols(dim3 Gr, dim3 Bl, double* dst, const double* src, const MatrixIndexT_cuda* reorder, MatrixDim dst_dim, int src_stride) {$/;"	f	namespace:kaldi
kaldi::cuda_copy_cols	cu-kernels.h	/^inline void cuda_copy_cols(dim3 Gr, dim3 Bl, float* dst, const float* src, const MatrixIndexT_cuda* reorder, MatrixDim dst_dim, int src_stride) {$/;"	f	namespace:kaldi
kaldi::cuda_copy_from_mat	cu-kernels.h	/^inline void cuda_copy_from_mat(dim3 Gr, dim3 Bl, double* mat_out, const double* mat_in, MatrixDim d_out, MatrixDim d_in) {$/;"	f	namespace:kaldi
kaldi::cuda_copy_from_mat	cu-kernels.h	/^inline void cuda_copy_from_mat(dim3 Gr, dim3 Bl, double* mat_out, const float* mat_in, MatrixDim d_out, MatrixDim d_in) {$/;"	f	namespace:kaldi
kaldi::cuda_copy_from_mat	cu-kernels.h	/^inline void cuda_copy_from_mat(dim3 Gr, dim3 Bl, float* mat_out, const double* mat_in, MatrixDim d_out, MatrixDim d_in) {$/;"	f	namespace:kaldi
kaldi::cuda_copy_from_mat	cu-kernels.h	/^inline void cuda_copy_from_mat(dim3 Gr, dim3 Bl, float* mat_out, const float* mat_in, MatrixDim d_out, MatrixDim d_in) {$/;"	f	namespace:kaldi
kaldi::cuda_copy_from_mat_trans	cu-kernels.h	/^inline void cuda_copy_from_mat_trans(dim3 Gr, dim3 Bl, double* mat_out, const double* mat_in, MatrixDim d_out, MatrixDim d_in) {$/;"	f	namespace:kaldi
kaldi::cuda_copy_from_mat_trans	cu-kernels.h	/^inline void cuda_copy_from_mat_trans(dim3 Gr, dim3 Bl, double* mat_out, const float* mat_in, MatrixDim d_out, MatrixDim d_in) {$/;"	f	namespace:kaldi
kaldi::cuda_copy_from_mat_trans	cu-kernels.h	/^inline void cuda_copy_from_mat_trans(dim3 Gr, dim3 Bl, float* mat_out, const double* mat_in, MatrixDim d_out, MatrixDim d_in) {$/;"	f	namespace:kaldi
kaldi::cuda_copy_from_mat_trans	cu-kernels.h	/^inline void cuda_copy_from_mat_trans(dim3 Gr, dim3 Bl, float* mat_out, const float* mat_in, MatrixDim d_out, MatrixDim d_in) {$/;"	f	namespace:kaldi
kaldi::cuda_copy_from_sp	cu-kernels.h	/^inline void cuda_copy_from_sp(int Gr, int Bl, const double* x, double* y, int d_in, MatrixDim d_out) { cudaD_copy_from_sp(Gr,Bl,x,y,d_in,d_out); }$/;"	f	namespace:kaldi
kaldi::cuda_copy_from_sp	cu-kernels.h	/^inline void cuda_copy_from_sp(int Gr, int Bl, const float* x, float* y, int d_in, MatrixDim d_out) { cudaF_copy_from_sp(Gr,Bl,x,y,d_in,d_out); }$/;"	f	namespace:kaldi
kaldi::cuda_copy_from_tp	cu-kernels.h	/^inline void cuda_copy_from_tp(int Gr, int Bl, double* A, const double* B, MatrixDim dmat) { cudaD_copy_from_tp(Gr,Bl,A,B,dmat); }$/;"	f	namespace:kaldi
kaldi::cuda_copy_from_tp	cu-kernels.h	/^inline void cuda_copy_from_tp(int Gr, int Bl, double* A, const float* B, MatrixDim dmat) { cudaDF_copy_from_tp(Gr,Bl,A,B,dmat); }$/;"	f	namespace:kaldi
kaldi::cuda_copy_from_tp	cu-kernels.h	/^inline void cuda_copy_from_tp(int Gr, int Bl, float* A, const double* B, MatrixDim dmat) { cudaFD_copy_from_tp(Gr,Bl,A,B,dmat); }$/;"	f	namespace:kaldi
kaldi::cuda_copy_from_tp	cu-kernels.h	/^inline void cuda_copy_from_tp(int Gr, int Bl, float* A, const float* B, MatrixDim dmat) { cudaF_copy_from_tp(Gr,Bl,A,B,dmat); }$/;"	f	namespace:kaldi
kaldi::cuda_copy_from_tp_trans	cu-kernels.h	/^inline void cuda_copy_from_tp_trans(int Gr, int Bl, double* A, const double* B, MatrixDim dmat) { cudaD_copy_from_tp_trans(Gr,Bl,A,B,dmat); }$/;"	f	namespace:kaldi
kaldi::cuda_copy_from_tp_trans	cu-kernels.h	/^inline void cuda_copy_from_tp_trans(int Gr, int Bl, double* A, const float* B, MatrixDim dmat) { cudaDF_copy_from_tp_trans(Gr,Bl,A,B,dmat); }$/;"	f	namespace:kaldi
kaldi::cuda_copy_from_tp_trans	cu-kernels.h	/^inline void cuda_copy_from_tp_trans(int Gr, int Bl, float* A, const double* B, MatrixDim dmat) { cudaFD_copy_from_tp_trans(Gr,Bl,A,B,dmat); }$/;"	f	namespace:kaldi
kaldi::cuda_copy_from_tp_trans	cu-kernels.h	/^inline void cuda_copy_from_tp_trans(int Gr, int Bl, float* A, const float* B, MatrixDim dmat) { cudaF_copy_from_tp_trans(Gr,Bl,A,B,dmat); }$/;"	f	namespace:kaldi
kaldi::cuda_copy_from_vec_df	cu-kernels.h	/^inline void cuda_copy_from_vec_df(int Gr, int Bl, double* v_out, const double* v_in, int dim) { cudaD_copy_from_vec_df(Gr,Bl,v_out,v_in,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_copy_from_vec_df	cu-kernels.h	/^inline void cuda_copy_from_vec_df(int Gr, int Bl, double* v_out, const float* v_in, int dim) { cudaF_copy_from_vec_df(Gr,Bl,v_out,v_in,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_copy_from_vec_fd	cu-kernels.h	/^inline void cuda_copy_from_vec_fd(int Gr, int Bl, float* v_out, const double* v_in, int dim) { cudaD_copy_from_vec_fd(Gr,Bl,v_out,v_in,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_copy_from_vec_fd	cu-kernels.h	/^inline void cuda_copy_from_vec_fd(int Gr, int Bl, float* v_out, const float* v_in, int dim) { cudaF_copy_from_vec_fd(Gr,Bl,v_out,v_in,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_copy_low_upp	cu-kernels.h	/^inline void cuda_copy_low_upp(dim3 Gr, dim3 Bl, double* A, MatrixDim dimA) { cudaD_copy_low_upp(Gr, Bl, A, dimA); }$/;"	f	namespace:kaldi
kaldi::cuda_copy_low_upp	cu-kernels.h	/^inline void cuda_copy_low_upp(dim3 Gr, dim3 Bl, float* A, MatrixDim dimA) { cudaF_copy_low_upp(Gr, Bl, A, dimA); }$/;"	f	namespace:kaldi
kaldi::cuda_copy_rows	cu-kernels.h	/^inline void cuda_copy_rows(dim3 Gr, dim3 Bl, double* dst, const double* src, const MatrixIndexT_cuda* reorder, MatrixDim dst_dim, int src_stride) {$/;"	f	namespace:kaldi
kaldi::cuda_copy_rows	cu-kernels.h	/^inline void cuda_copy_rows(dim3 Gr, dim3 Bl, float* dst, const float* src, const MatrixIndexT_cuda* reorder, MatrixDim dst_dim, int src_stride) {$/;"	f	namespace:kaldi
kaldi::cuda_copy_rows_from_vec	cu-kernels.h	/^inline void cuda_copy_rows_from_vec(dim3 Gr, dim3 Bl, double *mat_out, MatrixDim d_out, const double *v_in) {$/;"	f	namespace:kaldi
kaldi::cuda_copy_rows_from_vec	cu-kernels.h	/^inline void cuda_copy_rows_from_vec(dim3 Gr, dim3 Bl, float *mat_out, MatrixDim d_out, const float *v_in) {$/;"	f	namespace:kaldi
kaldi::cuda_copy_upp_low	cu-kernels.h	/^inline void cuda_copy_upp_low(dim3 Gr, dim3 Bl, double* A, MatrixDim dimA) { cudaD_copy_upp_low(Gr, Bl, A, dimA); }$/;"	f	namespace:kaldi
kaldi::cuda_copy_upp_low	cu-kernels.h	/^inline void cuda_copy_upp_low(dim3 Gr, dim3 Bl, float* A, MatrixDim dimA) { cudaF_copy_upp_low(Gr, Bl, A, dimA); }$/;"	f	namespace:kaldi
kaldi::cuda_diag_update	cu-choleskykernels.h	/^template<> inline void cuda_diag_update<double>(double* A, int block_offset, int n_remaining_blocks, MatrixDim d) { cudaD_diag_update(A,block_offset,n_remaining_blocks,d); }$/;"	f	namespace:kaldi
kaldi::cuda_diag_update	cu-choleskykernels.h	/^template<> inline void cuda_diag_update<float>(float* A, int block_offset, int n_remaining_blocks, MatrixDim d) { cudaF_diag_update(A,block_offset,n_remaining_blocks,d); }$/;"	f	namespace:kaldi
kaldi::cuda_diag_update	cu-choleskykernels.h	/^template<typename Real> inline void cuda_diag_update(Real* A, int block_offset, int n_remaining_blocks, MatrixDim d) { KALDI_ERR << __func__ << " Not implemented!"; }$/;"	f	namespace:kaldi
kaldi::cuda_diff_sigmoid	cu-kernels.h	/^inline void cuda_diff_sigmoid(dim3 Gr, dim3 Bl, double *eout, const double *e, const double *y, MatrixDim d, int src_stride) { cudaD_diff_sigmoid(Gr,Bl,eout,e,y,d,src_stride); }$/;"	f	namespace:kaldi
kaldi::cuda_diff_sigmoid	cu-kernels.h	/^inline void cuda_diff_sigmoid(dim3 Gr, dim3 Bl, float *eout, const float *e, const float *y, MatrixDim d, int src_stride) { cudaF_diff_sigmoid(Gr,Bl,eout,e,y,d,src_stride); }$/;"	f	namespace:kaldi
kaldi::cuda_diff_tanh	cu-kernels.h	/^inline void cuda_diff_tanh(dim3 Gr, dim3 Bl, double *eout, const double *e, const double *y, MatrixDim d) { cudaD_diff_tanh(Gr,Bl,eout,e,y,d); }$/;"	f	namespace:kaldi
kaldi::cuda_diff_tanh	cu-kernels.h	/^inline void cuda_diff_tanh(dim3 Gr, dim3 Bl, float *eout, const float *e, const float *y, MatrixDim d) { cudaF_diff_tanh(Gr,Bl,eout,e,y,d); }$/;"	f	namespace:kaldi
kaldi::cuda_diff_xent	cu-kernels.h	/^inline void cuda_diff_xent(dim3 Gr, dim3 Bl, const int32_cuda *vec_tgt, double *mat_net_out, double *vec_log_post, MatrixDim d) {$/;"	f	namespace:kaldi
kaldi::cuda_diff_xent	cu-kernels.h	/^inline void cuda_diff_xent(dim3 Gr, dim3 Bl, const int32_cuda *vec_tgt, float *mat_net_out, float *vec_log_post, MatrixDim d) { cudaF_diff_xent(Gr,Bl,vec_tgt,mat_net_out,vec_log_post,d); }$/;"	f	namespace:kaldi
kaldi::cuda_div_rows_vec	cu-kernels.h	/^inline void cuda_div_rows_vec(dim3 Gr, dim3 Bl, double *mat, const double *vec_div, MatrixDim d) { cudaD_div_rows_vec(Gr,Bl,mat,vec_div,d); }$/;"	f	namespace:kaldi
kaldi::cuda_div_rows_vec	cu-kernels.h	/^inline void cuda_div_rows_vec(dim3 Gr, dim3 Bl, float *mat, const float *vec_div, MatrixDim d) { cudaF_div_rows_vec(Gr,Bl,mat,vec_div,d); }$/;"	f	namespace:kaldi
kaldi::cuda_equal_element_mask	cu-kernels.h	/^inline void cuda_equal_element_mask(dim3 Gr, dim3 Bl, const double *mat1, const double *mat2, double *mask, $/;"	f	namespace:kaldi
kaldi::cuda_equal_element_mask	cu-kernels.h	/^inline void cuda_equal_element_mask(dim3 Gr, dim3 Bl, const float *mat1, const float *mat2, float *mask, $/;"	f	namespace:kaldi
kaldi::cuda_factorize_diagonal_block	cu-choleskykernels.h	/^template<> inline void cuda_factorize_diagonal_block<double>(double* A, int block_offset, MatrixDim d) { cudaD_factorize_diagonal_block(A,block_offset,d); }$/;"	f	namespace:kaldi
kaldi::cuda_factorize_diagonal_block	cu-choleskykernels.h	/^template<> inline void cuda_factorize_diagonal_block<float>(float* A, int block_offset, MatrixDim d) { cudaF_factorize_diagonal_block(A,block_offset,d); }$/;"	f	namespace:kaldi
kaldi::cuda_factorize_diagonal_block	cu-choleskykernels.h	/^template<typename Real> inline void cuda_factorize_diagonal_block(Real* A, int block_offset, MatrixDim d) { KALDI_ERR << __func__ << " Not implemented!"; }$/;"	f	namespace:kaldi
kaldi::cuda_find_row_max_id	cu-kernels.h	/^inline void cuda_find_row_max_id(dim3 Gr, dim3 Bl, const double *mat, double *vec_val, int32_cuda *vec_id, int32_cuda voff, MatrixDim d) { cudaD_find_row_max_id(Gr,Bl,mat,vec_val,vec_id,voff,d); }$/;"	f	namespace:kaldi
kaldi::cuda_find_row_max_id	cu-kernels.h	/^inline void cuda_find_row_max_id(dim3 Gr, dim3 Bl, const float *mat, float *vec_val, int32_cuda *vec_id, int32_cuda voff, MatrixDim d) { cudaF_find_row_max_id(Gr,Bl,mat,vec_val,vec_id,voff,d); }$/;"	f	namespace:kaldi
kaldi::cuda_gauss_rand	cu-randkernels.h	/^template<> inline void cuda_gauss_rand<double>(dim3 Gr, dim3 Bl, double *mat, uint32_cuda *z1, uint32_cuda *z2, uint32_cuda *z3, uint32_cuda *z4, MatrixDim d) { cudaD_gauss_rand(Gr,Bl,mat,z1,z2,z3,z4,d); } $/;"	f	namespace:kaldi
kaldi::cuda_gauss_rand	cu-randkernels.h	/^template<> inline void cuda_gauss_rand<float>(dim3 Gr, dim3 Bl, float *mat, uint32_cuda *z1, uint32_cuda *z2, uint32_cuda *z3, uint32_cuda *z4, MatrixDim d) { cudaF_gauss_rand(Gr,Bl,mat,z1,z2,z3,z4,d); } $/;"	f	namespace:kaldi
kaldi::cuda_gauss_rand	cu-randkernels.h	/^template<typename Real> inline void cuda_gauss_rand(dim3 Gr, dim3 Bl, Real *mat, uint32_cuda *z1, uint32_cuda *z2, uint32_cuda *z3, uint32_cuda *z4, MatrixDim d) { KALDI_ERR << __func__ << " Not implemented!"; }$/;"	f	namespace:kaldi
kaldi::cuda_group_pnorm	cu-kernels.h	/^inline void cuda_group_pnorm(dim3 Gr, dim3 Bl, double *y, const double *x, MatrixDim d, int src_stride, int group_size, double power) { cudaD_group_pnorm(Gr, Bl, y, x, d, src_stride, group_size, power); }$/;"	f	namespace:kaldi
kaldi::cuda_group_pnorm	cu-kernels.h	/^inline void cuda_group_pnorm(dim3 Gr, dim3 Bl, float *y, const float *x, MatrixDim d, int src_stride, int group_size, float power) { cudaF_group_pnorm(Gr, Bl, y, x, d, src_stride, group_size, power);}$/;"	f	namespace:kaldi
kaldi::cuda_invert_elements	cu-kernels.h	/^inline void cuda_invert_elements(dim3 Gr, dim3 Bl, double *data, MatrixDim d) { cudaD_invert_elements(Gr,Bl,data,d); }$/;"	f	namespace:kaldi
kaldi::cuda_invert_elements	cu-kernels.h	/^inline void cuda_invert_elements(dim3 Gr, dim3 Bl, float *data, MatrixDim d) { cudaF_invert_elements(Gr,Bl,data,d); }$/;"	f	namespace:kaldi
kaldi::cuda_lo_update	cu-choleskykernels.h	/^template<> inline void cuda_lo_update<double>(double* A, int block_offset, int n_blocks, int n_remaining_blocks, MatrixDim d) { cudaD_lo_update(A,block_offset,n_blocks,n_remaining_blocks,d); }$/;"	f	namespace:kaldi
kaldi::cuda_lo_update	cu-choleskykernels.h	/^template<> inline void cuda_lo_update<float>(float* A, int block_offset, int n_blocks, int n_remaining_blocks, MatrixDim d) { cudaF_lo_update(A,block_offset,n_blocks,n_remaining_blocks,d); }$/;"	f	namespace:kaldi
kaldi::cuda_lo_update	cu-choleskykernels.h	/^template<typename Real> inline void cuda_lo_update(Real* A, int block_offset, int n_blocks, int n_remaining_blocks, MatrixDim d) { KALDI_ERR << __func__ << " Not implemented!"; }$/;"	f	namespace:kaldi
kaldi::cuda_matrix_lookup	cu-kernels.h	/^inline void cuda_matrix_lookup(dim3 Gr, dim3 Bl, const double *data,$/;"	f	namespace:kaldi
kaldi::cuda_matrix_lookup	cu-kernels.h	/^inline void cuda_matrix_lookup(dim3 Gr, dim3 Bl, const float *data,$/;"	f	namespace:kaldi
kaldi::cuda_max	cu-kernels.h	/^inline void cuda_max(dim3 Gr, dim3 Bl, double *mat, const double *A, MatrixDim dst_d, int src_stride) {$/;"	f	namespace:kaldi
kaldi::cuda_max	cu-kernels.h	/^inline void cuda_max(dim3 Gr, dim3 Bl, float *mat, const float *A, MatrixDim dst_d, int src_stride) {$/;"	f	namespace:kaldi
kaldi::cuda_mul_cols_vec	cu-kernels.h	/^inline void cuda_mul_cols_vec(dim3 Gr, dim3 Bl, double *mat, const double *scale, MatrixDim d) { cudaD_mul_cols_vec(Gr,Bl,mat,scale,d); }$/;"	f	namespace:kaldi
kaldi::cuda_mul_cols_vec	cu-kernels.h	/^inline void cuda_mul_cols_vec(dim3 Gr, dim3 Bl, float *mat, const float *scale, MatrixDim d) { cudaF_mul_cols_vec(Gr,Bl,mat,scale,d); }$/;"	f	namespace:kaldi
kaldi::cuda_mul_elements	cu-kernels.h	/^inline void cuda_mul_elements(dim3 Gr, dim3 Bl, double *mat, const double *A, MatrixDim dst_d, int src_stride) {$/;"	f	namespace:kaldi
kaldi::cuda_mul_elements	cu-kernels.h	/^inline void cuda_mul_elements(dim3 Gr, dim3 Bl, float *mat, const float *A, MatrixDim dst_d, int src_stride) {$/;"	f	namespace:kaldi
kaldi::cuda_mul_rows_group_mat	cu-kernels.h	/^inline void cuda_mul_rows_group_mat(dim3 Gr, dim3 Bl, double *y, const double *x, MatrixDim d, int src_stride, int group_size) { cudaD_mul_rows_group_mat(Gr, Bl, y, x, d, src_stride, group_size); }$/;"	f	namespace:kaldi
kaldi::cuda_mul_rows_group_mat	cu-kernels.h	/^inline void cuda_mul_rows_group_mat(dim3 Gr, dim3 Bl, float *y, const float *x, MatrixDim d, int src_stride, int group_size) { cudaF_mul_rows_group_mat(Gr, Bl, y, x, d, src_stride, group_size); }$/;"	f	namespace:kaldi
kaldi::cuda_mul_rows_vec	cu-kernels.h	/^inline void cuda_mul_rows_vec(dim3 Gr, dim3 Bl, double *mat, const double *scale, MatrixDim d) { cudaD_mul_rows_vec(Gr,Bl,mat,scale,d); }$/;"	f	namespace:kaldi
kaldi::cuda_mul_rows_vec	cu-kernels.h	/^inline void cuda_mul_rows_vec(dim3 Gr, dim3 Bl, float *mat, const float *scale, MatrixDim d) { cudaF_mul_rows_vec(Gr,Bl,mat,scale,d); }$/;"	f	namespace:kaldi
kaldi::cuda_one	cu-kernels.h	/^inline void cuda_one(int Gr,int Bl,double* x,int dim) { cudaD_one(Gr,Bl,x,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_one	cu-kernels.h	/^inline void cuda_one(int Gr,int Bl,float* x,int dim) { cudaF_one(Gr,Bl,x,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_pvec_sum	cu-kernels.h	/^inline void cuda_pvec_sum(int Gr, int Bl, double* vec, double* pvec_sum, int dim, int size) { cudaD_pvec_sum(Gr,Bl,vec,pvec_sum,dim,size); }$/;"	f	namespace:kaldi
kaldi::cuda_pvec_sum	cu-kernels.h	/^inline void cuda_pvec_sum(int Gr, int Bl, float* vec, float* pvec_sum, int dim, int size) { cudaF_pvec_sum(Gr, Bl, vec, pvec_sum, dim, size); }$/;"	f	namespace:kaldi
kaldi::cuda_rand	cu-randkernels.h	/^template<> inline void cuda_rand<double>(dim3 Gr, dim3 Bl, double *mat, uint32_cuda *z1, uint32_cuda *z2, uint32_cuda *z3, uint32_cuda *z4, MatrixDim d) { cudaD_rand(Gr,Bl,mat,z1,z2,z3,z4,d); }$/;"	f	namespace:kaldi
kaldi::cuda_rand	cu-randkernels.h	/^template<> inline void cuda_rand<float>(dim3 Gr, dim3 Bl, float *mat, uint32_cuda *z1, uint32_cuda *z2, uint32_cuda *z3, uint32_cuda *z4, MatrixDim d) { cudaF_rand(Gr,Bl,mat,z1,z2,z3,z4,d); }$/;"	f	namespace:kaldi
kaldi::cuda_rand	cu-randkernels.h	/^template<typename Real> inline void cuda_rand(dim3 Gr, dim3 Bl, Real *mat, uint32_cuda *z1, uint32_cuda *z2, uint32_cuda *z3, uint32_cuda *z4, MatrixDim d) { KALDI_ERR << __func__ << " Not implemented!"; }$/;"	f	namespace:kaldi
kaldi::cuda_randomize	cu-kernels.h	/^inline void cuda_randomize(dim3 Gr, dim3 Bl, double *y, const double *x, const int32_cuda *copy_from, MatrixDim d_out, MatrixDim d_in) { cudaD_randomize(Gr,Bl,y,x,copy_from,d_out,d_in); }$/;"	f	namespace:kaldi
kaldi::cuda_randomize	cu-kernels.h	/^inline void cuda_randomize(dim3 Gr, dim3 Bl, float *y, const float *x, const int32_cuda *copy_from, MatrixDim d_out, MatrixDim d_in) { cudaF_randomize(Gr,Bl,y,x,copy_from,d_out,d_in); }$/;"	f	namespace:kaldi
kaldi::cuda_regularize_l1	cu-kernels.h	/^inline void cuda_regularize_l1(dim3 Gr, dim3 Bl, double *wei, double *grad, double l1, double lr, MatrixDim d) { cudaD_regularize_l1(Gr,Bl,wei,grad,l1,lr,d); }$/;"	f	namespace:kaldi
kaldi::cuda_regularize_l1	cu-kernels.h	/^inline void cuda_regularize_l1(dim3 Gr, dim3 Bl, float *wei, float *grad, float l1, float lr, MatrixDim d) { cudaF_regularize_l1(Gr,Bl,wei,grad,l1,lr,d); }$/;"	f	namespace:kaldi
kaldi::cuda_replace_value	cu-kernels.h	/^inline void cuda_replace_value(int Gr, int Bl, double *v, int dim, double orig, double changed) {cudaD_replace_value(Gr, Bl, v, dim, orig, changed); }$/;"	f	namespace:kaldi
kaldi::cuda_replace_value	cu-kernels.h	/^inline void cuda_replace_value(int Gr, int Bl, float *v, int dim, float orig, float changed) {cudaF_replace_value(Gr, Bl, v, dim, orig, changed); }$/;"	f	namespace:kaldi
kaldi::cuda_scal	cu-kernels.h	/^inline void cuda_scal(int n, double alpha, double *x, int incx) {$/;"	f	namespace:kaldi
kaldi::cuda_scal	cu-kernels.h	/^inline void cuda_scal(int n, float alpha, float *x, int incx) {$/;"	f	namespace:kaldi
kaldi::cuda_scale	cu-kernels.h	/^inline void cuda_scale(dim3 Gr, dim3 Bl, double *mat, double value, MatrixDim d) { cudaD_scale(Gr,Bl,mat,value,d); }$/;"	f	namespace:kaldi
kaldi::cuda_scale	cu-kernels.h	/^inline void cuda_scale(dim3 Gr, dim3 Bl, float *mat, float value, MatrixDim d) { cudaF_scale(Gr,Bl,mat,value,d); }$/;"	f	namespace:kaldi
kaldi::cuda_scale_diag	cu-kernels.h	/^inline void cuda_scale_diag(int Gr, int Bl, double* mat, double value, int dim) { cudaD_scale_diag(Gr,Bl,mat,value,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_scale_diag	cu-kernels.h	/^inline void cuda_scale_diag(int Gr, int Bl, float* mat, float value, int dim) { cudaF_scale_diag(Gr,Bl,mat,value,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_set_bias_params	cu-kernels.h	/^inline void cuda_set_bias_params(int Gr, int Bl, double* v, const double* a, double param_1, double param_2, double param_3, int* flag, int dim) { cudaD_set_bias_params(Gr,Bl,v,a,param_1,param_2,param_3,flag,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_set_bias_params	cu-kernels.h	/^inline void cuda_set_bias_params(int Gr, int Bl, float* v, const float* a, float param_1, float param_2, float param_3, int* flag, int dim) { cudaF_set_bias_params(Gr,Bl,v,a,param_1,param_2,param_3,flag,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_set_const	cu-kernels.h	/^inline void cuda_set_const(dim3 Gr, dim3 Bl, double *mat, double value, MatrixDim d) { cudaD_set_const(Gr,Bl,mat,value,d); }$/;"	f	namespace:kaldi
kaldi::cuda_set_const	cu-kernels.h	/^inline void cuda_set_const(dim3 Gr, dim3 Bl, float *mat, float value, MatrixDim d) { cudaF_set_const(Gr,Bl,mat,value,d); }$/;"	f	namespace:kaldi
kaldi::cuda_set_diag	cu-kernels.h	/^inline void cuda_set_diag(int Gr, int Bl, double* mat, double value, MatrixDim d) { cudaD_set_diag(Gr,Bl,mat,value,d); }$/;"	f	namespace:kaldi
kaldi::cuda_set_diag	cu-kernels.h	/^inline void cuda_set_diag(int Gr, int Bl, float* mat, float value, MatrixDim d) { cudaF_set_diag(Gr,Bl,mat,value,d); }$/;"	f	namespace:kaldi
kaldi::cuda_set_diag_packed	cu-kernels.h	/^inline void cuda_set_diag_packed(int Gr, int Bl, double* mat, double value, int dim) { cudaD_set_diag_packed(Gr,Bl,mat,value,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_set_diag_packed	cu-kernels.h	/^inline void cuda_set_diag_packed(int Gr, int Bl, float* mat, float value, int dim) { cudaF_set_diag_packed(Gr,Bl,mat,value,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_set_zero_above_diag	cu-kernels.h	/^inline void cuda_set_zero_above_diag(dim3 Gr, dim3 Bl, double* mat, MatrixDim d) { cudaD_set_zero_above_diag(Gr,Bl,mat,d); }$/;"	f	namespace:kaldi
kaldi::cuda_set_zero_above_diag	cu-kernels.h	/^inline void cuda_set_zero_above_diag(dim3 Gr, dim3 Bl, float* mat, MatrixDim d) { cudaF_set_zero_above_diag(Gr,Bl,mat,d); }$/;"	f	namespace:kaldi
kaldi::cuda_sigmoid	cu-kernels.h	/^inline void cuda_sigmoid(dim3 Gr, dim3 Bl, double *y, const double *x, MatrixDim d, int src_stride) { cudaD_sigmoid(Gr,Bl,y,x,d,src_stride); }$/;"	f	namespace:kaldi
kaldi::cuda_sigmoid	cu-kernels.h	/^inline void cuda_sigmoid(dim3 Gr, dim3 Bl, float *y, const float *x, MatrixDim d, int src_stride) { cudaF_sigmoid(Gr,Bl,y,x,d,src_stride); }$/;"	f	namespace:kaldi
kaldi::cuda_soft_hinge	cu-kernels.h	/^inline void cuda_soft_hinge(dim3 Gr, dim3 Bl, double *y, const double *x, MatrixDim d, int src_stride) { cudaD_soft_hinge(Gr,Bl,y,x,d,src_stride); }$/;"	f	namespace:kaldi
kaldi::cuda_soft_hinge	cu-kernels.h	/^inline void cuda_soft_hinge(dim3 Gr, dim3 Bl, float *y, const float *x, MatrixDim d, int src_stride) { cudaF_soft_hinge(Gr,Bl,y,x,d,src_stride); }$/;"	f	namespace:kaldi
kaldi::cuda_softmax	cu-kernels.h	/^inline void cuda_softmax(size_t Gr, size_t Bl, double *y, const double *x, MatrixDim d) { cudaD_softmax(Gr,Bl,y,x,d); }$/;"	f	namespace:kaldi
kaldi::cuda_softmax	cu-kernels.h	/^inline void cuda_softmax(size_t Gr, size_t Bl, float *y, const float *x, MatrixDim d) { cudaF_softmax(Gr,Bl,y,x,d); }$/;"	f	namespace:kaldi
kaldi::cuda_softmax_part	cu-kernels.h	/^inline void cuda_softmax_part(dim3 Gr, dim3 Bl, const double *X, const int32_cuda *vec_ids, double* Y, MatrixDim d) { cudaD_softmax_part(Gr,Bl,X,vec_ids,Y,d); }$/;"	f	namespace:kaldi
kaldi::cuda_softmax_part	cu-kernels.h	/^inline void cuda_softmax_part(dim3 Gr, dim3 Bl, const float *X, const int32_cuda *vec_ids, float* Y, MatrixDim d) { cudaF_softmax_part(Gr,Bl,X,vec_ids,Y,d); }$/;"	f	namespace:kaldi
kaldi::cuda_softmax_reduce	cu-kernels.h	/^inline void cuda_softmax_reduce(size_t Gr, size_t Bl, double *y, const double *x, MatrixDim d, int src_stride) { cudaD_softmax_reduce(Gr,Bl,y,x,d,src_stride); }$/;"	f	namespace:kaldi
kaldi::cuda_softmax_reduce	cu-kernels.h	/^inline void cuda_softmax_reduce(size_t Gr, size_t Bl, float *y, const float *x, MatrixDim d, int src_stride) { cudaF_softmax_reduce(Gr,Bl,y,x,d,src_stride); }$/;"	f	namespace:kaldi
kaldi::cuda_splice	cu-kernels.h	/^inline void cuda_splice(dim3 Gr, dim3 Bl, double *y, const double *x, const int32_cuda *off, MatrixDim d_out, MatrixDim d_in) { cudaD_splice(Gr,Bl,y,x,off,d_out,d_in); }$/;"	f	namespace:kaldi
kaldi::cuda_splice	cu-kernels.h	/^inline void cuda_splice(dim3 Gr, dim3 Bl, float *y, const float *x, const int32_cuda *off, MatrixDim d_out, MatrixDim d_in) { cudaF_splice(Gr,Bl,y,x,off,d_out,d_in); }$/;"	f	namespace:kaldi
kaldi::cuda_strip_update	cu-choleskykernels.h	/^template<> inline void cuda_strip_update<double>(double* A, int block_offset, int n_remaining_blocks, MatrixDim d) { cudaD_strip_update(A,block_offset,n_remaining_blocks,d); }$/;"	f	namespace:kaldi
kaldi::cuda_strip_update	cu-choleskykernels.h	/^template<> inline void cuda_strip_update<float>(float* A, int block_offset, int n_remaining_blocks, MatrixDim d) { cudaF_strip_update(A,block_offset,n_remaining_blocks,d); }$/;"	f	namespace:kaldi
kaldi::cuda_strip_update	cu-choleskykernels.h	/^template<typename Real> inline void cuda_strip_update(Real* A, int block_offset, int n_remaining_blocks, MatrixDim d) { KALDI_ERR << __func__ << " Not implemented!"; }$/;"	f	namespace:kaldi
kaldi::cuda_sum_column_ranges	cu-kernels.h	/^inline void cuda_sum_column_ranges(dim3 Gr, dim3 Bl, double *data, MatrixDim dim,$/;"	f	namespace:kaldi
kaldi::cuda_sum_column_ranges	cu-kernels.h	/^inline void cuda_sum_column_ranges(dim3 Gr, dim3 Bl, float *data, MatrixDim dim,$/;"	f	namespace:kaldi
kaldi::cuda_sy_add_tr2	cu-kernels.h	/^inline void cuda_sy_add_tr2(dim3 Gr, dim3 Bl, double alpha, double beta, const double* T, MatrixDim tdim,$/;"	f	namespace:kaldi
kaldi::cuda_sy_add_tr2	cu-kernels.h	/^inline void cuda_sy_add_tr2(dim3 Gr, dim3 Bl, float alpha, float beta, const float* T, MatrixDim tdim,$/;"	f	namespace:kaldi
kaldi::cuda_take_lower	cu-kernels.h	/^inline void cuda_take_lower(dim3 Gr, dim3 Bl, const double* x, double* y, MatrixDim d_in) { cudaD_take_lower(Gr,Bl,x,y,d_in); }$/;"	f	namespace:kaldi
kaldi::cuda_take_lower	cu-kernels.h	/^inline void cuda_take_lower(dim3 Gr, dim3 Bl, const float* x, float* y, MatrixDim d_in) { cudaF_take_lower(Gr,Bl,x,y,d_in); }$/;"	f	namespace:kaldi
kaldi::cuda_take_mean	cu-kernels.h	/^inline void cuda_take_mean(dim3 Gr, dim3 Bl, const double* x, double* y, MatrixDim d_in) { cudaD_take_mean(Gr,Bl,x,y,d_in); }$/;"	f	namespace:kaldi
kaldi::cuda_take_mean	cu-kernels.h	/^inline void cuda_take_mean(dim3 Gr, dim3 Bl, const float* x, float* y, MatrixDim d_in) { cudaF_take_mean(Gr,Bl,x,y,d_in); }$/;"	f	namespace:kaldi
kaldi::cuda_take_upper	cu-kernels.h	/^inline void cuda_take_upper(dim3 Gr, dim3 Bl, const double* x, double* y, MatrixDim d_in) { cudaD_take_upper(Gr,Bl,x,y,d_in); }$/;"	f	namespace:kaldi
kaldi::cuda_take_upper	cu-kernels.h	/^inline void cuda_take_upper(dim3 Gr, dim3 Bl, const float* x, float* y, MatrixDim d_in) { cudaF_take_upper(Gr,Bl,x,y,d_in); }$/;"	f	namespace:kaldi
kaldi::cuda_tanh	cu-kernels.h	/^inline void cuda_tanh(dim3 Gr, dim3 Bl, double *y, const double *x, MatrixDim d, int src_stride) { cudaD_tanh(Gr,Bl,y,x,d,src_stride); }$/;"	f	namespace:kaldi
kaldi::cuda_tanh	cu-kernels.h	/^inline void cuda_tanh(dim3 Gr, dim3 Bl, float *y, const float *x, MatrixDim d, int src_stride) { cudaF_tanh(Gr,Bl,y,x,d,src_stride); }$/;"	f	namespace:kaldi
kaldi::cuda_trace	cu-kernels.h	/^inline void cuda_trace(int Gr, int Bl, double* mat, double* value, int dim) { cudaD_trace(Gr,Bl,mat,value,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_trace	cu-kernels.h	/^inline void cuda_trace(int Gr, int Bl, float* mat, float* value, int dim) { cudaF_trace(Gr,Bl,mat,value,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_trace_mat_mat	cu-kernels.h	/^inline void cuda_trace_mat_mat(const double* A, const double* B, MatrixDim dA, int B_stride, double* value) { cudaD_trace_mat_mat(A,B,dA,B_stride,value); }$/;"	f	namespace:kaldi
kaldi::cuda_trace_mat_mat	cu-kernels.h	/^inline void cuda_trace_mat_mat(const float* A, const float* B, MatrixDim dA, int B_stride, float* value) { cudaF_trace_mat_mat(A,B,dA,B_stride,value); }$/;"	f	namespace:kaldi
kaldi::cuda_trace_mat_mat_trans	cu-kernels.h	/^inline void cuda_trace_mat_mat_trans(const double* A, const double* B, MatrixDim dA, int B_stride, double* value) { cudaD_trace_mat_mat_trans(A,B,dA,B_stride,value); }$/;"	f	namespace:kaldi
kaldi::cuda_trace_mat_mat_trans	cu-kernels.h	/^inline void cuda_trace_mat_mat_trans(const float* A, const float* B, MatrixDim dA, int B_stride, float* value) { cudaF_trace_mat_mat_trans(A,B,dA,B_stride,value); }$/;"	f	namespace:kaldi
kaldi::cuda_transpose_matrix	cu-kernels.h	/^inline void cuda_transpose_matrix(dim3 Gr, dim3 Bl, double *mat, MatrixDim d) { cudaD_transpose_matrix(Gr, Bl, mat, d); }$/;"	f	namespace:kaldi
kaldi::cuda_transpose_matrix	cu-kernels.h	/^inline void cuda_transpose_matrix(dim3 Gr, dim3 Bl, float* mat, MatrixDim d) { cudaF_transpose_matrix(Gr, Bl, mat, d); }$/;"	f	namespace:kaldi
kaldi::cuda_vec_apply_exp	cu-kernels.h	/^inline void cuda_vec_apply_exp(int Gr, int Bl, double* v, int dim) { cudaD_vec_apply_exp(Gr,Bl,v,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_vec_apply_exp	cu-kernels.h	/^inline void cuda_vec_apply_exp(int Gr, int Bl, float* v, int dim) { cudaF_vec_apply_exp(Gr,Bl,v,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_vec_apply_floor	cu-kernels.h	/^inline void cuda_vec_apply_floor(int Gr, int Bl, double* v, double floor_val, float* num, int dim) { cudaD_vec_apply_floor(Gr,Bl,v,floor_val,num,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_vec_apply_floor	cu-kernels.h	/^inline void cuda_vec_apply_floor(int Gr, int Bl, float* v, float floor_val, float* num, int dim) { cudaF_vec_apply_floor(Gr,Bl,v,floor_val,num,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_vec_apply_log	cu-kernels.h	/^inline void cuda_vec_apply_log(int Gr, int Bl, double* v, double* flag, int dim) { cudaD_vec_apply_log(Gr,Bl,v,flag,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_vec_apply_log	cu-kernels.h	/^inline void cuda_vec_apply_log(int Gr, int Bl, float* v, float* flag, int dim) { cudaF_vec_apply_log(Gr,Bl,v,flag,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_vec_copy_diag_from_packed	cu-kernels.h	/^inline void cuda_vec_copy_diag_from_packed(int Gr, int Bl, double *dst, const double *src, int dim) { cudaD_vec_copy_diag_from_packed(Gr,Bl,dst,src,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_vec_copy_diag_from_packed	cu-kernels.h	/^inline void cuda_vec_copy_diag_from_packed(int Gr, int Bl, float *dst, const float *src, int dim) { cudaF_vec_copy_diag_from_packed(Gr,Bl,dst,src,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_vec_gauss_rand	cu-randkernels.h	/^template<> inline void cuda_vec_gauss_rand<double>(int Gr, int Bl, double *v, uint32_cuda *z1, uint32_cuda *z2, uint32_cuda *z3, uint32_cuda *z4, int dim) { cudaD_vec_gauss_rand(Gr,Bl,v,z1,z2,z3,z4,dim); } $/;"	f	namespace:kaldi
kaldi::cuda_vec_gauss_rand	cu-randkernels.h	/^template<> inline void cuda_vec_gauss_rand<float>(int Gr, int Bl, float *v, uint32_cuda *z1, uint32_cuda *z2, uint32_cuda *z3, uint32_cuda *z4, int dim) { cudaF_vec_gauss_rand(Gr,Bl,v,z1,z2,z3,z4,dim); } $/;"	f	namespace:kaldi
kaldi::cuda_vec_gauss_rand	cu-randkernels.h	/^template<typename Real> inline void cuda_vec_gauss_rand(int Gr, int Bl, Real *v, uint32_cuda *z1, uint32_cuda *z2, uint32_cuda *z3, uint32_cuda *z4, int dim) { KALDI_ERR << __func__ << " Not implemented!"; }$/;"	f	namespace:kaldi
kaldi::cuda_vec_max	cu-kernels.h	/^inline void cuda_vec_max(const double* v, double* value, int dim) { cudaD_vec_max(v,value,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_vec_max	cu-kernels.h	/^inline void cuda_vec_max(const float* v, float* value, int dim) { cudaF_vec_max(v,value,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_vec_min	cu-kernels.h	/^inline void cuda_vec_min(const double* v, double* value, int dim) { cudaD_vec_min(v,value,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_vec_min	cu-kernels.h	/^inline void cuda_vec_min(const float* v, float* value, int dim) { cudaF_vec_min(v,value,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_vec_mul_elements	cu-kernels.h	/^inline void cuda_vec_mul_elements(int Gr, int Bl, double* v, const double* a, int dim) { cudaD_vec_mul_elements(Gr,Bl,v,a,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_vec_mul_elements	cu-kernels.h	/^inline void cuda_vec_mul_elements(int Gr, int Bl, float* v, const float* a, int dim) { cudaF_vec_mul_elements(Gr,Bl,v,a,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_vec_soft_max	cu-kernels.h	/^inline void cuda_vec_soft_max(int Gr, int Bl, double* v, int dim) { cudaD_vec_soft_max(Gr,Bl,v,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_vec_soft_max	cu-kernels.h	/^inline void cuda_vec_soft_max(int Gr, int Bl, float* v, int dim) { cudaF_vec_soft_max(Gr,Bl,v,dim); }$/;"	f	namespace:kaldi
kaldi::cuda_vec_sum	cu-kernels.h	/^inline void cuda_vec_sum(int Gr, int Bl, double* v, double* value, int dim, int inc) { cudaD_vec_sum(Gr,Bl,v,value,dim,inc); }$/;"	f	namespace:kaldi
kaldi::cuda_vec_sum	cu-kernels.h	/^inline void cuda_vec_sum(int Gr, int Bl, float* v, float* value, int dim, int inc) { cudaF_vec_sum(Gr,Bl,v,value,dim,inc); }$/;"	f	namespace:kaldi
kaldi::n_blocks	cu-common.h	/^inline int32 n_blocks(int32 size, int32 block_size) { $/;"	f	namespace:kaldi
kaldi::operator <<	cu-array-inl.h	/^std::ostream &operator << (std::ostream &out, const CuArray<T> &vec) {$/;"	f	namespace:kaldi
kaldi::operator <<	cu-block-matrix.cc	/^std::ostream &operator << (std::ostream &out, const CuBlockMatrix<Real> &mat) {$/;"	f	namespace:kaldi
kaldi::operator <<	cu-matrix.cc	/^std::ostream &operator << (std::ostream &out, const CuMatrixBase<Real> &mat) {$/;"	f	namespace:kaldi
kaldi::operator <<	cu-packed-matrix.cc	/^std::ostream &operator << (std::ostream &out, const CuPackedMatrix<Real> &mat) {$/;"	f	namespace:kaldi
kaldi::operator <<	cu-vector.cc	/^std::ostream &operator << (std::ostream &out, const CuVectorBase<Real> &vec) {$/;"	f	namespace:kaldi
main	cu-array-test.cc	/^int main() {$/;"	f
main	cu-block-matrix-test.cc	/^int main() {$/;"	f
main	cu-math-test.cc	/^int main() {$/;"	f
main	cu-matrix-speed-test.cc	/^int main() {$/;"	f
main	cu-matrix-test.cc	/^int main() {$/;"	f
main	cu-packed-matrix-test.cc	/^int main() {$/;"	f
main	cu-sp-matrix-speed-test.cc	/^int main() {$/;"	f
main	cu-sp-matrix-test.cc	/^int main() {$/;"	f
main	cu-test.cc	/^int main() {$/;"	f
main	cu-tp-matrix-test.cc	/^int main() {$/;"	f
main	cu-vector-speed-test.cc	/^int main() {$/;"	f
main	cu-vector-test.cc	/^int main(int argc, char *argv[]) {$/;"	f
matrix_data	cu-matrixdim.h	/^    void *matrix_data; \/\/ data for M_i.  This is a pointer to either float* or$/;"	m	struct:CuBlockMatrixData_
matrix_dim	cu-matrixdim.h	/^    MatrixDim matrix_dim; \/\/ dimension of this M_i$/;"	m	struct:CuBlockMatrixData_
n_blocks	cu-common.h	/^inline int32 n_blocks(int32 size, int32 block_size) { $/;"	f	namespace:kaldi
num_cols	cu-block-matrix.h	/^    MatrixIndexT num_cols;$/;"	m	struct:kaldi::CuBlockMatrix::BlockMatrixData
num_cols_	cu-matrix.h	/^  MatrixIndexT num_cols_;$/;"	m	class:kaldi::CuMatrixBase
num_rows	cu-block-matrix.h	/^    MatrixIndexT num_rows;$/;"	m	struct:kaldi::CuBlockMatrix::BlockMatrixData
num_rows	cu-device.cc	/^    size_t num_rows; \/\/ or the number of rows, if it's a regular CudaMalloc$/;"	m	struct:kaldi::CuAllocator::MemInfoForSize	file:
num_rows_	cu-block-matrix.h	/^  MatrixIndexT num_rows_; \/\/ sum of num_rows of elements of block_data_.$/;"	m	class:kaldi::CuBlockMatrix
num_rows_	cu-matrix.h	/^  MatrixIndexT num_rows_;$/;"	m	class:kaldi::CuMatrixBase
num_rows_	cu-packed-matrix.h	/^  MatrixIndexT num_rows_;$/;"	m	class:kaldi::CuPackedMatrix
operator ()	cu-matrix.h	/^  inline CuValue<Real> operator() (MatrixIndexT r, MatrixIndexT c) {$/;"	f	class:kaldi::CuMatrixBase
operator ()	cu-matrix.h	/^  inline Real operator() (MatrixIndexT r, MatrixIndexT c) const {$/;"	f	class:kaldi::CuMatrixBase
operator ()	cu-packed-matrix.h	/^  inline Real operator() (MatrixIndexT r, MatrixIndexT c) const {$/;"	f	class:kaldi::CuPackedMatrix
operator ()	cu-sp-matrix.h	/^  inline CuValue<Real> operator() (MatrixIndexT r, MatrixIndexT c) {$/;"	f	class:kaldi::CuSpMatrix
operator ()	cu-sp-matrix.h	/^  inline Real operator() (MatrixIndexT r, MatrixIndexT c) const {$/;"	f	class:kaldi::CuSpMatrix
operator ()	cu-vector.h	/^  inline CuValue<Real> operator() (MatrixIndexT i) {$/;"	f	class:kaldi::CuVectorBase
operator ()	cu-vector.h	/^  inline Real operator() (MatrixIndexT i) const {$/;"	f	class:kaldi::CuVectorBase
operator +=	cu-value.h	/^  inline Real operator += (Real r) { return (*this = r + Real(*this)); }$/;"	f	class:kaldi::CuValue
operator <<	cu-array-inl.h	/^std::ostream &operator << (std::ostream &out, const CuArray<T> &vec) {$/;"	f	namespace:kaldi
operator <<	cu-block-matrix.cc	/^std::ostream &operator << (std::ostream &out, const CuBlockMatrix<Real> &mat) {$/;"	f	namespace:kaldi
operator <<	cu-matrix.cc	/^std::ostream &operator << (std::ostream &out, const CuMatrixBase<Real> &mat) {$/;"	f	namespace:kaldi
operator <<	cu-packed-matrix.cc	/^std::ostream &operator << (std::ostream &out, const CuPackedMatrix<Real> &mat) {$/;"	f	namespace:kaldi
operator <<	cu-vector.cc	/^std::ostream &operator << (std::ostream &out, const CuVectorBase<Real> &vec) {$/;"	f	namespace:kaldi
operator =	cu-array.h	/^  CuArray<T> &operator= (const CuArray<T> &in) {$/;"	f	class:kaldi::CuArray
operator =	cu-array.h	/^  CuArray<T> &operator= (const std::vector<T> &in) {$/;"	f	class:kaldi::CuArray
operator =	cu-block-matrix.cc	/^CuBlockMatrix<Real> &CuBlockMatrix<Real>::operator =(const CuBlockMatrix<Real> &other) {$/;"	f	class:kaldi::CuBlockMatrix
operator =	cu-matrix.h	/^  CuMatrix<Real> &operator = (const CuMatrix<Real> &other) {$/;"	f	class:kaldi::CuMatrix
operator =	cu-matrix.h	/^  CuMatrix<Real> &operator = (const CuMatrixBase<Real> &other) {$/;"	f	class:kaldi::CuMatrix
operator =	cu-matrix.h	/^  CuMatrix<Real> &operator = (const MatrixBase<Real> &other) {$/;"	f	class:kaldi::CuMatrix
operator =	cu-value.h	/^  inline CuValue operator = (const CuValue<Real> &other) {$/;"	f	class:kaldi::CuValue
operator =	cu-value.h	/^  inline Real operator = (Real r) { \/\/ assignment from Real$/;"	f	class:kaldi::CuValue
operator =	cu-vector.h	/^  CuVector<Real> &operator = (const CuVector<Real> &other) {$/;"	f	class:kaldi::CuVector
operator =	cu-vector.h	/^  CuVector<Real> &operator = (const CuVectorBase<Real> &other) {$/;"	f	class:kaldi::CuVector
operator =	cu-vector.h	/^  CuVector<Real> &operator = (const VectorBase<Real> &other) {$/;"	f	class:kaldi::CuVector
operator Real	cu-value.h	/^  inline operator Real () const { \/\/ assignment to Real$/;"	f	class:kaldi::CuValue
opts_	cu-device.cc	/^  CuAllocatorOptions opts_;$/;"	m	class:kaldi::CuAllocator	file:
pitch	cu-device.cc	/^    size_t pitch; \/\/ If CudaMallocPitch, the pitch returned by CudaMallocPitch;$/;"	m	struct:kaldi::CuAllocator::MemInfoForSize	file:
profile_map_	cu-device.h	/^  std::map<std::string, double> profile_map_;$/;"	m	class:kaldi::CuDevice
properties_	cu-device.h	/^  cudaDeviceProp properties_;$/;"	m	class:kaldi::CuDevice
row	cu-matrixdim.h	/^  int32_cuda row;$/;"	m	struct:MatrixElement
row_bytes	cu-device.cc	/^    size_t row_bytes; \/\/ or zero, if a regular CudaMalloc, not$/;"	m	struct:kaldi::CuAllocator::MemInfoForSize	file:
row_offset	cu-block-matrix.h	/^    MatrixIndexT row_offset;$/;"	m	struct:kaldi::CuBlockMatrix::BlockMatrixData
row_offset	cu-matrixdim.h	/^    int32_cuda row_offset; \/\/ sum of #rows of previous M_i$/;"	m	struct:CuBlockMatrixData_
rows	cu-matrixdim.h	/^    int32_cuda rows;$/;"	m	struct:MatrixDim_
second	cu-matrixdim.h	/^    int32_cuda second;$/;"	m	struct:Int32Pair
size_to_list_	cu-device.cc	/^  std::vector<std::map<size_t, MemInfoForSize*>* > size_to_list_;$/;"	m	class:kaldi::CuAllocator	file:
state_size_	cu-rand.h	/^  int32 state_size_; \/\/\/< size of the buffers$/;"	m	class:kaldi::CuRand
stride	cu-matrixdim.h	/^    int32_cuda stride;$/;"	m	struct:MatrixDim_
stride_	cu-matrix.h	/^  MatrixIndexT stride_;$/;"	m	class:kaldi::CuMatrixBase
tmp_	cu-rand.h	/^  CuMatrix<Real> tmp_; \/\/\/< auxiliary matrix$/;"	m	class:kaldi::CuRand
uint32_cuda	cu-matrixdim.h	/^  typedef uint32_t         uint32_cuda;$/;"	t
uint32_cuda	cu-matrixdim.h	/^  typedef unsigned __int32 uint32_cuda;$/;"	t
verbose_	cu-device.h	/^  bool verbose_;$/;"	m	class:kaldi::CuDevice
weight	cu-matrixdim.h	/^  Real weight;$/;"	m	struct:MatrixElement
z1_	cu-rand.h	/^  uint32 *z1_, *z2_, *z3_, *z4_; $/;"	m	class:kaldi::CuRand
z2_	cu-rand.h	/^  uint32 *z1_, *z2_, *z3_, *z4_; $/;"	m	class:kaldi::CuRand
z3_	cu-rand.h	/^  uint32 *z1_, *z2_, *z3_, *z4_; $/;"	m	class:kaldi::CuRand
z4_	cu-rand.h	/^  uint32 *z1_, *z2_, *z3_, *z4_; $/;"	m	class:kaldi::CuRand
~CuAllocator	cu-device.cc	/^CuAllocator::~CuAllocator() {$/;"	f	class:kaldi::CuAllocator
~CuArray	cu-array.h	/^  ~CuArray() { Destroy(); }$/;"	f	class:kaldi::CuArray
~CuBlockMatrix	cu-block-matrix.h	/^  ~CuBlockMatrix() { Destroy(); }$/;"	f	class:kaldi::CuBlockMatrix
~CuDevice	cu-device.cc	/^CuDevice::~CuDevice() {$/;"	f	class:kaldi::CuDevice
~CuMatrix	cu-matrix.h	/^  ~CuMatrix() { Destroy(); }$/;"	f	class:kaldi::CuMatrix
~CuPackedMatrix	cu-packed-matrix.h	/^  ~CuPackedMatrix() { Destroy(); }$/;"	f	class:kaldi::CuPackedMatrix
~CuRand	cu-rand.cc	/^CuRand<Real>::~CuRand() {$/;"	f	class:kaldi::CuRand
~CuSpMatrix	cu-sp-matrix.h	/^  ~CuSpMatrix() {}  $/;"	f	class:kaldi::CuSpMatrix
~CuTpMatrix	cu-tp-matrix.h	/^  ~CuTpMatrix() {}$/;"	f	class:kaldi::CuTpMatrix
~CuVector	cu-vector.h	/^  ~CuVector() { Destroy(); }$/;"	f	class:kaldi::CuVector
