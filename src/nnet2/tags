!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AcceptExample	nnet-compute-discriminative-parallel.cc	/^void DiscriminativeExamplesRepository::AcceptExample($/;"	f	class:kaldi::nnet2::DiscriminativeExamplesRepository
AcceptExamples	nnet-update-parallel.cc	/^void ExamplesRepository::AcceptExamples($/;"	f	class:kaldi::nnet2::ExamplesRepository
Add	nnet-component.cc	/^void AffineComponent::Add(BaseFloat alpha, const UpdatableComponent &other_in) {$/;"	f	class:kaldi::nnet2::AffineComponent
Add	nnet-component.cc	/^void AffineComponentA::Add(BaseFloat alpha, const UpdatableComponent &other_in) {$/;"	f	class:kaldi::nnet2::AffineComponentA
Add	nnet-component.cc	/^void BlockAffineComponent::Add(BaseFloat alpha,$/;"	f	class:kaldi::nnet2::BlockAffineComponent
Add	nnet-component.cc	/^void MixtureProbComponent::Add(BaseFloat alpha, const UpdatableComponent &other_in) {$/;"	f	class:kaldi::nnet2::MixtureProbComponent
Add	nnet-component.cc	/^void NonlinearComponent::Add(BaseFloat alpha, const NonlinearComponent &other) {$/;"	f	class:kaldi::nnet2::NonlinearComponent
Add	nnet-component.cc	/^void PiecewiseLinearComponent::Add(BaseFloat alpha, const UpdatableComponent &other_in) {$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
Add	nnet-compute-discriminative.cc	/^void NnetDiscriminativeStats::Add(const NnetDiscriminativeStats &other) {$/;"	f	class:kaldi::nnet2::NnetDiscriminativeStats
AddDirection	combine-nnet-a.cc	/^static void AddDirection(const Nnet &orig_nnet,$/;"	f	namespace:kaldi::nnet2
AddExample	nnet-lbfgs.h	/^  void AddExample(const NnetExample &eg) { egs_.push_back(eg); }$/;"	f	class:kaldi::nnet2::NnetLbfgsTrainer
AddNnet	nnet-nnet.cc	/^void Nnet::AddNnet(BaseFloat alpha,$/;"	f	class:kaldi::nnet2::Nnet
AddNnet	nnet-nnet.cc	/^void Nnet::AddNnet(const VectorBase<BaseFloat> &scale_params,$/;"	f	class:kaldi::nnet2::Nnet
AddStats	nnet-stats.cc	/^void NnetStats::AddStats(BaseFloat avg_deriv, BaseFloat avg_value) {$/;"	f	class:kaldi::nnet2::NnetStats
AddStats	nnet-stats.cc	/^void NnetStats::StatsElement::AddStats(BaseFloat avg_deriv, BaseFloat avg_value) {$/;"	f	class:kaldi::nnet2::NnetStats::StatsElement
AddStatsFromNnet	nnet-stats.cc	/^void NnetStats::AddStatsFromNnet(const Nnet &nnet) {$/;"	f	class:kaldi::nnet2::NnetStats
AddTrainingFile	nnet-randomize.cc	/^void NnetDataRandomizer::AddTrainingFile(const Matrix<BaseFloat> &feats,$/;"	f	class:kaldi::nnet2::NnetDataRandomizer
AdditiveNoiseComponent	nnet-component.h	/^  AdditiveNoiseComponent(): dim_(0), stddev_(1.0) { }$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
AdditiveNoiseComponent	nnet-component.h	/^  AdditiveNoiseComponent(int32 dim, BaseFloat stddev) { Init(dim, stddev); }$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
AdditiveNoiseComponent	nnet-component.h	/^class AdditiveNoiseComponent: public RandomComponent {$/;"	c	namespace:kaldi::nnet2
AdjustLearningRates	nnet-nnet.cc	/^void Nnet::AdjustLearningRates($/;"	f	class:kaldi::nnet2::Nnet
AffineComponent	nnet-component.cc	/^AffineComponent::AffineComponent(const AffineComponent &component):$/;"	f	class:kaldi::nnet2::AffineComponent
AffineComponent	nnet-component.h	/^  AffineComponent(): is_gradient_(false) { } \/\/ use Init to really initialize.$/;"	f	class:kaldi::nnet2::AffineComponent
AffineComponent	nnet-component.h	/^class AffineComponent: public UpdatableComponent {$/;"	c	namespace:kaldi::nnet2
AffineComponentA	nnet-component.cc	/^AffineComponentA::AffineComponentA(const AffineComponent &component):$/;"	f	class:kaldi::nnet2::AffineComponentA
AffineComponentA	nnet-component.h	/^  AffineComponentA() { }$/;"	f	class:kaldi::nnet2::AffineComponentA
AffineComponentA	nnet-component.h	/^class AffineComponentA: public AffineComponent {$/;"	c	namespace:kaldi::nnet2
AffineComponentModified	nnet-component.h	/^  AffineComponentModified(): cutoff_length_(10.0), max_change_(0.1) { }$/;"	f	class:kaldi::nnet2::AffineComponentModified
AffineComponentModified	nnet-component.h	/^class AffineComponentModified: public AffineComponent {$/;"	c	namespace:kaldi::nnet2
AffineComponentPreconditioned	nnet-component.h	/^  AffineComponentPreconditioned(): alpha_(1.0), max_change_(0.0) { }$/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
AffineComponentPreconditioned	nnet-component.h	/^class AffineComponentPreconditioned: public AffineComponent {$/;"	c	namespace:kaldi::nnet2
AffineComponentPreconditionedOnline	nnet-component.h	/^  AffineComponentPreconditionedOnline(): eta_(1.0), max_change_(0.0) { }$/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
AffineComponentPreconditionedOnline	nnet-component.h	/^class AffineComponentPreconditionedOnline: public AffineComponent {$/;"	c	namespace:kaldi::nnet2
AffinePreconInputComponent	nnet-component.h	/^  AffinePreconInputComponent() { } \/\/ use Init to really initialize.$/;"	f	class:kaldi::nnet2::AffinePreconInputComponent
AffinePreconInputComponent	nnet-component.h	/^class AffinePreconInputComponent: public AffineComponent {$/;"	c	namespace:kaldi::nnet2
AmNnet	am-nnet.h	/^  AmNnet() { }$/;"	f	class:kaldi::nnet2::AmNnet
AmNnet	am-nnet.h	/^  AmNnet(const AmNnet &other): nnet_(other.nnet_), priors_(other.priors_) { }$/;"	f	class:kaldi::nnet2::AmNnet
AmNnet	am-nnet.h	/^  explicit AmNnet(const Nnet &nnet): nnet_(nnet) { }$/;"	f	class:kaldi::nnet2::AmNnet
AmNnet	am-nnet.h	/^class AmNnet {$/;"	c	namespace:kaldi::nnet2
Append	nnet-nnet.cc	/^void Nnet::Append(Component *new_component) {$/;"	f	class:kaldi::nnet2::Nnet
AppendDiscriminativeExamples	nnet-example-functions.cc	/^void AppendDiscriminativeExamples($/;"	f	namespace:kaldi::nnet2
Arc	nnet-compute-discriminative.cc	/^  typedef LatticeArc Arc;$/;"	t	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
Arc	nnet-example-functions.cc	/^  typedef LatticeArc Arc;$/;"	t	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
Backprop	nnet-component.cc	/^void AffineComponent::Backprop(const CuMatrixBase<BaseFloat> &in_value,$/;"	f	class:kaldi::nnet2::AffineComponent
Backprop	nnet-component.cc	/^void AffinePreconInputComponent::Backprop($/;"	f	class:kaldi::nnet2::AffinePreconInputComponent
Backprop	nnet-component.cc	/^void BlockAffineComponent::Backprop($/;"	f	class:kaldi::nnet2::BlockAffineComponent
Backprop	nnet-component.cc	/^void DctComponent::Backprop(const CuMatrixBase<BaseFloat>&, \/\/ in_value,$/;"	f	class:kaldi::nnet2::DctComponent
Backprop	nnet-component.cc	/^void DropoutComponent::Backprop(const CuMatrixBase<BaseFloat> &in_value,$/;"	f	class:kaldi::nnet2::DropoutComponent
Backprop	nnet-component.cc	/^void FixedAffineComponent::Backprop(const CuMatrixBase<BaseFloat> &, \/\/ in_value$/;"	f	class:kaldi::nnet2::FixedAffineComponent
Backprop	nnet-component.cc	/^void FixedLinearComponent::Backprop(const CuMatrixBase<BaseFloat> &, \/\/ in_value$/;"	f	class:kaldi::nnet2::FixedLinearComponent
Backprop	nnet-component.cc	/^void InformationBottleneckComponent::Backprop($/;"	f	class:kaldi::nnet2::InformationBottleneckComponent
Backprop	nnet-component.cc	/^void MaxoutComponent::Backprop(const CuMatrixBase<BaseFloat> &in_value,$/;"	f	class:kaldi::nnet2::MaxoutComponent
Backprop	nnet-component.cc	/^void MixtureProbComponent::Backprop(const CuMatrixBase<BaseFloat> &in_value,$/;"	f	class:kaldi::nnet2::MixtureProbComponent
Backprop	nnet-component.cc	/^void NormalizeComponent::Backprop(const CuMatrixBase<BaseFloat> &in_value,$/;"	f	class:kaldi::nnet2::NormalizeComponent
Backprop	nnet-component.cc	/^void PermuteComponent::Backprop(const CuMatrixBase<BaseFloat> &in_value,$/;"	f	class:kaldi::nnet2::PermuteComponent
Backprop	nnet-component.cc	/^void PiecewiseLinearComponent::Backprop(const CuMatrixBase<BaseFloat> &in_value,$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
Backprop	nnet-component.cc	/^void PnormComponent::Backprop(const CuMatrixBase<BaseFloat> &in_value,$/;"	f	class:kaldi::nnet2::PnormComponent
Backprop	nnet-component.cc	/^void PowerExpandComponent::Backprop(const CuMatrixBase<BaseFloat> &in_value,$/;"	f	class:kaldi::nnet2::PowerExpandComponent
Backprop	nnet-component.cc	/^void RectifiedLinearComponent::Backprop(const CuMatrixBase<BaseFloat> &, \/\/ in_value$/;"	f	class:kaldi::nnet2::RectifiedLinearComponent
Backprop	nnet-component.cc	/^void ScaleComponent::Backprop(const CuMatrixBase<BaseFloat> &, \/\/ in_value$/;"	f	class:kaldi::nnet2::ScaleComponent
Backprop	nnet-component.cc	/^void SigmoidComponent::Backprop(const CuMatrixBase<BaseFloat> &, \/\/ in_value$/;"	f	class:kaldi::nnet2::SigmoidComponent
Backprop	nnet-component.cc	/^void SoftHingeComponent::Backprop(const CuMatrixBase<BaseFloat> &in_value,$/;"	f	class:kaldi::nnet2::SoftHingeComponent
Backprop	nnet-component.cc	/^void SoftmaxComponent::Backprop(const CuMatrixBase<BaseFloat> &, \/\/ in_value$/;"	f	class:kaldi::nnet2::SoftmaxComponent
Backprop	nnet-component.cc	/^void SpliceComponent::Backprop(const CuMatrixBase<BaseFloat> &, \/\/ in_value$/;"	f	class:kaldi::nnet2::SpliceComponent
Backprop	nnet-component.cc	/^void SpliceMaxComponent::Backprop(const CuMatrixBase<BaseFloat> &in_value,$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
Backprop	nnet-component.cc	/^void SumGroupComponent::Backprop(const CuMatrixBase<BaseFloat> &, \/\/ in_value,$/;"	f	class:kaldi::nnet2::SumGroupComponent
Backprop	nnet-component.cc	/^void TanhComponent::Backprop(const CuMatrixBase<BaseFloat> &, \/\/ in_value$/;"	f	class:kaldi::nnet2::TanhComponent
Backprop	nnet-component.h	/^  virtual void Backprop(const CuMatrixBase<BaseFloat> &in_value,$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
Backprop	nnet-compute-discriminative.cc	/^void NnetDiscriminativeUpdater::Backprop() {$/;"	f	class:kaldi::nnet2::NnetDiscriminativeUpdater
Backprop	nnet-compute.cc	/^void NnetComputer::Backprop(CuMatrix<BaseFloat> *tmp_deriv) {$/;"	f	class:kaldi::nnet2::NnetComputer
Backprop	nnet-update.cc	/^void NnetUpdater::Backprop(const std::vector<NnetExample> &data,$/;"	f	class:kaldi::nnet2::NnetUpdater
BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::DctComponent
BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::FixedAffineComponent
BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::FixedLinearComponent
BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::PermuteComponent
BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::RectifiedLinearComponent
BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::ScaleComponent
BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::SigmoidComponent
BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::SoftmaxComponent
BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::SpliceComponent
BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::SumGroupComponent
BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::TanhComponent
BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; } \/\/ if this returns false,$/;"	f	class:kaldi::nnet2::Component
BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::AffineComponent
BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::BlockAffineComponent
BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::DropoutComponent
BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::InformationBottleneckComponent
BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::MaxoutComponent
BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::MixtureProbComponent
BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::NormalizeComponent
BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::PnormComponent
BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::PowerExpandComponent
BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::SoftHingeComponent
BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }  $/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::AffineComponent
BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::BlockAffineComponent
BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::DctComponent
BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::FixedAffineComponent
BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::FixedLinearComponent
BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::MixtureProbComponent
BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::PermuteComponent
BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::PowerExpandComponent
BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::ScaleComponent
BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::SpliceComponent
BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::SumGroupComponent
BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; }  $/;"	f	class:kaldi::nnet2::DropoutComponent
BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; }  $/;"	f	class:kaldi::nnet2::InformationBottleneckComponent
BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; } \/\/ if this returns false,$/;"	f	class:kaldi::nnet2::Component
BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; }$/;"	f	class:kaldi::nnet2::MaxoutComponent
BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; }$/;"	f	class:kaldi::nnet2::NormalizeComponent
BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; }$/;"	f	class:kaldi::nnet2::PnormComponent
BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; }$/;"	f	class:kaldi::nnet2::RectifiedLinearComponent
BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; }$/;"	f	class:kaldi::nnet2::SigmoidComponent
BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; }$/;"	f	class:kaldi::nnet2::SoftHingeComponent
BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; }$/;"	f	class:kaldi::nnet2::SoftmaxComponent
BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; }$/;"	f	class:kaldi::nnet2::TanhComponent
BasicDebugTestForSplice	nnet-component-test.cc	/^void BasicDebugTestForSplice(bool output=false) {$/;"	f	namespace:kaldi::nnet2
BasicDebugTestForSpliceMax	nnet-component-test.cc	/^void BasicDebugTestForSpliceMax(bool output=false) {$/;"	f	namespace:kaldi::nnet2
BeginNewPhase	train-nnet.cc	/^void NnetSimpleTrainer::BeginNewPhase(bool first_time) {$/;"	f	class:kaldi::nnet2::NnetSimpleTrainer
BiasParams	nnet-component.h	/^  const CuVector<BaseFloat> &BiasParams() { return bias_params_; }$/;"	f	class:kaldi::nnet2::AffineComponent
BlockAffineComponent	nnet-component.h	/^  BlockAffineComponent() { } \/\/ use Init to really initialize.$/;"	f	class:kaldi::nnet2::BlockAffineComponent
BlockAffineComponent	nnet-component.h	/^class BlockAffineComponent: public UpdatableComponent {$/;"	c	namespace:kaldi::nnet2
BlockAffineComponentPreconditioned	nnet-component.h	/^  BlockAffineComponentPreconditioned() { } \/\/ use Init to really initialize.$/;"	f	class:kaldi::nnet2::BlockAffineComponentPreconditioned
BlockAffineComponentPreconditioned	nnet-component.h	/^class BlockAffineComponentPreconditioned: public BlockAffineComponent {$/;"	c	namespace:kaldi::nnet2
BucketFor	nnet-stats.cc	/^int32 NnetStats::BucketFor(BaseFloat avg_deriv) {$/;"	f	class:kaldi::nnet2::NnetStats
C_	combine-nnet-fast.cc	/^  TpMatrix<double> C_;$/;"	m	class:kaldi::nnet2::FastNnetCombiner	file:
C_inv_	combine-nnet-fast.cc	/^  TpMatrix<double> C_inv_;$/;"	m	class:kaldi::nnet2::FastNnetCombiner	file:
Check	nnet-example.cc	/^void DiscriminativeNnetExample::Check() const {$/;"	f	class:kaldi::nnet2::DiscriminativeNnetExample
Check	nnet-nnet.cc	/^void Nnet::Check() const {$/;"	f	class:kaldi::nnet2::Nnet
CheckOrthogonal	nnet-precondition-online.cc	/^static void CheckOrthogonal(CuMatrixBase<BaseFloat> *N,$/;"	f	namespace:kaldi::nnet2
ClearPrecomputedQuantities	nnet-component.cc	/^void AffineComponentA::ClearPrecomputedQuantities() {$/;"	f	class:kaldi::nnet2::AffineComponentA
Collapse	nnet-nnet.cc	/^void Nnet::Collapse(bool match_updatableness) {$/;"	f	class:kaldi::nnet2::Nnet
CollapseTransitionIds	nnet-example-functions.cc	/^void DiscriminativeExampleSplitter::CollapseTransitionIds() {$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
CollapseWithNext	nnet-component.cc	/^Component *AffineComponent::CollapseWithNext($/;"	f	class:kaldi::nnet2::AffineComponent
CollapseWithPrevious	nnet-component.cc	/^Component *AffineComponent::CollapseWithPrevious($/;"	f	class:kaldi::nnet2::AffineComponent
CombineDiscriminativeExamples	nnet-example-functions.cc	/^void CombineDiscriminativeExamples($/;"	f	namespace:kaldi::nnet2
CombineNnets	combine-nnet-fast.cc	/^void FastNnetCombiner::CombineNnets(const Vector<double> &scale_params,$/;"	f	class:kaldi::nnet2::FastNnetCombiner
CombineNnets	combine-nnet.cc	/^static void CombineNnets(const Vector<BaseFloat> &scale_params,$/;"	f	namespace:kaldi::nnet2
CombineNnets	combine-nnet.cc	/^void CombineNnets(const NnetCombineConfig &combine_config,$/;"	f	namespace:kaldi::nnet2
CombineNnetsA	combine-nnet-a.cc	/^void CombineNnetsA(const NnetCombineAconfig &config,$/;"	f	namespace:kaldi::nnet2
CombineNnetsFast	combine-nnet-fast.cc	/^void CombineNnetsFast(const NnetCombineFastConfig &combine_config,$/;"	f	namespace:kaldi::nnet2
Component	nnet-component.h	/^  Component(): index_(-1) { }$/;"	f	class:kaldi::nnet2::Component
Component	nnet-component.h	/^class Component {$/;"	c	namespace:kaldi::nnet2
ComponentDotProducts	nnet-nnet.cc	/^void Nnet::ComponentDotProducts($/;"	f	class:kaldi::nnet2::Nnet
Compute	decodable-am-nnet.h	/^  void Compute() {$/;"	f	class:kaldi::nnet2::DecodableAmNnetParallel
ComputeCurrentNnet	combine-nnet-fast.cc	/^void FastNnetCombiner::ComputeCurrentNnet($/;"	f	class:kaldi::nnet2::FastNnetCombiner
ComputeForMinibatch	nnet-update.cc	/^double NnetUpdater::ComputeForMinibatch($/;"	f	class:kaldi::nnet2::NnetUpdater
ComputeFrameInfo	nnet-example-functions.cc	/^bool DiscriminativeExampleSplitter::ComputeFrameInfo() {$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
ComputeLastLayerDeriv	nnet-compute.cc	/^BaseFloat NnetComputer::ComputeLastLayerDeriv(const Posterior &pdf_post,$/;"	f	class:kaldi::nnet2::NnetComputer
ComputeNnetGradient	nnet-update.cc	/^double ComputeNnetGradient($/;"	f	namespace:kaldi::nnet2
ComputeNnetObjf	nnet-update.cc	/^double ComputeNnetObjf($/;"	f	namespace:kaldi::nnet2
ComputeNnetObjf	nnet-update.cc	/^double ComputeNnetObjf(const Nnet &nnet,$/;"	f	namespace:kaldi::nnet2
ComputeNnetObjfParallel	nnet-update-parallel.h	/^inline double ComputeNnetObjfParallel($/;"	f	namespace:kaldi::nnet2
ComputeObjfAndDeriv	nnet-update.cc	/^double NnetUpdater::ComputeObjfAndDeriv($/;"	f	class:kaldi::nnet2::NnetUpdater
ComputeObjfAndGradient	combine-nnet-a.cc	/^static BaseFloat ComputeObjfAndGradient($/;"	f	namespace:kaldi::nnet2
ComputeObjfAndGradient	combine-nnet-fast.cc	/^double FastNnetCombiner::ComputeObjfAndGradient($/;"	f	class:kaldi::nnet2::FastNnetCombiner
ComputeObjfAndGradient	combine-nnet.cc	/^static double ComputeObjfAndGradient($/;"	f	namespace:kaldi::nnet2
ComputeObjfAndGradient	shrink-nnet.cc	/^static BaseFloat ComputeObjfAndGradient($/;"	f	namespace:kaldi::nnet2
ComputePreconditioner	combine-nnet-fast.cc	/^void FastNnetCombiner::ComputePreconditioner() {$/;"	f	class:kaldi::nnet2::FastNnetCombiner
ComputePreconditioner	nnet-component.cc	/^void AffineComponentA::ComputePreconditioner(const CuSpMatrix<double> &scatter_in,$/;"	f	class:kaldi::nnet2::AffineComponentA
ComputeRelevantIndexes	rescale-nnet.cc	/^void NnetRescaler::ComputeRelevantIndexes() {$/;"	f	class:kaldi::nnet2::NnetRescaler
ComputeTransforms	nnet-component.cc	/^void AffineComponentA::ComputeTransforms(const CuSpMatrix<double> &scatter_in,$/;"	f	class:kaldi::nnet2::AffineComponentA
Copy	nnet-component.cc	/^Component *PermuteComponent::Copy() const {$/;"	f	class:kaldi::nnet2::PermuteComponent
Copy	nnet-component.cc	/^Component *SpliceComponent::Copy() const {$/;"	f	class:kaldi::nnet2::SpliceComponent
Copy	nnet-component.cc	/^Component *SpliceMaxComponent::Copy() const {$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
Copy	nnet-component.cc	/^Component* AffineComponent::Copy() const {$/;"	f	class:kaldi::nnet2::AffineComponent
Copy	nnet-component.cc	/^Component* AffineComponentA::Copy() const {$/;"	f	class:kaldi::nnet2::AffineComponentA
Copy	nnet-component.cc	/^Component* AffineComponentModified::Copy() const {$/;"	f	class:kaldi::nnet2::AffineComponentModified
Copy	nnet-component.cc	/^Component* AffineComponentPreconditioned::Copy() const {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
Copy	nnet-component.cc	/^Component* AffineComponentPreconditionedOnline::Copy() const {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
Copy	nnet-component.cc	/^Component* AffinePreconInputComponent::Copy() const {$/;"	f	class:kaldi::nnet2::AffinePreconInputComponent
Copy	nnet-component.cc	/^Component* BlockAffineComponent::Copy() const {$/;"	f	class:kaldi::nnet2::BlockAffineComponent
Copy	nnet-component.cc	/^Component* BlockAffineComponentPreconditioned::Copy() const {$/;"	f	class:kaldi::nnet2::BlockAffineComponentPreconditioned
Copy	nnet-component.cc	/^Component* DctComponent::Copy() const {$/;"	f	class:kaldi::nnet2::DctComponent
Copy	nnet-component.cc	/^Component* DropoutComponent::Copy() const {$/;"	f	class:kaldi::nnet2::DropoutComponent
Copy	nnet-component.cc	/^Component* FixedAffineComponent::Copy() const {$/;"	f	class:kaldi::nnet2::FixedAffineComponent
Copy	nnet-component.cc	/^Component* FixedLinearComponent::Copy() const {$/;"	f	class:kaldi::nnet2::FixedLinearComponent
Copy	nnet-component.cc	/^Component* MixtureProbComponent::Copy() const {$/;"	f	class:kaldi::nnet2::MixtureProbComponent
Copy	nnet-component.cc	/^Component* PiecewiseLinearComponent::Copy() const {$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
Copy	nnet-component.cc	/^Component* SumGroupComponent::Copy() const {$/;"	f	class:kaldi::nnet2::SumGroupComponent
Copy	nnet-component.h	/^  virtual Component* Copy() const { return new MaxoutComponent(input_dim_,$/;"	f	class:kaldi::nnet2::MaxoutComponent
Copy	nnet-component.h	/^  virtual Component* Copy() const { return new NormalizeComponent(*this); }$/;"	f	class:kaldi::nnet2::NormalizeComponent
Copy	nnet-component.h	/^  virtual Component* Copy() const { return new PnormComponent(input_dim_,$/;"	f	class:kaldi::nnet2::PnormComponent
Copy	nnet-component.h	/^  virtual Component* Copy() const { return new PowerExpandComponent(input_dim_,$/;"	f	class:kaldi::nnet2::PowerExpandComponent
Copy	nnet-component.h	/^  virtual Component* Copy() const { return new RectifiedLinearComponent(*this); }$/;"	f	class:kaldi::nnet2::RectifiedLinearComponent
Copy	nnet-component.h	/^  virtual Component* Copy() const { return new ScaleComponent(*this); }$/;"	f	class:kaldi::nnet2::ScaleComponent
Copy	nnet-component.h	/^  virtual Component* Copy() const { return new SigmoidComponent(*this); }$/;"	f	class:kaldi::nnet2::SigmoidComponent
Copy	nnet-component.h	/^  virtual Component* Copy() const { return new SoftHingeComponent(*this); }$/;"	f	class:kaldi::nnet2::SoftHingeComponent
Copy	nnet-component.h	/^  virtual Component* Copy() const { return new SoftmaxComponent(*this); }$/;"	f	class:kaldi::nnet2::SoftmaxComponent
Copy	nnet-component.h	/^  virtual Component* Copy() const { return new TanhComponent(*this); }$/;"	f	class:kaldi::nnet2::TanhComponent
Copy	nnet-component.h	/^  virtual Component* Copy() const {$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
Copy	nnet-component.h	/^  virtual Component* Copy() const {$/;"	f	class:kaldi::nnet2::InformationBottleneckComponent
CopyParamsOrGradientFromNnet	nnet-lbfgs.cc	/^void NnetLbfgsTrainer::CopyParamsOrGradientFromNnet(const Nnet &nnet,$/;"	f	class:kaldi::nnet2::NnetLbfgsTrainer
CopyParamsOrGradientToNnet	nnet-lbfgs.cc	/^void NnetLbfgsTrainer::CopyParamsOrGradientToNnet(const VectorBase<BaseFloat> &params,$/;"	f	class:kaldi::nnet2::NnetLbfgsTrainer
CopyStatsFrom	nnet-nnet.cc	/^void Nnet::CopyStatsFrom(const Nnet &other) {$/;"	f	class:kaldi::nnet2::Nnet
Count	nnet-component.h	/^  double Count() const { return count_; }$/;"	f	class:kaldi::nnet2::NonlinearComponent
CreateOutputLattice	nnet-example-functions.cc	/^void DiscriminativeExampleSplitter::CreateOutputLattice($/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
DctComponent	nnet-component.h	/^  DctComponent() { dim_ = 0; } $/;"	f	class:kaldi::nnet2::DctComponent
DctComponent	nnet-component.h	/^class DctComponent: public Component {$/;"	c	namespace:kaldi::nnet2
DecodableAmNnet	decodable-am-nnet.h	/^  DecodableAmNnet(const TransitionModel &trans_model,$/;"	f	class:kaldi::nnet2::DecodableAmNnet
DecodableAmNnet	decodable-am-nnet.h	/^class DecodableAmNnet: public DecodableInterface {$/;"	c	namespace:kaldi::nnet2
DecodableAmNnetParallel	decodable-am-nnet.h	/^  DecodableAmNnetParallel($/;"	f	class:kaldi::nnet2::DecodableAmNnetParallel
DecodableAmNnetParallel	decodable-am-nnet.h	/^class DecodableAmNnetParallel: public DecodableInterface {$/;"	c	namespace:kaldi::nnet2
DerivSum	nnet-component.h	/^  const CuVector<double> &DerivSum() const { return deriv_sum_; }$/;"	f	class:kaldi::nnet2::NonlinearComponent
Destroy	nnet-nnet.cc	/^void Nnet::Destroy() {$/;"	f	class:kaldi::nnet2::Nnet
DiscTrainParallelClass	nnet-compute-discriminative-parallel.cc	/^  DiscTrainParallelClass(const AmNnet &am_nnet,$/;"	f	class:kaldi::nnet2::DiscTrainParallelClass
DiscTrainParallelClass	nnet-compute-discriminative-parallel.cc	/^  DiscTrainParallelClass(const DiscTrainParallelClass &other):$/;"	f	class:kaldi::nnet2::DiscTrainParallelClass
DiscTrainParallelClass	nnet-compute-discriminative-parallel.cc	/^class DiscTrainParallelClass: public MultiThreadable {$/;"	c	namespace:kaldi::nnet2	file:
DiscriminativeExampleSplitter	nnet-example-functions.cc	/^  DiscriminativeExampleSplitter($/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
DiscriminativeExampleSplitter	nnet-example-functions.cc	/^class DiscriminativeExampleSplitter {$/;"	c	namespace:kaldi::nnet2	file:
DiscriminativeExamplesRepository	nnet-compute-discriminative-parallel.cc	/^  DiscriminativeExamplesRepository(): buffer_size_(4),$/;"	f	class:kaldi::nnet2::DiscriminativeExamplesRepository
DiscriminativeExamplesRepository	nnet-compute-discriminative-parallel.cc	/^class DiscriminativeExamplesRepository {$/;"	c	namespace:kaldi::nnet2	file:
DiscriminativeNnetExample	nnet-example.h	/^struct DiscriminativeNnetExample {$/;"	s	namespace:kaldi::nnet2
DiscriminativeNnetExampleWriter	nnet-example.h	/^   DiscriminativeNnetExampleWriter;$/;"	t	namespace:kaldi::nnet2
DoBackprop	nnet-update.cc	/^double DoBackprop(const Nnet &nnet,$/;"	f	namespace:kaldi::nnet2
DoBackpropParallel	nnet-update-parallel.cc	/^double DoBackpropParallel(const Nnet &nnet,$/;"	f	namespace:kaldi::nnet2
DoBackpropParallelClass	nnet-update-parallel.cc	/^  DoBackpropParallelClass(const DoBackpropParallelClass &other):$/;"	f	class:kaldi::nnet2::DoBackpropParallelClass
DoBackpropParallelClass	nnet-update-parallel.cc	/^  DoBackpropParallelClass(const Nnet &nnet,$/;"	f	class:kaldi::nnet2::DoBackpropParallelClass
DoBackpropParallelClass	nnet-update-parallel.cc	/^class DoBackpropParallelClass: public MultiThreadable {$/;"	c	namespace:kaldi::nnet2	file:
DoBackpropSingleThreaded	nnet-update-parallel.cc	/^double DoBackpropSingleThreaded(const Nnet &nnet,$/;"	f	namespace:kaldi::nnet2
DoExcise	nnet-example-functions.cc	/^void DiscriminativeExampleSplitter::DoExcise(SplitExampleStats *stats) {$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
DoSplit	nnet-example-functions.cc	/^void DiscriminativeExampleSplitter::DoSplit(SplitExampleStats *stats) {$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
Done	nnet-randomize.cc	/^bool NnetDataRandomizer::Done() {$/;"	f	class:kaldi::nnet2::NnetDataRandomizer
DotProduct	nnet-component.cc	/^BaseFloat AffineComponent::DotProduct(const UpdatableComponent &other_in) const {$/;"	f	class:kaldi::nnet2::AffineComponent
DotProduct	nnet-component.cc	/^BaseFloat BlockAffineComponent::DotProduct($/;"	f	class:kaldi::nnet2::BlockAffineComponent
DotProduct	nnet-component.cc	/^BaseFloat MixtureProbComponent::DotProduct($/;"	f	class:kaldi::nnet2::MixtureProbComponent
DotProduct	nnet-component.cc	/^BaseFloat PiecewiseLinearComponent::DotProduct(const UpdatableComponent &other_in) const {$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
DropoutComponent	nnet-component.h	/^  DropoutComponent(): dim_(0), dropout_proportion_(0.5) { }$/;"	f	class:kaldi::nnet2::DropoutComponent
DropoutComponent	nnet-component.h	/^  DropoutComponent(int32 dim, BaseFloat dp = 0.5, BaseFloat sc = 0.0) {$/;"	f	class:kaldi::nnet2::DropoutComponent
DropoutComponent	nnet-component.h	/^class DropoutComponent: public RandomComponent {$/;"	c	namespace:kaldi::nnet2
Estimate	get-feature-transform.cc	/^void FeatureTransformEstimate::Estimate(const FeatureTransformEstimateOptions &opts,$/;"	f	class:kaldi::FeatureTransformEstimate
Estimate	get-feature-transform.cc	/^void FeatureTransformEstimateMulti::Estimate($/;"	f	class:kaldi::FeatureTransformEstimateMulti
EstimateInternal	get-feature-transform.cc	/^void FeatureTransformEstimate::EstimateInternal($/;"	f	class:kaldi::FeatureTransformEstimate
EstimateTransformPart	get-feature-transform.cc	/^void FeatureTransformEstimateMulti::EstimateTransformPart($/;"	f	class:kaldi::FeatureTransformEstimateMulti
ExampleToPdfPost	nnet-example-functions.cc	/^void ExampleToPdfPost($/;"	f	namespace:kaldi::nnet2
ExamplesDone	nnet-compute-discriminative-parallel.cc	/^void DiscriminativeExamplesRepository::ExamplesDone() {$/;"	f	class:kaldi::nnet2::DiscriminativeExamplesRepository
ExamplesDone	nnet-update-parallel.cc	/^void ExamplesRepository::ExamplesDone() {$/;"	f	class:kaldi::nnet2::ExamplesRepository
ExamplesRepository	nnet-update-parallel.cc	/^  ExamplesRepository(): empty_semaphore_(1), done_(false) { }$/;"	f	class:kaldi::nnet2::ExamplesRepository
ExamplesRepository	nnet-update-parallel.cc	/^class ExamplesRepository {$/;"	c	namespace:kaldi::nnet2	file:
Excise	nnet-example-functions.cc	/^  void Excise(SplitExampleStats *stats) {$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
ExciseDiscriminativeExample	nnet-example-functions.cc	/^void ExciseDiscriminativeExample($/;"	f	namespace:kaldi::nnet2
ExpectOneOrTwoTokens	nnet-component.cc	/^static void ExpectOneOrTwoTokens(std::istream &is, bool binary,$/;"	f	namespace:kaldi::nnet2
FastNnetCombiner	combine-nnet-fast.cc	/^  FastNnetCombiner(const NnetCombineFastConfig &combine_config,$/;"	f	class:kaldi::nnet2::FastNnetCombiner
FastNnetCombiner	combine-nnet-fast.cc	/^class FastNnetCombiner {$/;"	c	namespace:kaldi::nnet2	file:
FeatureTransformEstimate	get-feature-transform.h	/^class FeatureTransformEstimate: public LdaEstimate {$/;"	c	namespace:kaldi
FeatureTransformEstimateMulti	get-feature-transform.h	/^class FeatureTransformEstimateMulti: public FeatureTransformEstimate {$/;"	c	namespace:kaldi
FeatureTransformEstimateOptions	get-feature-transform.h	/^  FeatureTransformEstimateOptions(): remove_offset(true), dim(200),$/;"	f	struct:kaldi::FeatureTransformEstimateOptions
FeatureTransformEstimateOptions	get-feature-transform.h	/^struct FeatureTransformEstimateOptions {$/;"	s	namespace:kaldi
FisherComputationClass	combine-nnet-fast.cc	/^  FisherComputationClass(const FisherComputationClass &other):$/;"	f	class:kaldi::nnet2::FisherComputationClass
FisherComputationClass	combine-nnet-fast.cc	/^  FisherComputationClass(const Nnet &nnet,$/;"	f	class:kaldi::nnet2::FisherComputationClass
FisherComputationClass	combine-nnet-fast.cc	/^class FisherComputationClass: public MultiThreadable {$/;"	c	namespace:kaldi::nnet2	file:
FixNnet	nnet-fix.cc	/^void FixNnet(const NnetFixConfig &config, Nnet *nnet) {$/;"	f	namespace:kaldi::nnet2
FixedAffineComponent	nnet-component.h	/^  FixedAffineComponent() { } $/;"	f	class:kaldi::nnet2::FixedAffineComponent
FixedAffineComponent	nnet-component.h	/^class FixedAffineComponent: public Component {$/;"	c	namespace:kaldi::nnet2
FixedLinearComponent	nnet-component.h	/^  FixedLinearComponent() { } $/;"	f	class:kaldi::nnet2::FixedLinearComponent
FixedLinearComponent	nnet-component.h	/^class FixedLinearComponent: public Component {$/;"	c	namespace:kaldi::nnet2
FormatInput	nnet-update.cc	/^void NnetUpdater::FormatInput(const std::vector<NnetExample> &data) {$/;"	f	class:kaldi::nnet2::NnetUpdater
FormatInput	rescale-nnet.cc	/^void NnetRescaler::FormatInput(const std::vector<NnetExample> &data,$/;"	f	class:kaldi::nnet2::NnetRescaler
FrameInfo	nnet-example-functions.cc	/^    FrameInfo(): den_state_count(0), den_pdf_count(0),$/;"	f	struct:kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo
FrameInfo	nnet-example-functions.cc	/^  struct FrameInfo {$/;"	s	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
GetComponent	nnet-nnet.cc	/^Component& Nnet::GetComponent(int32 component) {$/;"	f	class:kaldi::nnet2::Nnet
GetComponent	nnet-nnet.cc	/^const Component& Nnet::GetComponent(int32 component) const {$/;"	f	class:kaldi::nnet2::Nnet
GetDiscriminativePosteriors	nnet-compute-discriminative.cc	/^double NnetDiscriminativeUpdater::GetDiscriminativePosteriors(Posterior *post) {$/;"	f	class:kaldi::nnet2::NnetDiscriminativeUpdater
GetExample	nnet-randomize.cc	/^void NnetDataRandomizer::GetExample(const std::pair<int32, int32> &pair,$/;"	f	class:kaldi::nnet2::NnetDataRandomizer
GetInitialModel	combine-nnet-fast.cc	/^int32 FastNnetCombiner::GetInitialModel($/;"	f	class:kaldi::nnet2::FastNnetCombiner
GetInitialModel	combine-nnet.cc	/^static int32 GetInitialModel($/;"	f	namespace:kaldi::nnet2
GetInitialParams	combine-nnet-fast.cc	/^void FastNnetCombiner::GetInitialParams() {$/;"	f	class:kaldi::nnet2::FastNnetCombiner
GetInitialScaleParams	combine-nnet.cc	/^static void GetInitialScaleParams($/;"	f	namespace:kaldi::nnet2
GetInputFeatures	nnet-compute-discriminative.cc	/^SubMatrix<BaseFloat> NnetDiscriminativeUpdater::GetInputFeatures() const {$/;"	f	class:kaldi::nnet2::NnetDiscriminativeUpdater
GetLearningRates	nnet-nnet.cc	/^void Nnet::GetLearningRates(VectorBase<BaseFloat> *learning_rates) const {$/;"	f	class:kaldi::nnet2::Nnet
GetNnet	am-nnet.h	/^  Nnet &GetNnet() { return nnet_; }$/;"	f	class:kaldi::nnet2::AmNnet
GetNnet	am-nnet.h	/^  const Nnet &GetNnet() const { return nnet_; }$/;"	f	class:kaldi::nnet2::AmNnet
GetNnetStats	nnet-stats.cc	/^void GetNnetStats(const NnetStatsConfig &config,$/;"	f	namespace:kaldi::nnet2
GetObjfAndGradient	nnet-lbfgs.cc	/^BaseFloat NnetLbfgsTrainer::GetObjfAndGradient($/;"	f	class:kaldi::nnet2::NnetLbfgsTrainer
GetOutput	nnet-compute-discriminative.cc	/^  CuMatrixBase<BaseFloat> &GetOutput() { return forward_data_.back(); }$/;"	f	class:kaldi::nnet2::NnetDiscriminativeUpdater
GetOutput	nnet-compute.cc	/^  CuMatrixBase<BaseFloat> &GetOutput() { return forward_data_.back(); }$/;"	f	class:kaldi::nnet2::NnetComputer
GetOutputStateId	nnet-example-functions.cc	/^DiscriminativeExampleSplitter::GetOutputStateId($/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
GetParameterDim	nnet-component.cc	/^int32 AffineComponent::GetParameterDim() const {$/;"	f	class:kaldi::nnet2::AffineComponent
GetParameterDim	nnet-component.cc	/^int32 BlockAffineComponent::GetParameterDim() const {$/;"	f	class:kaldi::nnet2::BlockAffineComponent
GetParameterDim	nnet-component.cc	/^int32 MixtureProbComponent::GetParameterDim() const {$/;"	f	class:kaldi::nnet2::MixtureProbComponent
GetParameterDim	nnet-component.cc	/^int32 PiecewiseLinearComponent::GetParameterDim() const {$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
GetParameterDim	nnet-component.h	/^  virtual int32 GetParameterDim() const { KALDI_ASSERT(0); return 0; }$/;"	f	class:kaldi::nnet2::UpdatableComponent
GetParameterDim	nnet-nnet.cc	/^int32 Nnet::GetParameterDim() const {$/;"	f	class:kaldi::nnet2::Nnet
GetPreconditioner	nnet-lbfgs.cc	/^Nnet *GetPreconditioner(const Nnet &nnet) {$/;"	f	namespace:kaldi::nnet2
GetRetainedDim	nnet-limit-rank.cc	/^  int32 GetRetainedDim(int32 rows, int32 cols) {$/;"	f	class:kaldi::nnet2::LimitRankClass
GetScalingFactor	nnet-component.cc	/^BaseFloat AffineComponentPreconditioned::GetScalingFactor($/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
GetScalingFactor	nnet-component.cc	/^BaseFloat AffineComponentPreconditionedOnline::GetScalingFactor($/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
GetSizes	nnet-component.cc	/^void SumGroupComponent::GetSizes(std::vector<int32> *sizes) const {$/;"	f	class:kaldi::nnet2::SumGroupComponent
GetTargetAvgDeriv	rescale-nnet.cc	/^BaseFloat NnetRescaler::GetTargetAvgDeriv(int32 c) {$/;"	f	class:kaldi::nnet2::NnetRescaler
GetUpdateDirection	combine-nnet-a.cc	/^static void GetUpdateDirection(const std::vector<Nnet> &nnets,$/;"	f	namespace:kaldi::nnet2
GiveNnetCorrectTopology	mixup-nnet.cc	/^static void GiveNnetCorrectTopology(Nnet *nnet,$/;"	f	namespace:kaldi::nnet2
Index	nnet-component.h	/^  virtual int32 Index() const { return index_; }$/;"	f	class:kaldi::nnet2::Component
IndexOfSoftmaxLayer	nnet-functions.cc	/^int32 IndexOfSoftmaxLayer(const Nnet &nnet) {$/;"	f	namespace:kaldi::nnet2
Info	am-nnet.cc	/^std::string AmNnet::Info() const {$/;"	f	class:kaldi::nnet2::AmNnet
Info	nnet-component.cc	/^std::string AffineComponent::Info() const {$/;"	f	class:kaldi::nnet2::AffineComponent
Info	nnet-component.cc	/^std::string AffineComponentModified::Info() const {$/;"	f	class:kaldi::nnet2::AffineComponentModified
Info	nnet-component.cc	/^std::string AffineComponentPreconditioned::Info() const {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
Info	nnet-component.cc	/^std::string AffineComponentPreconditionedOnline::Info() const {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
Info	nnet-component.cc	/^std::string Component::Info() const {$/;"	f	class:kaldi::nnet2::Component
Info	nnet-component.cc	/^std::string DctComponent::Info() const {$/;"	f	class:kaldi::nnet2::DctComponent
Info	nnet-component.cc	/^std::string DropoutComponent::Info() const {$/;"	f	class:kaldi::nnet2::DropoutComponent
Info	nnet-component.cc	/^std::string FixedAffineComponent::Info() const {$/;"	f	class:kaldi::nnet2::FixedAffineComponent
Info	nnet-component.cc	/^std::string FixedLinearComponent::Info() const {$/;"	f	class:kaldi::nnet2::FixedLinearComponent
Info	nnet-component.cc	/^std::string InformationBottleneckComponent::Info() const {$/;"	f	class:kaldi::nnet2::InformationBottleneckComponent
Info	nnet-component.cc	/^std::string MaxoutComponent::Info() const {$/;"	f	class:kaldi::nnet2::MaxoutComponent
Info	nnet-component.cc	/^std::string PiecewiseLinearComponent::Info() const {$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
Info	nnet-component.cc	/^std::string PnormComponent::Info() const {$/;"	f	class:kaldi::nnet2::PnormComponent
Info	nnet-component.cc	/^std::string PowerExpandComponent::Info() const {$/;"	f	class:kaldi::nnet2::PowerExpandComponent
Info	nnet-component.cc	/^std::string ScaleComponent::Info() const {$/;"	f	class:kaldi::nnet2::ScaleComponent
Info	nnet-component.cc	/^std::string SpliceComponent::Info() const {$/;"	f	class:kaldi::nnet2::SpliceComponent
Info	nnet-component.cc	/^std::string SpliceMaxComponent::Info() const {$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
Info	nnet-component.cc	/^std::string UpdatableComponent::Info() const {$/;"	f	class:kaldi::nnet2::UpdatableComponent
Info	nnet-nnet.cc	/^std::string Nnet::Info() const {$/;"	f	class:kaldi::nnet2::Nnet
InformationBottleneckComponent	nnet-component.h	/^  InformationBottleneckComponent(): dim_(0), noise_proportion_(0.1),$/;"	f	class:kaldi::nnet2::InformationBottleneckComponent
InformationBottleneckComponent	nnet-component.h	/^  InformationBottleneckComponent(int32 dim, BaseFloat noise_proportion) {$/;"	f	class:kaldi::nnet2::InformationBottleneckComponent
InformationBottleneckComponent	nnet-component.h	/^class InformationBottleneckComponent: public RandomComponent {$/;"	c	namespace:kaldi::nnet2
Init	am-nnet.cc	/^void AmNnet::Init(const Nnet &nnet) {$/;"	f	class:kaldi::nnet2::AmNnet
Init	am-nnet.cc	/^void AmNnet::Init(std::istream &config_is) {$/;"	f	class:kaldi::nnet2::AmNnet
Init	nnet-component.cc	/^void AdditiveNoiseComponent::Init(int32 dim, BaseFloat stddev) {$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
Init	nnet-component.cc	/^void AffineComponent::Init(BaseFloat learning_rate, $/;"	f	class:kaldi::nnet2::AffineComponent
Init	nnet-component.cc	/^void AffineComponent::Init(BaseFloat learning_rate,$/;"	f	class:kaldi::nnet2::AffineComponent
Init	nnet-component.cc	/^void AffineComponentModified::Init($/;"	f	class:kaldi::nnet2::AffineComponentModified
Init	nnet-component.cc	/^void AffineComponentModified::Init(BaseFloat learning_rate, BaseFloat length_cutoff,$/;"	f	class:kaldi::nnet2::AffineComponentModified
Init	nnet-component.cc	/^void AffineComponentPreconditioned::Init($/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
Init	nnet-component.cc	/^void AffineComponentPreconditioned::Init(BaseFloat learning_rate,$/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
Init	nnet-component.cc	/^void AffineComponentPreconditionedOnline::Init($/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
Init	nnet-component.cc	/^void AffinePreconInputComponent::Init($/;"	f	class:kaldi::nnet2::AffinePreconInputComponent
Init	nnet-component.cc	/^void BlockAffineComponent::Init(BaseFloat learning_rate,$/;"	f	class:kaldi::nnet2::BlockAffineComponent
Init	nnet-component.cc	/^void BlockAffineComponentPreconditioned::Init(BaseFloat learning_rate,$/;"	f	class:kaldi::nnet2::BlockAffineComponentPreconditioned
Init	nnet-component.cc	/^void DctComponent::Init(int32 dim, int32 dct_dim, bool reorder, int32 dct_keep_dim) {$/;"	f	class:kaldi::nnet2::DctComponent
Init	nnet-component.cc	/^void DropoutComponent::Init(int32 dim,$/;"	f	class:kaldi::nnet2::DropoutComponent
Init	nnet-component.cc	/^void FixedAffineComponent::Init(const CuMatrixBase<BaseFloat> &mat) {$/;"	f	class:kaldi::nnet2::FixedAffineComponent
Init	nnet-component.cc	/^void InformationBottleneckComponent::Init(int32 dim,$/;"	f	class:kaldi::nnet2::InformationBottleneckComponent
Init	nnet-component.cc	/^void MaxoutComponent::Init(int32 input_dim, int32 output_dim)  {$/;"	f	class:kaldi::nnet2::MaxoutComponent
Init	nnet-component.cc	/^void MixtureProbComponent::Init(BaseFloat learning_rate,$/;"	f	class:kaldi::nnet2::MixtureProbComponent
Init	nnet-component.cc	/^void PermuteComponent::Init(int32 dim) {$/;"	f	class:kaldi::nnet2::PermuteComponent
Init	nnet-component.cc	/^void PiecewiseLinearComponent::Init(int32 dim, int32 N,$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
Init	nnet-component.cc	/^void PnormComponent::Init(int32 input_dim, int32 output_dim, BaseFloat p)  {$/;"	f	class:kaldi::nnet2::PnormComponent
Init	nnet-component.cc	/^void PowerExpandComponent::Init(int32 dim,$/;"	f	class:kaldi::nnet2::PowerExpandComponent
Init	nnet-component.cc	/^void ScaleComponent::Init(int32 dim, BaseFloat scale) {$/;"	f	class:kaldi::nnet2::ScaleComponent
Init	nnet-component.cc	/^void SpliceComponent::Init(int32 input_dim, int32 left_context,$/;"	f	class:kaldi::nnet2::SpliceComponent
Init	nnet-component.cc	/^void SpliceMaxComponent::Init(int32 dim, int32 left_context,$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
Init	nnet-component.cc	/^void SumGroupComponent::Init(const std::vector<int32> &sizes) {$/;"	f	class:kaldi::nnet2::SumGroupComponent
Init	nnet-component.h	/^  void Init(BaseFloat learning_rate) {$/;"	f	class:kaldi::nnet2::UpdatableComponent
Init	nnet-component.h	/^  void Init(const CuMatrixBase<BaseFloat> &matrix) { mat_ = matrix; }$/;"	f	class:kaldi::nnet2::FixedLinearComponent
Init	nnet-component.h	/^  void Init(int32 dim) { dim_ = dim; count_ = 0.0; }$/;"	f	class:kaldi::nnet2::NonlinearComponent
Init	nnet-nnet.cc	/^void Nnet::Init(std::istream &is) {$/;"	f	class:kaldi::nnet2::Nnet
Init	nnet-nnet.cc	/^void Nnet::Init(std::vector<Component*> *components) {$/;"	f	class:kaldi::nnet2::Nnet
InitFromString	nnet-component.cc	/^void AdditiveNoiseComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
InitFromString	nnet-component.cc	/^void AffineComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::AffineComponent
InitFromString	nnet-component.cc	/^void AffineComponentModified::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::AffineComponentModified
InitFromString	nnet-component.cc	/^void AffineComponentPreconditioned::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
InitFromString	nnet-component.cc	/^void AffineComponentPreconditionedOnline::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
InitFromString	nnet-component.cc	/^void AffinePreconInputComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::AffinePreconInputComponent
InitFromString	nnet-component.cc	/^void BlockAffineComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::BlockAffineComponent
InitFromString	nnet-component.cc	/^void BlockAffineComponentPreconditioned::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::BlockAffineComponentPreconditioned
InitFromString	nnet-component.cc	/^void DctComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::DctComponent
InitFromString	nnet-component.cc	/^void DropoutComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::DropoutComponent
InitFromString	nnet-component.cc	/^void FixedAffineComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::FixedAffineComponent
InitFromString	nnet-component.cc	/^void FixedLinearComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::FixedLinearComponent
InitFromString	nnet-component.cc	/^void InformationBottleneckComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::InformationBottleneckComponent
InitFromString	nnet-component.cc	/^void MaxoutComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::MaxoutComponent
InitFromString	nnet-component.cc	/^void MixtureProbComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::MixtureProbComponent
InitFromString	nnet-component.cc	/^void NonlinearComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::NonlinearComponent
InitFromString	nnet-component.cc	/^void PermuteComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::PermuteComponent
InitFromString	nnet-component.cc	/^void PiecewiseLinearComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
InitFromString	nnet-component.cc	/^void PnormComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::PnormComponent
InitFromString	nnet-component.cc	/^void PowerExpandComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::PowerExpandComponent
InitFromString	nnet-component.cc	/^void ScaleComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::ScaleComponent
InitFromString	nnet-component.cc	/^void SpliceComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::SpliceComponent
InitFromString	nnet-component.cc	/^void SpliceMaxComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
InitFromString	nnet-component.cc	/^void SumGroupComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::SumGroupComponent
InitFromString	nnet-component.h	/^  virtual void InitFromString(std::string args) { KALDI_ASSERT(0); }$/;"	f	class:kaldi::nnet2::AffineComponentA
Initialize	nnet-lbfgs.cc	/^void NnetLbfgsTrainer::Initialize(Nnet *nnet_in) {$/;"	f	class:kaldi::nnet2::NnetLbfgsTrainer
InitializeScatter	nnet-component.cc	/^void AffineComponentA::InitializeScatter() {$/;"	f	class:kaldi::nnet2::AffineComponentA
InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::DctComponent
InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::DropoutComponent
InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::InformationBottleneckComponent
InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::NonlinearComponent
InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::ScaleComponent
InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return input_dim_; }$/;"	f	class:kaldi::nnet2::MaxoutComponent
InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return input_dim_; }$/;"	f	class:kaldi::nnet2::MixtureProbComponent
InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return input_dim_; }$/;"	f	class:kaldi::nnet2::PnormComponent
InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return input_dim_; }$/;"	f	class:kaldi::nnet2::PowerExpandComponent
InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return input_dim_; }$/;"	f	class:kaldi::nnet2::SpliceComponent
InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return input_dim_; }$/;"	f	class:kaldi::nnet2::SumGroupComponent
InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return linear_params_.NumCols() * num_blocks_; }$/;"	f	class:kaldi::nnet2::BlockAffineComponent
InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return linear_params_.NumCols(); }$/;"	f	class:kaldi::nnet2::AffineComponent
InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return linear_params_.NumCols(); }$/;"	f	class:kaldi::nnet2::FixedAffineComponent
InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return mat_.NumCols(); }$/;"	f	class:kaldi::nnet2::FixedLinearComponent
InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return params_.NumRows(); }$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return reorder_.size(); }$/;"	f	class:kaldi::nnet2::PermuteComponent
InputDim	nnet-nnet.cc	/^int32 Nnet::InputDim() const {$/;"	f	class:kaldi::nnet2::Nnet
InsertComponents	nnet-functions.cc	/^void InsertComponents(const Nnet &src_nnet,$/;"	f	namespace:kaldi::nnet2
IsLastFrame	decodable-am-nnet.h	/^  virtual bool IsLastFrame(int32 frame) {$/;"	f	class:kaldi::nnet2::DecodableAmNnet
IsLastFrame	decodable-am-nnet.h	/^  virtual bool IsLastFrame(int32 frame) {$/;"	f	class:kaldi::nnet2::DecodableAmNnetParallel
KALDI_NNET2_AM_NNET_H_	am-nnet.h	21;"	d
KALDI_NNET2_COMBINE_NNET_A_H_	combine-nnet-a.h	21;"	d
KALDI_NNET2_COMBINE_NNET_FAST_H_	combine-nnet-fast.h	21;"	d
KALDI_NNET2_COMBINE_NNET_H_	combine-nnet.h	21;"	d
KALDI_NNET2_DECODABLE_AM_NNET_H_	decodable-am-nnet.h	21;"	d
KALDI_NNET2_GET_FEATURE_TRANSFORM_H_	get-feature-transform.h	22;"	d
KALDI_NNET2_MIXUP_NNET_H_	mixup-nnet.h	21;"	d
KALDI_NNET2_NNET_COMPONENT_H_	nnet-component.h	23;"	d
KALDI_NNET2_NNET_COMPUTE_DISCRIMINATIVE_H_	nnet-compute-discriminative.h	21;"	d
KALDI_NNET2_NNET_COMPUTE_DISCRIMINATIVE_PARALLEL_H_	nnet-compute-discriminative-parallel.h	21;"	d
KALDI_NNET2_NNET_COMPUTE_H_	nnet-compute.h	21;"	d
KALDI_NNET2_NNET_EXAMPLE_FUNCTIONS_H_	nnet-example-functions.h	21;"	d
KALDI_NNET2_NNET_EXAMPLE_H_	nnet-example.h	21;"	d
KALDI_NNET2_NNET_FIX_H_	nnet-fix.h	21;"	d
KALDI_NNET2_NNET_FUNCTIONS_H_	nnet-functions.h	21;"	d
KALDI_NNET2_NNET_LBFGS_H_	nnet-lbfgs.h	21;"	d
KALDI_NNET2_NNET_LIMIT_RANK_H_	nnet-limit-rank.h	21;"	d
KALDI_NNET2_NNET_NNET_H_	nnet-nnet.h	22;"	d
KALDI_NNET2_NNET_PRECONDITION_H_	nnet-precondition.h	21;"	d
KALDI_NNET2_NNET_PRECONDITION_ONLINE_H_	nnet-precondition-online.h	21;"	d
KALDI_NNET2_NNET_RANDOMIZE_H_	nnet-randomize.h	21;"	d
KALDI_NNET2_NNET_STATS_H_	nnet-stats.h	21;"	d
KALDI_NNET2_NNET_UPDATE_H_	nnet-update.h	21;"	d
KALDI_NNET2_NNET_UPDATE_PARALLEL_H_	nnet-update-parallel.h	21;"	d
KALDI_NNET2_RESCALE_NNET_H_	rescale-nnet.h	21;"	d
KALDI_NNET2_SHRINK_NNET_H_	shrink-nnet.h	21;"	d
KALDI_NNET2_TRAIN_NNET_H_	train-nnet.h	21;"	d
KALDI_NNET2_WIDEN_NNET_H_	widen-nnet.h	21;"	d
Label	nnet-example-functions.cc	/^  typedef Arc::Label Label;$/;"	t	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
LatticeComputations	nnet-compute-discriminative.cc	/^void NnetDiscriminativeUpdater::LatticeComputations() {$/;"	f	class:kaldi::nnet2::NnetDiscriminativeUpdater
LatticeToDiscriminativeExample	nnet-example-functions.cc	/^bool LatticeToDiscriminativeExample($/;"	f	namespace:kaldi::nnet2
LearningRate	nnet-component.h	/^  BaseFloat LearningRate() const { return learning_rate_; }$/;"	f	class:kaldi::nnet2::UpdatableComponent
LeftContext	nnet-component.h	/^  virtual int32 LeftContext() { return 0; }$/;"	f	class:kaldi::nnet2::Component
LeftContext	nnet-component.h	/^  virtual int32 LeftContext() { return left_context_; }$/;"	f	class:kaldi::nnet2::SpliceComponent
LeftContext	nnet-component.h	/^  virtual int32 LeftContext() { return left_context_; }$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
LeftContext	nnet-nnet.cc	/^int32 Nnet::LeftContext() const {$/;"	f	class:kaldi::nnet2::Nnet
LimitRank	nnet-component.cc	/^void AffineComponent::LimitRank(int32 d,$/;"	f	class:kaldi::nnet2::AffineComponent
LimitRankClass	nnet-limit-rank.cc	/^  LimitRankClass(const NnetLimitRankOpts &opts,$/;"	f	class:kaldi::nnet2::LimitRankClass
LimitRankClass	nnet-limit-rank.cc	/^class LimitRankClass {$/;"	c	namespace:kaldi::nnet2	file:
LimitRankOfLastLayer	nnet-nnet.cc	/^void Nnet::LimitRankOfLastLayer(int32 dim) {$/;"	f	class:kaldi::nnet2::Nnet
LimitRankParallel	nnet-limit-rank.cc	/^void LimitRankParallel(const NnetLimitRankOpts &opts,$/;"	f	namespace:kaldi::nnet2
LinearParams	nnet-component.h	/^  const CuMatrix<BaseFloat> &LinearParams() { return linear_params_; }$/;"	f	class:kaldi::nnet2::AffineComponent
LogLikelihood	decodable-am-nnet.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 transition_id) {$/;"	f	class:kaldi::nnet2::DecodableAmNnet
LogLikelihood	decodable-am-nnet.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 transition_id) {$/;"	f	class:kaldi::nnet2::DecodableAmNnetParallel
MakePair	nnet-compute-discriminative.cc	/^  static inline Int32Pair MakePair(int32 first, int32 second) {$/;"	f	class:kaldi::nnet2::NnetDiscriminativeUpdater
MaxoutComponent	nnet-component.h	/^  MaxoutComponent(): input_dim_(0), output_dim_(0) { }$/;"	f	class:kaldi::nnet2::MaxoutComponent
MaxoutComponent	nnet-component.h	/^  explicit MaxoutComponent(int32 input_dim, int32 output_dim) {$/;"	f	class:kaldi::nnet2::MaxoutComponent
MaxoutComponent	nnet-component.h	/^class MaxoutComponent: public Component {$/;"	c	namespace:kaldi::nnet2
MixUp	mixup-nnet.cc	/^void SoftmaxComponent::MixUp(int32 num_mixtures,$/;"	f	class:kaldi::nnet2::SoftmaxComponent
MixtureProbComponent	nnet-component.h	/^  MixtureProbComponent() { }$/;"	f	class:kaldi::nnet2::MixtureProbComponent
MixtureProbComponent	nnet-component.h	/^class MixtureProbComponent: public UpdatableComponent {$/;"	c	namespace:kaldi::nnet2
MixupNnet	mixup-nnet.cc	/^void MixupNnet(const NnetMixupConfig &mixup_config,$/;"	f	namespace:kaldi::nnet2
N_input_	nnet-component.h	/^  CuMatrix<BaseFloat> N_input_; \/\/ N matrix for input, of dimension rank x$/;"	m	class:kaldi::nnet2::AffineComponentPreconditionedOnline
N_mutex_	nnet-component.h	/^  Mutex N_mutex_;    \/\/ Mutex that locks the N values.  We use this for both$/;"	m	class:kaldi::nnet2::AffineComponentPreconditionedOnline
N_output_	nnet-component.h	/^  CuMatrix<BaseFloat> N_output_; \/\/ N matrix, of dimension rank x OutputDim()$/;"	m	class:kaldi::nnet2::AffineComponentPreconditionedOnline
NewComponentOfType	nnet-component.cc	/^Component* Component::NewComponentOfType(const std::string &component_type) {$/;"	f	class:kaldi::nnet2::Component
NewFromString	nnet-component.cc	/^Component* Component::NewFromString(const std::string &initializer_line) {$/;"	f	class:kaldi::nnet2::Component
Next	nnet-randomize.cc	/^void NnetDataRandomizer::Next() {$/;"	f	class:kaldi::nnet2::NnetDataRandomizer
Nnet	nnet-nnet.cc	/^Nnet::Nnet(const Nnet &other): components_(other.components_.size()) {$/;"	f	class:kaldi::nnet2::Nnet
Nnet	nnet-nnet.cc	/^Nnet::Nnet(const Nnet &other1, const Nnet &other2) {$/;"	f	class:kaldi::nnet2::Nnet
Nnet	nnet-nnet.h	/^  Nnet() {}$/;"	f	class:kaldi::nnet2::Nnet
Nnet	nnet-nnet.h	/^class Nnet {$/;"	c	namespace:kaldi::nnet2
NnetCombineAconfig	combine-nnet-a.h	/^  NnetCombineAconfig(): num_bfgs_iters(15), initial_step(0.1),$/;"	f	struct:kaldi::nnet2::NnetCombineAconfig
NnetCombineAconfig	combine-nnet-a.h	/^struct NnetCombineAconfig {$/;"	s	namespace:kaldi::nnet2
NnetCombineConfig	combine-nnet.h	/^  NnetCombineConfig(): initial_model(-1), num_bfgs_iters(30),$/;"	f	struct:kaldi::nnet2::NnetCombineConfig
NnetCombineConfig	combine-nnet.h	/^struct NnetCombineConfig {$/;"	s	namespace:kaldi::nnet2
NnetCombineFastConfig	combine-nnet-fast.h	/^  NnetCombineFastConfig(): initial_model(-1), num_lbfgs_iters(10),$/;"	f	struct:kaldi::nnet2::NnetCombineFastConfig
NnetCombineFastConfig	combine-nnet-fast.h	/^struct NnetCombineFastConfig {$/;"	s	namespace:kaldi::nnet2
NnetComputation	nnet-compute.cc	/^void NnetComputation(const Nnet &nnet,$/;"	f	namespace:kaldi::nnet2
NnetComputer	nnet-compute.cc	/^NnetComputer::NnetComputer(const Nnet &nnet,$/;"	f	class:kaldi::nnet2::NnetComputer
NnetComputer	nnet-compute.cc	/^class NnetComputer {$/;"	c	namespace:kaldi::nnet2	file:
NnetDataRandomizer	nnet-randomize.cc	/^NnetDataRandomizer::NnetDataRandomizer(int32 left_context_,$/;"	f	class:kaldi::nnet2::NnetDataRandomizer
NnetDataRandomizer	nnet-randomize.h	/^class NnetDataRandomizer {$/;"	c	namespace:kaldi::nnet2
NnetDataRandomizerConfig	nnet-randomize.h	/^  NnetDataRandomizerConfig(): num_samples(-1), num_epochs(-1) { }$/;"	f	struct:kaldi::nnet2::NnetDataRandomizerConfig
NnetDataRandomizerConfig	nnet-randomize.h	/^struct NnetDataRandomizerConfig {$/;"	s	namespace:kaldi::nnet2
NnetDiscriminativeStats	nnet-compute-discriminative.h	/^  NnetDiscriminativeStats() { std::memset(this, 0, sizeof(*this)); }$/;"	f	struct:kaldi::nnet2::NnetDiscriminativeStats
NnetDiscriminativeStats	nnet-compute-discriminative.h	/^struct NnetDiscriminativeStats {$/;"	s	namespace:kaldi::nnet2
NnetDiscriminativeUpdate	nnet-compute-discriminative.cc	/^void NnetDiscriminativeUpdate(const AmNnet &am_nnet,$/;"	f	namespace:kaldi::nnet2
NnetDiscriminativeUpdateOptions	nnet-compute-discriminative.h	/^  NnetDiscriminativeUpdateOptions(): criterion("smbr"), acoustic_scale(0.1),$/;"	f	struct:kaldi::nnet2::NnetDiscriminativeUpdateOptions
NnetDiscriminativeUpdateOptions	nnet-compute-discriminative.h	/^struct NnetDiscriminativeUpdateOptions {$/;"	s	namespace:kaldi::nnet2
NnetDiscriminativeUpdateParallel	nnet-compute-discriminative-parallel.cc	/^void NnetDiscriminativeUpdateParallel($/;"	f	namespace:kaldi::nnet2
NnetDiscriminativeUpdater	nnet-compute-discriminative.cc	/^NnetDiscriminativeUpdater::NnetDiscriminativeUpdater($/;"	f	class:kaldi::nnet2::NnetDiscriminativeUpdater
NnetDiscriminativeUpdater	nnet-compute-discriminative.cc	/^class NnetDiscriminativeUpdater {$/;"	c	namespace:kaldi::nnet2	file:
NnetExample	nnet-example.h	/^struct NnetExample {$/;"	s	namespace:kaldi::nnet2
NnetExampleWriter	nnet-example.h	/^typedef TableWriter<KaldiObjectHolder<NnetExample > > NnetExampleWriter;$/;"	t	namespace:kaldi::nnet2
NnetFixConfig	nnet-fix.h	/^  NnetFixConfig(): min_average_deriv(0.1), max_average_deriv(0.75),$/;"	f	struct:kaldi::nnet2::NnetFixConfig
NnetFixConfig	nnet-fix.h	/^struct NnetFixConfig {$/;"	s	namespace:kaldi::nnet2
NnetGradientComputation	nnet-compute.cc	/^BaseFloat NnetGradientComputation(const Nnet &nnet,$/;"	f	namespace:kaldi::nnet2
NnetLbfgsTrainer	nnet-lbfgs.h	/^  NnetLbfgsTrainer(const NnetLbfgsTrainerConfig &config): config_(config) { }$/;"	f	class:kaldi::nnet2::NnetLbfgsTrainer
NnetLbfgsTrainer	nnet-lbfgs.h	/^class NnetLbfgsTrainer {$/;"	c	namespace:kaldi::nnet2
NnetLbfgsTrainerConfig	nnet-lbfgs.h	/^  NnetLbfgsTrainerConfig(): minibatch_size(1024), lbfgs_dim(10),$/;"	f	struct:kaldi::nnet2::NnetLbfgsTrainerConfig
NnetLbfgsTrainerConfig	nnet-lbfgs.h	/^struct NnetLbfgsTrainerConfig {$/;"	s	namespace:kaldi::nnet2
NnetLimitRankOpts	nnet-limit-rank.h	/^  NnetLimitRankOpts(): num_threads(1), parameter_proportion(0.75) { }$/;"	f	struct:kaldi::nnet2::NnetLimitRankOpts
NnetLimitRankOpts	nnet-limit-rank.h	/^struct NnetLimitRankOpts {$/;"	s	namespace:kaldi::nnet2
NnetMixupConfig	mixup-nnet.h	/^  NnetMixupConfig(): power(0.25), min_count(1000.0),$/;"	f	struct:kaldi::nnet2::NnetMixupConfig
NnetMixupConfig	mixup-nnet.h	/^struct NnetMixupConfig {$/;"	s	namespace:kaldi::nnet2
NnetRescaleConfig	rescale-nnet.h	/^  NnetRescaleConfig(): target_avg_deriv(0.2),$/;"	f	struct:kaldi::nnet2::NnetRescaleConfig
NnetRescaleConfig	rescale-nnet.h	/^struct NnetRescaleConfig {$/;"	s	namespace:kaldi::nnet2
NnetRescaler	rescale-nnet.cc	/^  NnetRescaler(const NnetRescaleConfig &config,$/;"	f	class:kaldi::nnet2::NnetRescaler
NnetRescaler	rescale-nnet.cc	/^class NnetRescaler {$/;"	c	namespace:kaldi::nnet2	file:
NnetShrinkConfig	shrink-nnet.h	/^  NnetShrinkConfig(): num_bfgs_iters(10), initial_step(0.1) { }$/;"	f	struct:kaldi::nnet2::NnetShrinkConfig
NnetShrinkConfig	shrink-nnet.h	/^struct NnetShrinkConfig {$/;"	s	namespace:kaldi::nnet2
NnetSimpleTrainer	train-nnet.cc	/^NnetSimpleTrainer::NnetSimpleTrainer($/;"	f	class:kaldi::nnet2::NnetSimpleTrainer
NnetSimpleTrainer	train-nnet.h	/^class NnetSimpleTrainer {$/;"	c	namespace:kaldi::nnet2
NnetSimpleTrainerConfig	train-nnet.h	/^  NnetSimpleTrainerConfig(): minibatch_size(500),$/;"	f	struct:kaldi::nnet2::NnetSimpleTrainerConfig
NnetSimpleTrainerConfig	train-nnet.h	/^struct NnetSimpleTrainerConfig {$/;"	s	namespace:kaldi::nnet2
NnetStats	nnet-stats.h	/^  NnetStats(int32 affine_component_index, BaseFloat bucket_width):$/;"	f	class:kaldi::nnet2::NnetStats
NnetStats	nnet-stats.h	/^class NnetStats {$/;"	c	namespace:kaldi::nnet2
NnetStatsConfig	nnet-stats.h	/^  NnetStatsConfig(): bucket_width(0.025) { }$/;"	f	struct:kaldi::nnet2::NnetStatsConfig
NnetStatsConfig	nnet-stats.h	/^struct NnetStatsConfig {  $/;"	s	namespace:kaldi::nnet2
NnetUpdater	nnet-update.cc	/^NnetUpdater::NnetUpdater(const Nnet &nnet,$/;"	f	class:kaldi::nnet2::NnetUpdater
NnetUpdater	nnet-update.cc	/^class NnetUpdater {$/;"	c	namespace:kaldi::nnet2	file:
NnetWidenConfig	widen-nnet.h	/^  NnetWidenConfig(): hidden_layer_dim(-1),$/;"	f	struct:kaldi::nnet2::NnetWidenConfig
NnetWidenConfig	widen-nnet.h	/^struct NnetWidenConfig {$/;"	s	namespace:kaldi::nnet2
NonlinearComponent	nnet-component.cc	/^NonlinearComponent::NonlinearComponent(const NonlinearComponent &other):$/;"	f	class:kaldi::nnet2::NonlinearComponent
NonlinearComponent	nnet-component.h	/^  NonlinearComponent(): dim_(0) { } \/\/ e.g. prior to Read().$/;"	f	class:kaldi::nnet2::NonlinearComponent
NonlinearComponent	nnet-component.h	/^  explicit NonlinearComponent(int32 dim) { Init(dim); }$/;"	f	class:kaldi::nnet2::NonlinearComponent
NonlinearComponent	nnet-component.h	/^class NonlinearComponent: public Component {$/;"	c	namespace:kaldi::nnet2
NormalizeComponent	nnet-component.h	/^  NormalizeComponent() { }$/;"	f	class:kaldi::nnet2::NormalizeComponent
NormalizeComponent	nnet-component.h	/^  explicit NormalizeComponent(const NormalizeComponent &other): NonlinearComponent(other) { }$/;"	f	class:kaldi::nnet2::NormalizeComponent
NormalizeComponent	nnet-component.h	/^  explicit NormalizeComponent(int32 dim): NonlinearComponent(dim) { }$/;"	f	class:kaldi::nnet2::NormalizeComponent
NormalizeComponent	nnet-component.h	/^class NormalizeComponent: public NonlinearComponent {$/;"	c	namespace:kaldi::nnet2
NumComponents	nnet-nnet.h	/^  int32 NumComponents() const { return components_.size(); }$/;"	f	class:kaldi::nnet2::Nnet
NumFrames	decodable-am-nnet.h	/^  int32 NumFrames() { return log_probs_.NumRows(); }$/;"	f	class:kaldi::nnet2::DecodableAmNnet
NumFrames	decodable-am-nnet.h	/^  int32 NumFrames() {$/;"	f	class:kaldi::nnet2::DecodableAmNnetParallel
NumFrames	nnet-example-functions.cc	/^  int32 NumFrames() const { return static_cast<int32>(eg_.num_ali.size()); }$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
NumIndices	decodable-am-nnet.h	/^  virtual int32 NumIndices() { return trans_model_.NumTransitionIds(); }$/;"	f	class:kaldi::nnet2::DecodableAmNnet
NumIndices	decodable-am-nnet.h	/^  virtual int32 NumIndices() { return trans_model_.NumTransitionIds(); }$/;"	f	class:kaldi::nnet2::DecodableAmNnetParallel
NumPdfs	am-nnet.h	/^  int32 NumPdfs() const { return nnet_.OutputDim(); }$/;"	f	class:kaldi::nnet2::AmNnet
NumUpdatableComponents	nnet-nnet.cc	/^int32 Nnet::NumUpdatableComponents() const {$/;"	f	class:kaldi::nnet2::Nnet
OutputDim	nnet-component.cc	/^int32 SpliceComponent::OutputDim() const {$/;"	f	class:kaldi::nnet2::SpliceComponent
OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return dct_mat_.NumRows() * (dim_ \/ dct_mat_.NumCols()); }$/;"	f	class:kaldi::nnet2::DctComponent
OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::DropoutComponent
OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::InformationBottleneckComponent
OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::NonlinearComponent
OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::ScaleComponent
OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return linear_params_.NumRows(); }$/;"	f	class:kaldi::nnet2::AffineComponent
OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return linear_params_.NumRows(); }$/;"	f	class:kaldi::nnet2::BlockAffineComponent
OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return linear_params_.NumRows(); }$/;"	f	class:kaldi::nnet2::FixedAffineComponent
OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return mat_.NumRows(); }$/;"	f	class:kaldi::nnet2::FixedLinearComponent
OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return max_power_ * input_dim_; }$/;"	f	class:kaldi::nnet2::PowerExpandComponent
OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return output_dim_; }$/;"	f	class:kaldi::nnet2::MaxoutComponent
OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return output_dim_; }$/;"	f	class:kaldi::nnet2::MixtureProbComponent
OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return output_dim_; }$/;"	f	class:kaldi::nnet2::PnormComponent
OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return output_dim_; }$/;"	f	class:kaldi::nnet2::SumGroupComponent
OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return params_.NumRows(); }$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return reorder_.size(); }$/;"	f	class:kaldi::nnet2::PermuteComponent
OutputDim	nnet-nnet.cc	/^int32 Nnet::OutputDim() const {$/;"	f	class:kaldi::nnet2::Nnet
OutputOneSplit	nnet-example-functions.cc	/^void DiscriminativeExampleSplitter::OutputOneSplit(int32 seg_begin,$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
Params	nnet-component.h	/^  const CuMatrix<BaseFloat> &Params() { return params_; }$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
ParseFromString	nnet-component.cc	/^bool ParseFromString(const std::string &name, std::string *string,$/;"	f	namespace:kaldi::nnet2
PermuteComponent	nnet-component.h	/^  PermuteComponent() { } \/\/ e.g. prior to Read() or Init()$/;"	f	class:kaldi::nnet2::PermuteComponent
PermuteComponent	nnet-component.h	/^  PermuteComponent(int32 dim) { Init(dim); }$/;"	f	class:kaldi::nnet2::PermuteComponent
PermuteComponent	nnet-component.h	/^class PermuteComponent: public Component {$/;"	c	namespace:kaldi::nnet2
PerturbParams	nnet-component.cc	/^void AffineComponent::PerturbParams(BaseFloat stddev) {$/;"	f	class:kaldi::nnet2::AffineComponent
PerturbParams	nnet-component.cc	/^void BlockAffineComponent::PerturbParams(BaseFloat stddev) {$/;"	f	class:kaldi::nnet2::BlockAffineComponent
PerturbParams	nnet-component.cc	/^void MixtureProbComponent::PerturbParams(BaseFloat stddev) {$/;"	f	class:kaldi::nnet2::MixtureProbComponent
PerturbParams	nnet-component.cc	/^void PiecewiseLinearComponent::PerturbParams(BaseFloat stddev) {$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
PiecewiseLinearComponent	nnet-component.cc	/^PiecewiseLinearComponent::PiecewiseLinearComponent(const PiecewiseLinearComponent &component):$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
PiecewiseLinearComponent	nnet-component.h	/^  PiecewiseLinearComponent(): is_gradient_(false), max_change_(0.0) { } \/\/ use Init to really initialize.$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
PiecewiseLinearComponent	nnet-component.h	/^class PiecewiseLinearComponent: public UpdatableComponent {$/;"	c	namespace:kaldi::nnet2
PnormComponent	nnet-component.h	/^  PnormComponent(): input_dim_(0), output_dim_(0), p_(0) { }$/;"	f	class:kaldi::nnet2::PnormComponent
PnormComponent	nnet-component.h	/^  explicit PnormComponent(int32 input_dim, int32 output_dim, BaseFloat p) {$/;"	f	class:kaldi::nnet2::PnormComponent
PnormComponent	nnet-component.h	/^class PnormComponent: public Component {$/;"	c	namespace:kaldi::nnet2
PowerExpandComponent	nnet-component.h	/^  PowerExpandComponent(): input_dim_(0), max_power_(2),$/;"	f	class:kaldi::nnet2::PowerExpandComponent
PowerExpandComponent	nnet-component.h	/^  explicit PowerExpandComponent(int32 dim, int32 max_power = 2,$/;"	f	class:kaldi::nnet2::PowerExpandComponent
PowerExpandComponent	nnet-component.h	/^class PowerExpandComponent: public Component {$/;"	c	namespace:kaldi::nnet2
Precondition	nnet-component.cc	/^void AffineComponentA::Precondition($/;"	f	class:kaldi::nnet2::AffineComponentA
PreconditionConfig	nnet-component.h	/^  PreconditionConfig(): alpha(0.1), do_precondition(true),$/;"	f	struct:kaldi::nnet2::PreconditionConfig
PreconditionConfig	nnet-component.h	/^struct PreconditionConfig { \/\/ relates to AffineComponentA$/;"	s	namespace:kaldi::nnet2
PreconditionDirections	nnet-precondition.cc	/^void PreconditionDirections(const CuMatrixBase<BaseFloat> &R,$/;"	f	namespace:kaldi::nnet2
PreconditionDirectionsAlpha	nnet-precondition.cc	/^void PreconditionDirectionsAlpha($/;"	f	namespace:kaldi::nnet2
PreconditionDirectionsAlphaRescaled	nnet-precondition.cc	/^void PreconditionDirectionsAlphaRescaled($/;"	f	namespace:kaldi::nnet2
PreconditionDirectionsOnline	nnet-precondition-online.cc	/^void PreconditionDirectionsOnline(BaseFloat eta,$/;"	f	namespace:kaldi::nnet2
PreconditionDirectionsOnlineSimple	nnet-precondition-online-test.cc	/^void PreconditionDirectionsOnlineSimple(BaseFloat eta,$/;"	f	namespace:kaldi::nnet2
PreconditionNnet	nnet-lbfgs.cc	/^void PreconditionNnet(const PreconditionConfig &config,$/;"	f	namespace:kaldi::nnet2
PrepareLattice	nnet-example-functions.cc	/^void DiscriminativeExampleSplitter::PrepareLattice(bool first_time) {$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
Print	nnet-compute-discriminative.cc	/^void NnetDiscriminativeStats::Print(std::string criterion) {$/;"	f	class:kaldi::nnet2::NnetDiscriminativeStats
Print	nnet-example-functions.cc	/^void SplitExampleStats::Print() {$/;"	f	class:kaldi::nnet2::SplitExampleStats
PrintStats	nnet-stats.cc	/^void NnetStats::PrintStats(std::ostream &os) {$/;"	f	class:kaldi::nnet2::NnetStats
PrintStats	nnet-stats.cc	/^void NnetStats::StatsElement::PrintStats(std::ostream &os) {$/;"	f	class:kaldi::nnet2::NnetStats::StatsElement
Priors	am-nnet.h	/^  const VectorBase<BaseFloat> &Priors() const { return priors_; }$/;"	f	class:kaldi::nnet2::AmNnet
Propagate	nnet-component.cc	/^void AdditiveNoiseComponent::Propagate($/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
Propagate	nnet-component.cc	/^void AffineComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::AffineComponent
Propagate	nnet-component.cc	/^void BlockAffineComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::BlockAffineComponent
Propagate	nnet-component.cc	/^void DctComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::DctComponent
Propagate	nnet-component.cc	/^void DropoutComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::DropoutComponent
Propagate	nnet-component.cc	/^void FixedAffineComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::FixedAffineComponent
Propagate	nnet-component.cc	/^void FixedLinearComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::FixedLinearComponent
Propagate	nnet-component.cc	/^void InformationBottleneckComponent::Propagate($/;"	f	class:kaldi::nnet2::InformationBottleneckComponent
Propagate	nnet-component.cc	/^void MaxoutComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::MaxoutComponent
Propagate	nnet-component.cc	/^void MixtureProbComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::MixtureProbComponent
Propagate	nnet-component.cc	/^void NormalizeComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::NormalizeComponent
Propagate	nnet-component.cc	/^void PermuteComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::PermuteComponent
Propagate	nnet-component.cc	/^void PiecewiseLinearComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
Propagate	nnet-component.cc	/^void PnormComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::PnormComponent
Propagate	nnet-component.cc	/^void PowerExpandComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::PowerExpandComponent
Propagate	nnet-component.cc	/^void RectifiedLinearComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::RectifiedLinearComponent
Propagate	nnet-component.cc	/^void ScaleComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::ScaleComponent
Propagate	nnet-component.cc	/^void SigmoidComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::SigmoidComponent
Propagate	nnet-component.cc	/^void SoftHingeComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::SoftHingeComponent
Propagate	nnet-component.cc	/^void SoftmaxComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::SoftmaxComponent
Propagate	nnet-component.cc	/^void SpliceComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::SpliceComponent
Propagate	nnet-component.cc	/^void SpliceMaxComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
Propagate	nnet-component.cc	/^void SumGroupComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::SumGroupComponent
Propagate	nnet-component.cc	/^void TanhComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::TanhComponent
Propagate	nnet-compute-discriminative.cc	/^void NnetDiscriminativeUpdater::Propagate() {$/;"	f	class:kaldi::nnet2::NnetDiscriminativeUpdater
Propagate	nnet-compute.cc	/^void NnetComputer::Propagate() {$/;"	f	class:kaldi::nnet2::NnetComputer
Propagate	nnet-update.cc	/^void NnetUpdater::Propagate() {$/;"	f	class:kaldi::nnet2::NnetUpdater
ProvideExample	nnet-compute-discriminative-parallel.cc	/^DiscriminativeExamplesRepository::ProvideExample() {$/;"	f	class:kaldi::nnet2::DiscriminativeExamplesRepository
ProvideExamples	nnet-update-parallel.cc	/^bool ExamplesRepository::ProvideExamples($/;"	f	class:kaldi::nnet2::ExamplesRepository
RandomAccessDiscriminativeNnetExampleReader	nnet-example.h	/^   RandomAccessDiscriminativeNnetExampleReader;$/;"	t	namespace:kaldi::nnet2
RandomAccessNnetExampleReader	nnet-example.h	/^typedef RandomAccessTableReader<KaldiObjectHolder<NnetExample > > RandomAccessNnetExampleReader;$/;"	t	namespace:kaldi::nnet2
RandomComponent	nnet-component.h	/^class RandomComponent: public Component {$/;"	c	namespace:kaldi::nnet2
RandomizeSamples	nnet-randomize.cc	/^void NnetDataRandomizer::RandomizeSamples() {$/;"	f	class:kaldi::nnet2::NnetDataRandomizer
Read	am-nnet.cc	/^void AmNnet::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::AmNnet
Read	nnet-component.cc	/^void AdditiveNoiseComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
Read	nnet-component.cc	/^void AffineComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::AffineComponent
Read	nnet-component.cc	/^void AffineComponentA::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::AffineComponentA
Read	nnet-component.cc	/^void AffineComponentModified::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::AffineComponentModified
Read	nnet-component.cc	/^void AffineComponentPreconditioned::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
Read	nnet-component.cc	/^void AffineComponentPreconditionedOnline::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
Read	nnet-component.cc	/^void AffinePreconInputComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::AffinePreconInputComponent
Read	nnet-component.cc	/^void BlockAffineComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::BlockAffineComponent
Read	nnet-component.cc	/^void BlockAffineComponentPreconditioned::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::BlockAffineComponentPreconditioned
Read	nnet-component.cc	/^void DctComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::DctComponent
Read	nnet-component.cc	/^void DropoutComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::DropoutComponent
Read	nnet-component.cc	/^void FixedAffineComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::FixedAffineComponent
Read	nnet-component.cc	/^void FixedLinearComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::FixedLinearComponent
Read	nnet-component.cc	/^void InformationBottleneckComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::InformationBottleneckComponent
Read	nnet-component.cc	/^void MaxoutComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::MaxoutComponent
Read	nnet-component.cc	/^void MixtureProbComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::MixtureProbComponent
Read	nnet-component.cc	/^void NonlinearComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::NonlinearComponent
Read	nnet-component.cc	/^void PermuteComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::PermuteComponent
Read	nnet-component.cc	/^void PiecewiseLinearComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
Read	nnet-component.cc	/^void PnormComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::PnormComponent
Read	nnet-component.cc	/^void PowerExpandComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::PowerExpandComponent
Read	nnet-component.cc	/^void ScaleComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::ScaleComponent
Read	nnet-component.cc	/^void SpliceComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::SpliceComponent
Read	nnet-component.cc	/^void SpliceMaxComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
Read	nnet-component.cc	/^void SumGroupComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::SumGroupComponent
Read	nnet-example.cc	/^void DiscriminativeNnetExample::Read(std::istream &is,$/;"	f	class:kaldi::nnet2::DiscriminativeNnetExample
Read	nnet-example.cc	/^void NnetExample::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::NnetExample
Read	nnet-nnet.cc	/^void Nnet::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::Nnet
ReadNew	nnet-component.cc	/^Component* Component::ReadNew(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::Component
RectifiedLinearComponent	nnet-component.h	/^  RectifiedLinearComponent() { }$/;"	f	class:kaldi::nnet2::RectifiedLinearComponent
RectifiedLinearComponent	nnet-component.h	/^  explicit RectifiedLinearComponent(const RectifiedLinearComponent &other): NonlinearComponent(other) { }$/;"	f	class:kaldi::nnet2::RectifiedLinearComponent
RectifiedLinearComponent	nnet-component.h	/^  explicit RectifiedLinearComponent(int32 dim): NonlinearComponent(dim) { }$/;"	f	class:kaldi::nnet2::RectifiedLinearComponent
RectifiedLinearComponent	nnet-component.h	/^class RectifiedLinearComponent: public NonlinearComponent {$/;"	c	namespace:kaldi::nnet2
Refresh	nnet-component.cc	/^void MixtureProbComponent::Refresh() {$/;"	f	class:kaldi::nnet2::MixtureProbComponent
Register	combine-nnet-a.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetCombineAconfig
Register	combine-nnet-fast.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetCombineFastConfig
Register	combine-nnet.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetCombineConfig
Register	get-feature-transform.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::FeatureTransformEstimateOptions
Register	mixup-nnet.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetMixupConfig
Register	nnet-component.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::PreconditionConfig
Register	nnet-compute-discriminative.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetDiscriminativeUpdateOptions
Register	nnet-example-functions.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
Register	nnet-fix.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetFixConfig
Register	nnet-lbfgs.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetLbfgsTrainerConfig
Register	nnet-limit-rank.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetLimitRankOpts
Register	nnet-randomize.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetDataRandomizerConfig
Register	nnet-stats.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetStatsConfig
Register	rescale-nnet.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetRescaleConfig
Register	shrink-nnet.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetShrinkConfig
Register	train-nnet.h	/^  void Register (OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetSimpleTrainerConfig
Register	widen-nnet.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetWidenConfig
RemoveAllOutputSymbols	nnet-example-functions.cc	/^void DiscriminativeExampleSplitter::RemoveAllOutputSymbols(Lattice *lat) {$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
RemoveDropout	nnet-nnet.cc	/^void Nnet::RemoveDropout() {$/;"	f	class:kaldi::nnet2::Nnet
RemovePreconditioning	nnet-nnet.cc	/^void Nnet::RemovePreconditioning() {$/;"	f	class:kaldi::nnet2::Nnet
Reorder	nnet-component.cc	/^void DctComponent::Reorder(CuMatrixBase<BaseFloat> *mat, bool reverse) const {$/;"	f	class:kaldi::nnet2::DctComponent
Rescale	rescale-nnet.cc	/^void NnetRescaler::Rescale() {$/;"	f	class:kaldi::nnet2::NnetRescaler
RescaleComponent	rescale-nnet.cc	/^void NnetRescaler::RescaleComponent($/;"	f	class:kaldi::nnet2::NnetRescaler
RescaleNnet	rescale-nnet.cc	/^void RescaleNnet(const NnetRescaleConfig &rescale_config,$/;"	f	namespace:kaldi::nnet2
ResetGenerator	nnet-component.h	/^  void ResetGenerator() { random_generator_.SeedGpu(0); }$/;"	f	class:kaldi::nnet2::RandomComponent
ResetGenerators	nnet-nnet.cc	/^void Nnet::ResetGenerators() { \/\/ resets random-number generators for all random$/;"	f	class:kaldi::nnet2::Nnet
Resize	nnet-nnet.cc	/^void Nnet::Resize(int32 new_size) {$/;"	f	class:kaldi::nnet2::Nnet
RightContext	nnet-component.h	/^  virtual int32 RightContext() { return 0; }$/;"	f	class:kaldi::nnet2::Component
RightContext	nnet-component.h	/^  virtual int32 RightContext() { return right_context_; }$/;"	f	class:kaldi::nnet2::SpliceComponent
RightContext	nnet-component.h	/^  virtual int32 RightContext() { return right_context_; }$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
RightContext	nnet-example-functions.cc	/^  int32 RightContext() { return eg_.input_frames.NumRows() - NumFrames() - eg_.left_context; }$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
RightContext	nnet-nnet.cc	/^int32 Nnet::RightContext() const {$/;"	f	class:kaldi::nnet2::Nnet
Scale	nnet-component.cc	/^void AffineComponent::Scale(BaseFloat scale) {$/;"	f	class:kaldi::nnet2::AffineComponent
Scale	nnet-component.cc	/^void AffineComponentA::Scale(BaseFloat scale) {$/;"	f	class:kaldi::nnet2::AffineComponentA
Scale	nnet-component.cc	/^void BlockAffineComponent::Scale(BaseFloat scale) {$/;"	f	class:kaldi::nnet2::BlockAffineComponent
Scale	nnet-component.cc	/^void MixtureProbComponent::Scale(BaseFloat scale) {$/;"	f	class:kaldi::nnet2::MixtureProbComponent
Scale	nnet-component.cc	/^void NonlinearComponent::Scale(BaseFloat scale) {$/;"	f	class:kaldi::nnet2::NonlinearComponent
Scale	nnet-component.cc	/^void PiecewiseLinearComponent::Scale(BaseFloat scale) {$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
Scale	nnet-nnet.cc	/^void Nnet::Scale(BaseFloat scale) {$/;"	f	class:kaldi::nnet2::Nnet
ScaleComponent	nnet-component.h	/^  ScaleComponent(): dim_(0), scale_(0.0) { }$/;"	f	class:kaldi::nnet2::ScaleComponent
ScaleComponent	nnet-component.h	/^  explicit ScaleComponent(const ScaleComponent &other):$/;"	f	class:kaldi::nnet2::ScaleComponent
ScaleComponent	nnet-component.h	/^  explicit ScaleComponent(int32 dim, BaseFloat scale): dim_(dim), scale_(scale) { }$/;"	f	class:kaldi::nnet2::ScaleComponent
ScaleComponent	nnet-component.h	/^class ScaleComponent: public Component {$/;"	c	namespace:kaldi::nnet2
ScaleComponents	nnet-nnet.cc	/^void Nnet::ScaleComponents(const VectorBase<BaseFloat> &scale_params) {$/;"	f	class:kaldi::nnet2::Nnet
ScaleLearningRates	nnet-nnet.cc	/^void Nnet::ScaleLearningRates(BaseFloat factor) {$/;"	f	class:kaldi::nnet2::Nnet
SequentialDiscriminativeNnetExampleReader	nnet-example.h	/^   SequentialDiscriminativeNnetExampleReader;$/;"	t	namespace:kaldi::nnet2
SequentialNnetExampleReader	nnet-example.h	/^typedef SequentialTableReader<KaldiObjectHolder<NnetExample > > SequentialNnetExampleReader;$/;"	t	namespace:kaldi::nnet2
SetComponent	nnet-nnet.cc	/^void Nnet::SetComponent(int32 c, Component *component) {$/;"	f	class:kaldi::nnet2::Nnet
SetDim	nnet-component.cc	/^void NonlinearComponent::SetDim(int32 dim) {$/;"	f	class:kaldi::nnet2::NonlinearComponent
SetDropoutScale	nnet-component.h	/^  void SetDropoutScale(BaseFloat scale) { dropout_scale_ = scale; }$/;"	f	class:kaldi::nnet2::DropoutComponent
SetDropoutScale	nnet-nnet.cc	/^void Nnet::SetDropoutScale(BaseFloat scale) {$/;"	f	class:kaldi::nnet2::Nnet
SetIndex	nnet-component.h	/^  virtual void SetIndex(int32 index) { index_ = index; }$/;"	f	class:kaldi::nnet2::Component
SetIndexes	nnet-nnet.cc	/^void Nnet::SetIndexes() {$/;"	f	class:kaldi::nnet2::Nnet
SetLearningRate	nnet-component.h	/^  void SetLearningRate(BaseFloat lrate) {  learning_rate_ = lrate; }$/;"	f	class:kaldi::nnet2::UpdatableComponent
SetLearningRates	nnet-nnet.cc	/^void Nnet::SetLearningRates(BaseFloat learning_rate) {$/;"	f	class:kaldi::nnet2::Nnet
SetLearningRates	nnet-nnet.cc	/^void Nnet::SetLearningRates(const VectorBase<BaseFloat> &learning_rates) {$/;"	f	class:kaldi::nnet2::Nnet
SetMaxChange	nnet-component.h	/^  void SetMaxChange(BaseFloat max_change) { max_change_ = max_change; }$/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
SetParams	nnet-component.cc	/^void AffineComponent::SetParams(const VectorBase<BaseFloat> &bias,$/;"	f	class:kaldi::nnet2::AffineComponent
SetPriors	am-nnet.cc	/^void AmNnet::SetPriors(const VectorBase<BaseFloat> &priors) {$/;"	f	class:kaldi::nnet2::AmNnet
SetZero	nnet-component.cc	/^void AffineComponent::SetZero(bool treat_as_gradient) {$/;"	f	class:kaldi::nnet2::AffineComponent
SetZero	nnet-component.cc	/^void AffinePreconInputComponent::SetZero(bool treat_as_gradient) {$/;"	f	class:kaldi::nnet2::AffinePreconInputComponent
SetZero	nnet-component.cc	/^void BlockAffineComponent::SetZero(bool treat_as_gradient) {$/;"	f	class:kaldi::nnet2::BlockAffineComponent
SetZero	nnet-component.cc	/^void BlockAffineComponentPreconditioned::SetZero(bool treat_as_gradient) {$/;"	f	class:kaldi::nnet2::BlockAffineComponentPreconditioned
SetZero	nnet-component.cc	/^void MixtureProbComponent::SetZero(bool treat_as_gradient) {$/;"	f	class:kaldi::nnet2::MixtureProbComponent
SetZero	nnet-component.cc	/^void PiecewiseLinearComponent::SetZero(bool treat_as_gradient) {$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
SetZero	nnet-nnet.cc	/^void Nnet::SetZero(bool treat_as_gradient) {$/;"	f	class:kaldi::nnet2::Nnet
ShrinkNnet	shrink-nnet.cc	/^void ShrinkNnet(const NnetShrinkConfig &shrink_config,$/;"	f	namespace:kaldi::nnet2
SigmoidComponent	nnet-component.h	/^  SigmoidComponent() { }$/;"	f	class:kaldi::nnet2::SigmoidComponent
SigmoidComponent	nnet-component.h	/^  explicit SigmoidComponent(const SigmoidComponent &other): NonlinearComponent(other) { }    $/;"	f	class:kaldi::nnet2::SigmoidComponent
SigmoidComponent	nnet-component.h	/^  explicit SigmoidComponent(int32 dim): NonlinearComponent(dim) { }$/;"	f	class:kaldi::nnet2::SigmoidComponent
SigmoidComponent	nnet-component.h	/^class SigmoidComponent: public NonlinearComponent {$/;"	c	namespace:kaldi::nnet2
SoftHingeComponent	nnet-component.h	/^  SoftHingeComponent() { }$/;"	f	class:kaldi::nnet2::SoftHingeComponent
SoftHingeComponent	nnet-component.h	/^  explicit SoftHingeComponent(const SoftHingeComponent &other): NonlinearComponent(other) { }$/;"	f	class:kaldi::nnet2::SoftHingeComponent
SoftHingeComponent	nnet-component.h	/^  explicit SoftHingeComponent(int32 dim): NonlinearComponent(dim) { }$/;"	f	class:kaldi::nnet2::SoftHingeComponent
SoftHingeComponent	nnet-component.h	/^class SoftHingeComponent: public NonlinearComponent {$/;"	c	namespace:kaldi::nnet2
SoftmaxComponent	nnet-component.h	/^  SoftmaxComponent() { }$/;"	f	class:kaldi::nnet2::SoftmaxComponent
SoftmaxComponent	nnet-component.h	/^  explicit SoftmaxComponent(const SoftmaxComponent &other): NonlinearComponent(other) { }  $/;"	f	class:kaldi::nnet2::SoftmaxComponent
SoftmaxComponent	nnet-component.h	/^  explicit SoftmaxComponent(int32 dim): NonlinearComponent(dim) { }$/;"	f	class:kaldi::nnet2::SoftmaxComponent
SoftmaxComponent	nnet-component.h	/^class SoftmaxComponent: public NonlinearComponent {$/;"	c	namespace:kaldi::nnet2
SolvePackingProblem	nnet-example-functions.cc	/^void SolvePackingProblem(BaseFloat max_cost,$/;"	f	namespace:kaldi::nnet2
SpliceComponent	nnet-component.h	/^  SpliceComponent() { }  \/\/ called only prior to Read() or Init().$/;"	f	class:kaldi::nnet2::SpliceComponent
SpliceComponent	nnet-component.h	/^class SpliceComponent: public Component {$/;"	c	namespace:kaldi::nnet2
SpliceMaxComponent	nnet-component.h	/^  SpliceMaxComponent() { }  \/\/ called only prior to Read() or Init().$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
SpliceMaxComponent	nnet-component.h	/^class SpliceMaxComponent: public Component {$/;"	c	namespace:kaldi::nnet2
Split	nnet-example-functions.cc	/^  void Split(SplitExampleStats *stats) {$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
SplitDiscriminativeExample	nnet-example-functions.cc	/^void SplitDiscriminativeExample($/;"	f	namespace:kaldi::nnet2
SplitDiscriminativeExampleConfig	nnet-example-functions.h	/^  SplitDiscriminativeExampleConfig():$/;"	f	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
SplitDiscriminativeExampleConfig	nnet-example-functions.h	/^struct SplitDiscriminativeExampleConfig {$/;"	s	namespace:kaldi::nnet2
SplitExampleStats	nnet-example-functions.h	/^  SplitExampleStats() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:kaldi::nnet2::SplitExampleStats
SplitExampleStats	nnet-example-functions.h	/^struct SplitExampleStats {$/;"	s	namespace:kaldi::nnet2
StateId	nnet-compute-discriminative.cc	/^  typedef Arc::StateId StateId;$/;"	t	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
StateId	nnet-example-functions.cc	/^  typedef Arc::StateId StateId;$/;"	t	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
StatsElement	nnet-stats.h	/^    StatsElement(BaseFloat deriv_begin,$/;"	f	struct:kaldi::nnet2::NnetStats::StatsElement
StatsElement	nnet-stats.h	/^  struct StatsElement {$/;"	s	class:kaldi::nnet2::NnetStats
SumGroupComponent	nnet-component.h	/^  SumGroupComponent() { }$/;"	f	class:kaldi::nnet2::SumGroupComponent
SumGroupComponent	nnet-component.h	/^class SumGroupComponent: public Component {$/;"	c	namespace:kaldi::nnet2
TanhComponent	nnet-component.h	/^  TanhComponent() { }$/;"	f	class:kaldi::nnet2::TanhComponent
TanhComponent	nnet-component.h	/^  explicit TanhComponent(const TanhComponent &other): NonlinearComponent(other) { }$/;"	f	class:kaldi::nnet2::TanhComponent
TanhComponent	nnet-component.h	/^  explicit TanhComponent(int32 dim): NonlinearComponent(dim) { }$/;"	f	class:kaldi::nnet2::TanhComponent
TanhComponent	nnet-component.h	/^class TanhComponent: public NonlinearComponent {$/;"	c	namespace:kaldi::nnet2
TotalNnetTrainingWeight	nnet-update.cc	/^BaseFloat TotalNnetTrainingWeight(const std::vector<NnetExample> &egs) {$/;"	f	namespace:kaldi::nnet2
Train	nnet-lbfgs.cc	/^void NnetLbfgsTrainer::Train(Nnet *nnet_in) {$/;"	f	class:kaldi::nnet2::NnetLbfgsTrainer
TrainOnExample	train-nnet.cc	/^void NnetSimpleTrainer::TrainOnExample(const NnetExample &value) {$/;"	f	class:kaldi::nnet2::NnetSimpleTrainer
TrainOneMinibatch	train-nnet.cc	/^void NnetSimpleTrainer::TrainOneMinibatch() {$/;"	f	class:kaldi::nnet2::NnetSimpleTrainer
TrainingFile	nnet-randomize.h	/^    TrainingFile(const MatrixBase<BaseFloat> &feats_in,$/;"	f	struct:kaldi::nnet2::NnetDataRandomizer::TrainingFile
TrainingFile	nnet-randomize.h	/^  struct TrainingFile {$/;"	s	class:kaldi::nnet2::NnetDataRandomizer
Transform	nnet-component.cc	/^void AffineComponentA::Transform($/;"	f	class:kaldi::nnet2::AffineComponentA
Type	nnet-component.h	/^  virtual std::string Type() const { return "AdditiveNoiseComponent"; }$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
Type	nnet-component.h	/^  virtual std::string Type() const { return "AffineComponent"; }$/;"	f	class:kaldi::nnet2::AffineComponent
Type	nnet-component.h	/^  virtual std::string Type() const { return "AffineComponentA"; }$/;"	f	class:kaldi::nnet2::AffineComponentA
Type	nnet-component.h	/^  virtual std::string Type() const { return "AffineComponentModified"; }$/;"	f	class:kaldi::nnet2::AffineComponentModified
Type	nnet-component.h	/^  virtual std::string Type() const { return "AffineComponentPreconditioned"; }$/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
Type	nnet-component.h	/^  virtual std::string Type() const { return "AffinePreconInputComponent"; }$/;"	f	class:kaldi::nnet2::AffinePreconInputComponent
Type	nnet-component.h	/^  virtual std::string Type() const { return "BlockAffineComponent"; }$/;"	f	class:kaldi::nnet2::BlockAffineComponent
Type	nnet-component.h	/^  virtual std::string Type() const { return "BlockAffineComponentPreconditioned"; }$/;"	f	class:kaldi::nnet2::BlockAffineComponentPreconditioned
Type	nnet-component.h	/^  virtual std::string Type() const { return "DctComponent"; }$/;"	f	class:kaldi::nnet2::DctComponent
Type	nnet-component.h	/^  virtual std::string Type() const { return "DropoutComponent"; }$/;"	f	class:kaldi::nnet2::DropoutComponent
Type	nnet-component.h	/^  virtual std::string Type() const { return "FixedAffineComponent"; }$/;"	f	class:kaldi::nnet2::FixedAffineComponent
Type	nnet-component.h	/^  virtual std::string Type() const { return "FixedLinearComponent"; }$/;"	f	class:kaldi::nnet2::FixedLinearComponent
Type	nnet-component.h	/^  virtual std::string Type() const { return "InformationBottleneckComponent"; }$/;"	f	class:kaldi::nnet2::InformationBottleneckComponent
Type	nnet-component.h	/^  virtual std::string Type() const { return "MaxoutComponent"; }$/;"	f	class:kaldi::nnet2::MaxoutComponent
Type	nnet-component.h	/^  virtual std::string Type() const { return "MixtureProbComponent"; }$/;"	f	class:kaldi::nnet2::MixtureProbComponent
Type	nnet-component.h	/^  virtual std::string Type() const { return "NormalizeComponent"; }$/;"	f	class:kaldi::nnet2::NormalizeComponent
Type	nnet-component.h	/^  virtual std::string Type() const { return "PermuteComponent"; }$/;"	f	class:kaldi::nnet2::PermuteComponent
Type	nnet-component.h	/^  virtual std::string Type() const { return "PiecewiseLinearComponent"; }$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
Type	nnet-component.h	/^  virtual std::string Type() const { return "PnormComponent"; }$/;"	f	class:kaldi::nnet2::PnormComponent
Type	nnet-component.h	/^  virtual std::string Type() const { return "PowerExpandComponent"; }$/;"	f	class:kaldi::nnet2::PowerExpandComponent
Type	nnet-component.h	/^  virtual std::string Type() const { return "RectifiedLinearComponent"; }$/;"	f	class:kaldi::nnet2::RectifiedLinearComponent
Type	nnet-component.h	/^  virtual std::string Type() const { return "ScaleComponent"; }$/;"	f	class:kaldi::nnet2::ScaleComponent
Type	nnet-component.h	/^  virtual std::string Type() const { return "SigmoidComponent"; }$/;"	f	class:kaldi::nnet2::SigmoidComponent
Type	nnet-component.h	/^  virtual std::string Type() const { return "SoftHingeComponent"; }$/;"	f	class:kaldi::nnet2::SoftHingeComponent
Type	nnet-component.h	/^  virtual std::string Type() const { return "SoftmaxComponent"; }  \/\/ Make it lower case$/;"	f	class:kaldi::nnet2::SoftmaxComponent
Type	nnet-component.h	/^  virtual std::string Type() const { return "SpliceComponent"; }$/;"	f	class:kaldi::nnet2::SpliceComponent
Type	nnet-component.h	/^  virtual std::string Type() const { return "SpliceMaxComponent"; }$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
Type	nnet-component.h	/^  virtual std::string Type() const { return "SumGroupComponent"; }$/;"	f	class:kaldi::nnet2::SumGroupComponent
Type	nnet-component.h	/^  virtual std::string Type() const { return "TanhComponent"; }$/;"	f	class:kaldi::nnet2::TanhComponent
Type	nnet-component.h	/^  virtual std::string Type() const {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
UnVectorize	nnet-component.cc	/^void AffineComponent::UnVectorize(const VectorBase<BaseFloat> &params) {$/;"	f	class:kaldi::nnet2::AffineComponent
UnVectorize	nnet-component.cc	/^void BlockAffineComponent::UnVectorize(const VectorBase<BaseFloat> &params) {$/;"	f	class:kaldi::nnet2::BlockAffineComponent
UnVectorize	nnet-component.cc	/^void MixtureProbComponent::UnVectorize(const VectorBase<BaseFloat> &params) {$/;"	f	class:kaldi::nnet2::MixtureProbComponent
UnVectorize	nnet-component.cc	/^void PiecewiseLinearComponent::UnVectorize(const VectorBase<BaseFloat> &params) {$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
UnVectorize	nnet-component.h	/^  virtual void UnVectorize(const VectorBase<BaseFloat> &params) {$/;"	f	class:kaldi::nnet2::UpdatableComponent
UnVectorize	nnet-nnet.cc	/^void Nnet::UnVectorize(const VectorBase<BaseFloat> &params) {$/;"	f	class:kaldi::nnet2::Nnet
UnitTestAdditiveNoiseComponent	nnet-component-test.cc	/^void UnitTestAdditiveNoiseComponent() {$/;"	f	namespace:kaldi::nnet2
UnitTestAffineComponent	nnet-component-test.cc	/^void UnitTestAffineComponent() {$/;"	f	namespace:kaldi::nnet2
UnitTestAffineComponentModified	nnet-component-test.cc	/^void UnitTestAffineComponentModified() {$/;"	f	namespace:kaldi::nnet2
UnitTestAffineComponentPreconditioned	nnet-component-test.cc	/^void UnitTestAffineComponentPreconditioned() {$/;"	f	namespace:kaldi::nnet2
UnitTestAffineComponentPreconditionedOnline	nnet-component-test.cc	/^void UnitTestAffineComponentPreconditionedOnline() {$/;"	f	namespace:kaldi::nnet2
UnitTestAffinePreconInputComponent	nnet-component-test.cc	/^void UnitTestAffinePreconInputComponent() {$/;"	f	namespace:kaldi::nnet2
UnitTestBlockAffineComponent	nnet-component-test.cc	/^void UnitTestBlockAffineComponent() {$/;"	f	namespace:kaldi::nnet2
UnitTestBlockAffineComponentPreconditioned	nnet-component-test.cc	/^void UnitTestBlockAffineComponentPreconditioned() {$/;"	f	namespace:kaldi::nnet2
UnitTestDctComponent	nnet-component-test.cc	/^void UnitTestDctComponent() {$/;"	f	namespace:kaldi::nnet2
UnitTestDropoutComponent	nnet-component-test.cc	/^void UnitTestDropoutComponent() {$/;"	f	namespace:kaldi::nnet2
UnitTestFixedAffineComponent	nnet-component-test.cc	/^void UnitTestFixedAffineComponent() {$/;"	f	namespace:kaldi::nnet2
UnitTestFixedLinearComponent	nnet-component-test.cc	/^void UnitTestFixedLinearComponent() {$/;"	f	namespace:kaldi::nnet2
UnitTestGenericComponent	nnet-component-test.cc	/^void UnitTestGenericComponent(std::string extra_str = "") {$/;"	f	namespace:kaldi::nnet2
UnitTestGenericComponentInternal	nnet-component-test.cc	/^void UnitTestGenericComponentInternal(const Component &component) {$/;"	f	namespace:kaldi::nnet2
UnitTestInformationBottleneckComponent	nnet-component-test.cc	/^void UnitTestInformationBottleneckComponent() {$/;"	f	namespace:kaldi::nnet2
UnitTestMaxoutComponent	nnet-component-test.cc	/^void UnitTestMaxoutComponent() {$/;"	f	namespace:kaldi::nnet2
UnitTestMixtureProbComponent	nnet-component-test.cc	/^void UnitTestMixtureProbComponent() {$/;"	f	namespace:kaldi::nnet2
UnitTestParsing	nnet-component-test.cc	/^void UnitTestParsing() {$/;"	f	namespace:kaldi::nnet2
UnitTestPiecewiseLinearComponent	nnet-component-test.cc	/^void UnitTestPiecewiseLinearComponent() {$/;"	f	namespace:kaldi::nnet2
UnitTestPnormComponent	nnet-component-test.cc	/^void UnitTestPnormComponent() {$/;"	f	namespace:kaldi::nnet2
UnitTestPreconditionDirections	nnet-precondition-test.cc	/^void UnitTestPreconditionDirections() {$/;"	f	namespace:kaldi::nnet2
UnitTestPreconditionDirectionsOnline	nnet-precondition-online-test.cc	/^void UnitTestPreconditionDirectionsOnline() {$/;"	f	namespace:kaldi::nnet2
UnitTestScaleComponent	nnet-component-test.cc	/^void UnitTestScaleComponent() {$/;"	f	namespace:kaldi::nnet2
UnitTestSigmoidComponent	nnet-component-test.cc	/^void UnitTestSigmoidComponent() {$/;"	f	namespace:kaldi::nnet2
UnitTestSolvePackingProblem	nnet-example-functions-test.cc	/^void UnitTestSolvePackingProblem() {$/;"	f	namespace:kaldi::nnet2
UnitTestSumGroupComponent	nnet-component-test.cc	/^void UnitTestSumGroupComponent() {$/;"	f	namespace:kaldi::nnet2
UpdatableComponent	nnet-component.h	/^  UpdatableComponent(): learning_rate_(0.001) { }$/;"	f	class:kaldi::nnet2::UpdatableComponent
UpdatableComponent	nnet-component.h	/^  UpdatableComponent(BaseFloat learning_rate) {$/;"	f	class:kaldi::nnet2::UpdatableComponent
UpdatableComponent	nnet-component.h	/^  UpdatableComponent(const UpdatableComponent &other):$/;"	f	class:kaldi::nnet2::UpdatableComponent
UpdatableComponent	nnet-component.h	/^class UpdatableComponent: public Component {$/;"	c	namespace:kaldi::nnet2
Update	nnet-component.cc	/^void AffineComponentModified::Update($/;"	f	class:kaldi::nnet2::AffineComponentModified
Update	nnet-component.cc	/^void AffineComponentPreconditioned::Update($/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
Update	nnet-component.cc	/^void AffineComponentPreconditionedOnline::Update($/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
Update	nnet-component.cc	/^void BlockAffineComponentPreconditioned::Update($/;"	f	class:kaldi::nnet2::BlockAffineComponentPreconditioned
Update	nnet-component.h	/^  virtual void Update($/;"	f	class:kaldi::nnet2::AffineComponent
Update	nnet-component.h	/^  virtual void Update($/;"	f	class:kaldi::nnet2::BlockAffineComponent
Update	nnet-compute-discriminative.cc	/^  void Update() {$/;"	f	class:kaldi::nnet2::NnetDiscriminativeUpdater
UpdateHash	nnet-example-functions.cc	/^void UpdateHash($/;"	f	namespace:kaldi::nnet2
UpdateSimple	nnet-component.cc	/^void AffineComponent::UpdateSimple(const CuMatrixBase<BaseFloat> &in_value,$/;"	f	class:kaldi::nnet2::AffineComponent
UpdateSimple	nnet-component.cc	/^void AffineComponentA::UpdateSimple($/;"	f	class:kaldi::nnet2::AffineComponentA
UpdateSimple	nnet-component.cc	/^void BlockAffineComponent::UpdateSimple($/;"	f	class:kaldi::nnet2::BlockAffineComponent
UpdateStats	nnet-component.cc	/^void NonlinearComponent::UpdateStats(const CuMatrixBase<BaseFloat> &out_value,$/;"	f	class:kaldi::nnet2::NonlinearComponent
Value	nnet-randomize.cc	/^const NnetExample &NnetDataRandomizer::Value() {$/;"	f	class:kaldi::nnet2::NnetDataRandomizer
ValueSum	nnet-component.h	/^  const CuVector<double> &ValueSum() const { return value_sum_; }$/;"	f	class:kaldi::nnet2::NonlinearComponent
Vectorize	nnet-component.cc	/^void AffineComponent::Vectorize(VectorBase<BaseFloat> *params) const {$/;"	f	class:kaldi::nnet2::AffineComponent
Vectorize	nnet-component.cc	/^void BlockAffineComponent::Vectorize(VectorBase<BaseFloat> *params) const {$/;"	f	class:kaldi::nnet2::BlockAffineComponent
Vectorize	nnet-component.cc	/^void MixtureProbComponent::Vectorize(VectorBase<BaseFloat> *params) const {$/;"	f	class:kaldi::nnet2::MixtureProbComponent
Vectorize	nnet-component.cc	/^void PiecewiseLinearComponent::Vectorize(VectorBase<BaseFloat> *params) const {$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
Vectorize	nnet-component.h	/^  virtual void Vectorize(VectorBase<BaseFloat> *params) const { KALDI_ASSERT(0); }$/;"	f	class:kaldi::nnet2::UpdatableComponent
Vectorize	nnet-nnet.cc	/^void Nnet::Vectorize(VectorBase<BaseFloat> *params) const {$/;"	f	class:kaldi::nnet2::Nnet
Widen	widen-nnet.cc	/^void AffineComponent::Widen(int32 new_dim,$/;"	f	class:kaldi::nnet2::AffineComponent
WidenNnet	widen-nnet.cc	/^void WidenNnet(const NnetWidenConfig &widen_config,$/;"	f	namespace:kaldi::nnet2
Write	am-nnet.cc	/^void AmNnet::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::AmNnet
Write	nnet-component.cc	/^void AdditiveNoiseComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
Write	nnet-component.cc	/^void AffineComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::AffineComponent
Write	nnet-component.cc	/^void AffineComponentA::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::AffineComponentA
Write	nnet-component.cc	/^void AffineComponentModified::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::AffineComponentModified
Write	nnet-component.cc	/^void AffineComponentPreconditioned::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
Write	nnet-component.cc	/^void AffineComponentPreconditionedOnline::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
Write	nnet-component.cc	/^void AffinePreconInputComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::AffinePreconInputComponent
Write	nnet-component.cc	/^void BlockAffineComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::BlockAffineComponent
Write	nnet-component.cc	/^void BlockAffineComponentPreconditioned::Write(std::ostream &os,$/;"	f	class:kaldi::nnet2::BlockAffineComponentPreconditioned
Write	nnet-component.cc	/^void DctComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::DctComponent
Write	nnet-component.cc	/^void DropoutComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::DropoutComponent
Write	nnet-component.cc	/^void FixedAffineComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::FixedAffineComponent
Write	nnet-component.cc	/^void FixedLinearComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::FixedLinearComponent
Write	nnet-component.cc	/^void InformationBottleneckComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::InformationBottleneckComponent
Write	nnet-component.cc	/^void MaxoutComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::MaxoutComponent
Write	nnet-component.cc	/^void MixtureProbComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::MixtureProbComponent
Write	nnet-component.cc	/^void NonlinearComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::NonlinearComponent
Write	nnet-component.cc	/^void PermuteComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::PermuteComponent
Write	nnet-component.cc	/^void PiecewiseLinearComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
Write	nnet-component.cc	/^void PnormComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::PnormComponent
Write	nnet-component.cc	/^void PowerExpandComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::PowerExpandComponent
Write	nnet-component.cc	/^void ScaleComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::ScaleComponent
Write	nnet-component.cc	/^void SpliceComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::SpliceComponent
Write	nnet-component.cc	/^void SpliceMaxComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
Write	nnet-component.cc	/^void SumGroupComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::SumGroupComponent
Write	nnet-example.cc	/^void DiscriminativeNnetExample::Write(std::ostream &os,$/;"	f	class:kaldi::nnet2::DiscriminativeNnetExample
Write	nnet-example.cc	/^void NnetExample::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::NnetExample
Write	nnet-nnet.cc	/^void Nnet::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::Nnet
ZeroStats	nnet-nnet.cc	/^void Nnet::ZeroStats() {$/;"	f	class:kaldi::nnet2::Nnet
abs_value_sum	nnet-stats.h	/^    BaseFloat abs_value_sum; \/\/ Sum of abs(avg-value).  Tells us whether it's$/;"	m	struct:kaldi::nnet2::NnetStats::StatsElement
abs_value_sumsq	nnet-stats.h	/^    BaseFloat abs_value_sumsq; \/\/ Sum-squared of abs(avg-value).$/;"	m	struct:kaldi::nnet2::NnetStats::StatsElement
acoustic_scale	nnet-compute-discriminative.h	/^  BaseFloat acoustic_scale; \/\/ e.g. 0.1$/;"	m	struct:kaldi::nnet2::NnetDiscriminativeUpdateOptions
affine_component_index_	nnet-stats.h	/^  int32 affine_component_index_; \/\/ Component index of the affine component$/;"	m	class:kaldi::nnet2::NnetStats
alpha	combine-nnet-fast.h	/^  BaseFloat alpha; \/\/ A smoothing value we use in getting the Fisher matrix.$/;"	m	struct:kaldi::nnet2::NnetCombineFastConfig
alpha	nnet-component.h	/^  BaseFloat alpha;$/;"	m	struct:kaldi::nnet2::PreconditionConfig
alpha_	nnet-component.h	/^  BaseFloat alpha_;$/;"	m	class:kaldi::nnet2::AffineComponentPreconditioned
alpha_	nnet-component.h	/^  BaseFloat alpha_;$/;"	m	class:kaldi::nnet2::BlockAffineComponentPreconditioned
am_nnet_	decodable-am-nnet.h	/^  const AmNnet &am_nnet_;$/;"	m	class:kaldi::nnet2::DecodableAmNnetParallel
am_nnet_	nnet-compute-discriminative-parallel.cc	/^  const AmNnet &am_nnet_;$/;"	m	class:kaldi::nnet2::DiscTrainParallelClass	file:
am_nnet_	nnet-compute-discriminative.cc	/^  const AmNnet &am_nnet_;$/;"	m	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
avg_samples_	nnet-component.h	/^  BaseFloat avg_samples_; \/\/ Config parameter; determines how many samples$/;"	m	class:kaldi::nnet2::AffinePreconInputComponent
backward_data_	nnet-compute-discriminative.cc	/^  CuMatrix<BaseFloat> backward_data_;$/;"	m	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
bias_params_	nnet-component.h	/^  CuVector<BaseFloat> bias_params_;$/;"	m	class:kaldi::nnet2::AffineComponent
bias_params_	nnet-component.h	/^  CuVector<BaseFloat> bias_params_;$/;"	m	class:kaldi::nnet2::BlockAffineComponent
bias_params_	nnet-component.h	/^  CuVector<BaseFloat> bias_params_;$/;"	m	class:kaldi::nnet2::FixedAffineComponent
bias_stddev	widen-nnet.h	/^  BaseFloat bias_stddev;$/;"	m	struct:kaldi::nnet2::NnetWidenConfig
boost	nnet-compute-discriminative.h	/^  BaseFloat boost; \/\/ for MMI, boosting factor (would be Boosted MMI)... e.g. 0.1.$/;"	m	struct:kaldi::nnet2::NnetDiscriminativeUpdateOptions
bucket_width	nnet-stats.h	/^  BaseFloat bucket_width;$/;"	m	struct:kaldi::nnet2::NnetStatsConfig
bucket_width_	nnet-stats.h	/^  BaseFloat bucket_width_; \/\/ width of buckets of stats we store (in derivative values).$/;"	m	class:kaldi::nnet2::NnetStats
buckets_	nnet-stats.h	/^  std::vector<StatsElement> buckets_; \/\/ Stats divided into buckets by avg_deriv.$/;"	m	class:kaldi::nnet2::NnetStats
buffer_	train-nnet.h	/^  std::vector<NnetExample> buffer_;$/;"	m	class:kaldi::nnet2::NnetSimpleTrainer
buffer_size_	nnet-compute-discriminative-parallel.cc	/^  int32 buffer_size_;$/;"	m	class:kaldi::nnet2::DiscriminativeExamplesRepository	file:
c_	nnet-limit-rank.cc	/^  int32 c_;$/;"	m	class:kaldi::nnet2::LimitRankClass	file:
can_excise_frame	nnet-example-functions.cc	/^    bool can_excise_frame; \/\/ True if the frame, if part of a segment, can be$/;"	m	struct:kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo	file:
chunk_weights_	nnet-update.cc	/^  CuVector<BaseFloat> chunk_weights_;$/;"	m	class:kaldi::nnet2::NnetUpdater	file:
collapse_transition_ids	nnet-example-functions.h	/^  bool collapse_transition_ids;$/;"	m	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
components_	nnet-nnet.h	/^  std::vector<Component*> components_;$/;"	m	class:kaldi::nnet2::Nnet
config_	combine-nnet-fast.cc	/^  const NnetCombineFastConfig &config_;$/;"	m	class:kaldi::nnet2::FastNnetCombiner	file:
config_	nnet-example-functions.cc	/^  const SplitDiscriminativeExampleConfig &config_;$/;"	m	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
config_	nnet-lbfgs.h	/^  const NnetLbfgsTrainerConfig &config_;$/;"	m	class:kaldi::nnet2::NnetLbfgsTrainer
config_	nnet-randomize.h	/^  NnetDataRandomizerConfig config_;    $/;"	m	class:kaldi::nnet2::NnetDataRandomizer
config_	rescale-nnet.cc	/^  const NnetRescaleConfig &config_;$/;"	m	class:kaldi::nnet2::NnetRescaler	file:
config_	train-nnet.h	/^  NnetSimpleTrainerConfig config_;$/;"	m	class:kaldi::nnet2::NnetSimpleTrainer
const_component_dim_	nnet-component.h	/^  int32 const_component_dim_;$/;"	m	class:kaldi::nnet2::SpliceComponent
count	nnet-stats.h	/^    int32 count;      \/\/ Number of nonlinearities in this bucket.$/;"	m	struct:kaldi::nnet2::NnetStats::StatsElement
count_	nnet-component.h	/^  BaseFloat count_;$/;"	m	class:kaldi::nnet2::InformationBottleneckComponent
count_	nnet-component.h	/^  double count_;$/;"	m	class:kaldi::nnet2::NonlinearComponent
count_this_phase_	train-nnet.h	/^  double count_this_phase_; \/\/ count corresponding to the above.$/;"	m	class:kaldi::nnet2::NnetSimpleTrainer
criterion	nnet-compute-discriminative.h	/^  std::string criterion; \/\/ "mmi" or "mpfe" or "smbr"$/;"	m	struct:kaldi::nnet2::NnetDiscriminativeUpdateOptions
criterion	nnet-example-functions.h	/^  std::string criterion;$/;"	m	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
cur_example_	nnet-randomize.h	/^  NnetExample cur_example_; \/\/ Returned from Value().  NnetDataRandomizerConfig_ config_;$/;"	m	class:kaldi::nnet2::NnetDataRandomizer
cutoff_length_	nnet-component.h	/^  BaseFloat cutoff_length_; \/\/\/ If the length of the vector corresponding to$/;"	m	class:kaldi::nnet2::AffineComponentModified
data_	nnet-randomize.h	/^  std::vector<TrainingFile*> data_;$/;"	m	class:kaldi::nnet2::NnetDataRandomizer
dct_mat_	nnet-component.h	/^  CuMatrix<BaseFloat> dct_mat_;$/;"	m	class:kaldi::nnet2::DctComponent
delta	rescale-nnet.h	/^  BaseFloat delta;$/;"	m	struct:kaldi::nnet2::NnetRescaleConfig
den_lat	nnet-example.h	/^  CompactLattice den_lat; $/;"	m	struct:kaldi::nnet2::DiscriminativeNnetExample
den_pdf_count	nnet-example-functions.cc	/^    int32 den_pdf_count; \/\/ number of distinct pdfs in denominator lattice$/;"	m	struct:kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo	file:
den_state_count	nnet-example-functions.cc	/^    int32 den_state_count;$/;"	m	struct:kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo	file:
deriv_begin	nnet-stats.h	/^    BaseFloat deriv_begin; \/\/ avg-deriv, beginning of bucket.$/;"	m	struct:kaldi::nnet2::NnetStats::StatsElement
deriv_end	nnet-stats.h	/^    BaseFloat deriv_end;   \/\/ avg-deriv, end of bucket.$/;"	m	struct:kaldi::nnet2::NnetStats::StatsElement
deriv_sum	nnet-stats.h	/^    BaseFloat deriv_sum;   \/\/ sum of avg-deriv within bucket.$/;"	m	struct:kaldi::nnet2::NnetStats::StatsElement
deriv_sum_	nnet-component.h	/^  CuVector<double> deriv_sum_; \/\/ stats of the derivative of the nonlinearity (only$/;"	m	class:kaldi::nnet2::NonlinearComponent
deriv_sumsq	nnet-stats.h	/^    BaseFloat deriv_sumsq;   \/\/ Sum-squared of avg-deriv within bucket.$/;"	m	struct:kaldi::nnet2::NnetStats::StatsElement
determinize	nnet-example-functions.h	/^  bool determinize;$/;"	m	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
dim	get-feature-transform.h	/^  int32 dim;$/;"	m	struct:kaldi::FeatureTransformEstimateOptions
dim_	nnet-component.h	/^  int32 dim_;  $/;"	m	class:kaldi::nnet2::AdditiveNoiseComponent
dim_	nnet-component.h	/^  int32 dim_;  $/;"	m	class:kaldi::nnet2::DropoutComponent
dim_	nnet-component.h	/^  int32 dim_;  $/;"	m	class:kaldi::nnet2::InformationBottleneckComponent
dim_	nnet-component.h	/^  int32 dim_; \/\/ The input dimension of the (sub)vector.$/;"	m	class:kaldi::nnet2::DctComponent
dim_	nnet-component.h	/^  int32 dim_;$/;"	m	class:kaldi::nnet2::NonlinearComponent
dim_	nnet-component.h	/^  int32 dim_;$/;"	m	class:kaldi::nnet2::ScaleComponent
dim_	nnet-component.h	/^  int32 dim_;$/;"	m	class:kaldi::nnet2::SpliceMaxComponent
do_precondition	nnet-component.h	/^  bool do_precondition;$/;"	m	struct:kaldi::nnet2::PreconditionConfig
done_	nnet-compute-discriminative-parallel.cc	/^  bool done_;$/;"	m	class:kaldi::nnet2::DiscriminativeExamplesRepository	file:
done_	nnet-update-parallel.cc	/^  bool done_;$/;"	m	class:kaldi::nnet2::ExamplesRepository	file:
drop_frames	nnet-compute-discriminative.h	/^  bool drop_frames; \/\/ for MMI, true if we ignore frames where alignment$/;"	m	struct:kaldi::nnet2::NnetDiscriminativeUpdateOptions
drop_frames	nnet-example-functions.h	/^  bool drop_frames; \/\/ For MMI, true if we will eventually drop frames in which$/;"	m	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
dropout_proportion_	nnet-component.h	/^  BaseFloat dropout_proportion_;$/;"	m	class:kaldi::nnet2::DropoutComponent
dropout_scale_	nnet-component.h	/^  BaseFloat dropout_scale_; \/\/ Set the scale that we scale "dropout_proportion_"$/;"	m	class:kaldi::nnet2::DropoutComponent
eg_	nnet-compute-discriminative.cc	/^  const DiscriminativeNnetExample &eg_;$/;"	m	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
eg_	nnet-example-functions.cc	/^  const DiscriminativeNnetExample &eg_;$/;"	m	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
egs_	combine-nnet-fast.cc	/^  const std::vector<NnetExample> &egs_;$/;"	m	class:kaldi::nnet2::FastNnetCombiner	file:
egs_	combine-nnet-fast.cc	/^  const std::vector<NnetExample> &egs_;$/;"	m	class:kaldi::nnet2::FisherComputationClass	file:
egs_	nnet-lbfgs.h	/^  std::vector<NnetExample> egs_;  $/;"	m	class:kaldi::nnet2::NnetLbfgsTrainer
egs_out_	nnet-example-functions.cc	/^  std::vector<DiscriminativeNnetExample> *egs_out_;$/;"	m	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
empty_semaphore_	nnet-compute-discriminative-parallel.cc	/^  Semaphore empty_semaphore_;$/;"	m	class:kaldi::nnet2::DiscriminativeExamplesRepository	file:
empty_semaphore_	nnet-update-parallel.cc	/^  Semaphore empty_semaphore_;$/;"	m	class:kaldi::nnet2::ExamplesRepository	file:
end_state	nnet-example-functions.cc	/^    StateId end_state;  $/;"	m	struct:kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo	file:
eta_	nnet-component.h	/^  BaseFloat eta_;$/;"	m	class:kaldi::nnet2::AffineComponentPreconditionedOnline
examples_	nnet-compute-discriminative-parallel.cc	/^  std::deque<DiscriminativeNnetExample*> examples_;$/;"	m	class:kaldi::nnet2::DiscriminativeExamplesRepository	file:
examples_	nnet-update-parallel.cc	/^  std::vector<NnetExample> examples_;$/;"	m	class:kaldi::nnet2::ExamplesRepository	file:
examples_	rescale-nnet.cc	/^  const std::vector<NnetExample> &examples_;$/;"	m	class:kaldi::nnet2::NnetRescaler	file:
examples_mutex_	nnet-compute-discriminative-parallel.cc	/^  Mutex examples_mutex_; \/\/ mutex we lock to modify examples_.$/;"	m	class:kaldi::nnet2::DiscriminativeExamplesRepository	file:
excise	nnet-example-functions.h	/^  bool excise; \/\/ if false, we will skip the "excise" step.$/;"	m	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
feats	nnet-randomize.h	/^    CompressedMatrix feats;$/;"	m	struct:kaldi::nnet2::NnetDataRandomizer::TrainingFile
feats_	decodable-am-nnet.h	/^  const CuMatrix<BaseFloat> *feats_;$/;"	m	class:kaldi::nnet2::DecodableAmNnetParallel
fisher_floor	combine-nnet-fast.h	/^  BaseFloat fisher_floor; \/\/ Flooring value we use for Fisher matrix (mainly$/;"	m	struct:kaldi::nnet2::NnetCombineFastConfig
fisher_minibatch_size	combine-nnet-fast.h	/^  int32 fisher_minibatch_size; \/\/ e.g. 64; a relatively small minibatch size we$/;"	m	struct:kaldi::nnet2::NnetCombineFastConfig
forward_data_	nnet-compute-discriminative.cc	/^  std::vector<CuMatrix<BaseFloat> > forward_data_; $/;"	m	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
forward_data_	nnet-compute.cc	/^  std::vector<CuMatrix<BaseFloat> > forward_data_;$/;"	m	class:kaldi::nnet2::NnetComputer	file:
forward_data_	nnet-update.cc	/^  std::vector<CuMatrix<BaseFloat> > forward_data_; \/\/ The forward data$/;"	m	class:kaldi::nnet2::NnetUpdater	file:
frame_info_	nnet-example-functions.cc	/^  std::vector<FrameInfo> frame_info_;$/;"	m	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
full_semaphore_	nnet-compute-discriminative-parallel.cc	/^  Semaphore full_semaphore_;$/;"	m	class:kaldi::nnet2::DiscriminativeExamplesRepository	file:
full_semaphore_	nnet-update-parallel.cc	/^  Semaphore full_semaphore_;$/;"	m	class:kaldi::nnet2::ExamplesRepository	file:
global_	nnet-stats.h	/^  StatsElement global_; \/\/ All the stats.$/;"	m	class:kaldi::nnet2::NnetStats
hidden_layer_dim	widen-nnet.h	/^  int32 hidden_layer_dim;$/;"	m	struct:kaldi::nnet2::NnetWidenConfig
higher_power_scale_	nnet-component.h	/^  BaseFloat higher_power_scale_; \/\/ Scale put on all powers$/;"	m	class:kaldi::nnet2::PowerExpandComponent
in_C_	nnet-component.h	/^  CuTpMatrix<double> in_C_;$/;"	m	class:kaldi::nnet2::AffineComponentA
in_C_inv_	nnet-component.h	/^  CuTpMatrix<double> in_C_inv_;$/;"	m	class:kaldi::nnet2::AffineComponentA
index_	nnet-component.h	/^  int32 index_;$/;"	m	class:kaldi::nnet2::Component
indexes_	nnet-component.h	/^  CuArray<Int32Pair> indexes_; \/\/ for each output index, the (start, end) input$/;"	m	class:kaldi::nnet2::SumGroupComponent
initial_impr	combine-nnet-fast.h	/^  BaseFloat initial_impr;$/;"	m	struct:kaldi::nnet2::NnetCombineFastConfig
initial_impr	combine-nnet.h	/^  BaseFloat initial_impr;$/;"	m	struct:kaldi::nnet2::NnetCombineConfig
initial_impr	nnet-lbfgs.h	/^  BaseFloat initial_impr;$/;"	m	struct:kaldi::nnet2::NnetLbfgsTrainerConfig
initial_model	combine-nnet-fast.h	/^  int32 initial_model; \/\/ If provided, the index of the initial model to start$/;"	m	struct:kaldi::nnet2::NnetCombineFastConfig
initial_model	combine-nnet.h	/^  int32 initial_model; \/\/ If provided, the index of the initial model to start$/;"	m	struct:kaldi::nnet2::NnetCombineConfig
initial_objf_	nnet-lbfgs.h	/^  BaseFloat initial_objf_;$/;"	m	class:kaldi::nnet2::NnetLbfgsTrainer
initial_step	combine-nnet-a.h	/^  BaseFloat initial_step;$/;"	m	struct:kaldi::nnet2::NnetCombineAconfig
initial_step	shrink-nnet.h	/^  BaseFloat initial_step;$/;"	m	struct:kaldi::nnet2::NnetShrinkConfig
input_dim_	nnet-component.h	/^  int32 input_dim_;$/;"	m	class:kaldi::nnet2::MaxoutComponent
input_dim_	nnet-component.h	/^  int32 input_dim_;$/;"	m	class:kaldi::nnet2::MixtureProbComponent
input_dim_	nnet-component.h	/^  int32 input_dim_;$/;"	m	class:kaldi::nnet2::PnormComponent
input_dim_	nnet-component.h	/^  int32 input_dim_;$/;"	m	class:kaldi::nnet2::PowerExpandComponent
input_dim_	nnet-component.h	/^  int32 input_dim_;$/;"	m	class:kaldi::nnet2::SpliceComponent
input_dim_	nnet-component.h	/^  int32 input_dim_;$/;"	m	class:kaldi::nnet2::SumGroupComponent
input_frames	nnet-example.h	/^  CompressedMatrix input_frames; $/;"	m	struct:kaldi::nnet2::NnetExample
input_frames	nnet-example.h	/^  Matrix<BaseFloat> input_frames;$/;"	m	struct:kaldi::nnet2::DiscriminativeNnetExample
input_precision_	nnet-component.h	/^  CuVector<BaseFloat> input_precision_; \/\/ Inverse variance of input features; used$/;"	m	class:kaldi::nnet2::AffinePreconInputComponent
input_scatter_	nnet-component.h	/^  CuSpMatrix<double> input_scatter_; \/\/ scatter of (input vectors extended with 1.)$/;"	m	class:kaldi::nnet2::AffineComponentA
inv_fisher_in_	nnet-component.h	/^  CuSpMatrix<double> inv_fisher_in_;$/;"	m	class:kaldi::nnet2::AffineComponentA
inv_fisher_out_	nnet-component.h	/^  CuSpMatrix<double> inv_fisher_out_;$/;"	m	class:kaldi::nnet2::AffineComponentA
is_gradient_	nnet-component.h	/^  bool is_gradient_; \/\/ If true, treat this as just a gradient.$/;"	m	class:kaldi::nnet2::AffineComponent
is_gradient_	nnet-component.h	/^  bool is_gradient_; \/\/ If true, treat this as just a gradient.$/;"	m	class:kaldi::nnet2::PiecewiseLinearComponent
is_gradient_	nnet-component.h	/^  bool is_gradient_; \/\/ Set this to true if we consider this as a gradient.$/;"	m	class:kaldi::nnet2::AffinePreconInputComponent
is_gradient_	nnet-component.h	/^  bool is_gradient_;$/;"	m	class:kaldi::nnet2::BlockAffineComponentPreconditioned
kNormFloor	nnet-component.cc	/^const BaseFloat NormalizeComponent::kNormFloor = pow(2.0, -66);$/;"	m	class:kaldi::nnet2::NormalizeComponent	file:
kNormFloor	nnet-component.h	/^  static const BaseFloat kNormFloor;$/;"	m	class:kaldi::nnet2::NormalizeComponent
kaldi	am-nnet.cc	/^namespace kaldi {$/;"	n	file:
kaldi	am-nnet.h	/^namespace kaldi {$/;"	n
kaldi	combine-nnet-a.cc	/^namespace kaldi {$/;"	n	file:
kaldi	combine-nnet-a.h	/^namespace kaldi {$/;"	n
kaldi	combine-nnet-fast.cc	/^namespace kaldi {$/;"	n	file:
kaldi	combine-nnet-fast.h	/^namespace kaldi {$/;"	n
kaldi	combine-nnet.cc	/^namespace kaldi {$/;"	n	file:
kaldi	combine-nnet.h	/^namespace kaldi {$/;"	n
kaldi	decodable-am-nnet.h	/^namespace kaldi {$/;"	n
kaldi	get-feature-transform.cc	/^namespace kaldi {$/;"	n	file:
kaldi	get-feature-transform.h	/^namespace kaldi {$/;"	n
kaldi	mixup-nnet.cc	/^namespace kaldi {$/;"	n	file:
kaldi	mixup-nnet.h	/^namespace kaldi {$/;"	n
kaldi	nnet-component-test.cc	/^namespace kaldi {$/;"	n	file:
kaldi	nnet-component.cc	/^namespace kaldi {$/;"	n	file:
kaldi	nnet-component.h	/^namespace kaldi {$/;"	n
kaldi	nnet-compute-discriminative-parallel.cc	/^namespace kaldi {$/;"	n	file:
kaldi	nnet-compute-discriminative-parallel.h	/^namespace kaldi {$/;"	n
kaldi	nnet-compute-discriminative.cc	/^namespace kaldi {$/;"	n	file:
kaldi	nnet-compute-discriminative.h	/^namespace kaldi {$/;"	n
kaldi	nnet-compute.cc	/^namespace kaldi {$/;"	n	file:
kaldi	nnet-compute.h	/^namespace kaldi {$/;"	n
kaldi	nnet-example-functions-test.cc	/^namespace kaldi {$/;"	n	file:
kaldi	nnet-example-functions.cc	/^namespace kaldi {$/;"	n	file:
kaldi	nnet-example-functions.h	/^namespace kaldi {$/;"	n
kaldi	nnet-example.cc	/^namespace kaldi {$/;"	n	file:
kaldi	nnet-example.h	/^namespace kaldi {$/;"	n
kaldi	nnet-fix.cc	/^namespace kaldi {$/;"	n	file:
kaldi	nnet-fix.h	/^namespace kaldi {$/;"	n
kaldi	nnet-functions.cc	/^namespace kaldi {$/;"	n	file:
kaldi	nnet-functions.h	/^namespace kaldi {$/;"	n
kaldi	nnet-lbfgs.cc	/^namespace kaldi {$/;"	n	file:
kaldi	nnet-lbfgs.h	/^namespace kaldi {$/;"	n
kaldi	nnet-limit-rank.cc	/^namespace kaldi {$/;"	n	file:
kaldi	nnet-limit-rank.h	/^namespace kaldi {$/;"	n
kaldi	nnet-nnet.cc	/^namespace kaldi {$/;"	n	file:
kaldi	nnet-nnet.h	/^namespace kaldi {$/;"	n
kaldi	nnet-precondition-online-test.cc	/^namespace kaldi {$/;"	n	file:
kaldi	nnet-precondition-online.cc	/^namespace kaldi {$/;"	n	file:
kaldi	nnet-precondition-online.h	/^namespace kaldi {$/;"	n
kaldi	nnet-precondition-test.cc	/^namespace kaldi {$/;"	n	file:
kaldi	nnet-precondition.cc	/^namespace kaldi {$/;"	n	file:
kaldi	nnet-precondition.h	/^namespace kaldi {$/;"	n
kaldi	nnet-randomize.cc	/^namespace kaldi {$/;"	n	file:
kaldi	nnet-randomize.h	/^namespace kaldi {$/;"	n
kaldi	nnet-stats.cc	/^namespace kaldi {$/;"	n	file:
kaldi	nnet-stats.h	/^namespace kaldi {$/;"	n
kaldi	nnet-update-parallel.cc	/^namespace kaldi {$/;"	n	file:
kaldi	nnet-update-parallel.h	/^namespace kaldi {$/;"	n
kaldi	nnet-update.cc	/^namespace kaldi {$/;"	n	file:
kaldi	nnet-update.h	/^namespace kaldi {$/;"	n
kaldi	rescale-nnet.cc	/^namespace kaldi {$/;"	n	file:
kaldi	rescale-nnet.h	/^namespace kaldi {$/;"	n
kaldi	shrink-nnet.cc	/^namespace kaldi {$/;"	n	file:
kaldi	shrink-nnet.h	/^namespace kaldi {$/;"	n
kaldi	train-nnet.cc	/^namespace kaldi {$/;"	n	file:
kaldi	train-nnet.h	/^namespace kaldi {$/;"	n
kaldi	widen-nnet.cc	/^namespace kaldi {$/;"	n	file:
kaldi	widen-nnet.h	/^namespace kaldi {$/;"	n
kaldi::FeatureTransformEstimate	get-feature-transform.h	/^class FeatureTransformEstimate: public LdaEstimate {$/;"	c	namespace:kaldi
kaldi::FeatureTransformEstimate::Estimate	get-feature-transform.cc	/^void FeatureTransformEstimate::Estimate(const FeatureTransformEstimateOptions &opts,$/;"	f	class:kaldi::FeatureTransformEstimate
kaldi::FeatureTransformEstimate::EstimateInternal	get-feature-transform.cc	/^void FeatureTransformEstimate::EstimateInternal($/;"	f	class:kaldi::FeatureTransformEstimate
kaldi::FeatureTransformEstimateMulti	get-feature-transform.h	/^class FeatureTransformEstimateMulti: public FeatureTransformEstimate {$/;"	c	namespace:kaldi
kaldi::FeatureTransformEstimateMulti::Estimate	get-feature-transform.cc	/^void FeatureTransformEstimateMulti::Estimate($/;"	f	class:kaldi::FeatureTransformEstimateMulti
kaldi::FeatureTransformEstimateMulti::EstimateTransformPart	get-feature-transform.cc	/^void FeatureTransformEstimateMulti::EstimateTransformPart($/;"	f	class:kaldi::FeatureTransformEstimateMulti
kaldi::FeatureTransformEstimateOptions	get-feature-transform.h	/^struct FeatureTransformEstimateOptions {$/;"	s	namespace:kaldi
kaldi::FeatureTransformEstimateOptions::FeatureTransformEstimateOptions	get-feature-transform.h	/^  FeatureTransformEstimateOptions(): remove_offset(true), dim(200),$/;"	f	struct:kaldi::FeatureTransformEstimateOptions
kaldi::FeatureTransformEstimateOptions::Register	get-feature-transform.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::FeatureTransformEstimateOptions
kaldi::FeatureTransformEstimateOptions::dim	get-feature-transform.h	/^  int32 dim;$/;"	m	struct:kaldi::FeatureTransformEstimateOptions
kaldi::FeatureTransformEstimateOptions::max_singular_value	get-feature-transform.h	/^  BaseFloat max_singular_value;$/;"	m	struct:kaldi::FeatureTransformEstimateOptions
kaldi::FeatureTransformEstimateOptions::remove_offset	get-feature-transform.h	/^  bool remove_offset;$/;"	m	struct:kaldi::FeatureTransformEstimateOptions
kaldi::FeatureTransformEstimateOptions::within_class_factor	get-feature-transform.h	/^  BaseFloat within_class_factor;$/;"	m	struct:kaldi::FeatureTransformEstimateOptions
kaldi::nnet2	am-nnet.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
kaldi::nnet2	am-nnet.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
kaldi::nnet2	combine-nnet-a.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
kaldi::nnet2	combine-nnet-a.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
kaldi::nnet2	combine-nnet-fast.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
kaldi::nnet2	combine-nnet-fast.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
kaldi::nnet2	combine-nnet.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
kaldi::nnet2	combine-nnet.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
kaldi::nnet2	decodable-am-nnet.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
kaldi::nnet2	mixup-nnet.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
kaldi::nnet2	mixup-nnet.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
kaldi::nnet2	nnet-component-test.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
kaldi::nnet2	nnet-component.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
kaldi::nnet2	nnet-component.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
kaldi::nnet2	nnet-compute-discriminative-parallel.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
kaldi::nnet2	nnet-compute-discriminative-parallel.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
kaldi::nnet2	nnet-compute-discriminative.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
kaldi::nnet2	nnet-compute-discriminative.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
kaldi::nnet2	nnet-compute.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
kaldi::nnet2	nnet-compute.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
kaldi::nnet2	nnet-example-functions-test.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
kaldi::nnet2	nnet-example-functions.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
kaldi::nnet2	nnet-example-functions.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
kaldi::nnet2	nnet-example.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
kaldi::nnet2	nnet-example.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
kaldi::nnet2	nnet-fix.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
kaldi::nnet2	nnet-fix.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
kaldi::nnet2	nnet-functions.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
kaldi::nnet2	nnet-functions.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
kaldi::nnet2	nnet-lbfgs.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
kaldi::nnet2	nnet-lbfgs.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
kaldi::nnet2	nnet-limit-rank.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
kaldi::nnet2	nnet-limit-rank.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
kaldi::nnet2	nnet-nnet.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
kaldi::nnet2	nnet-nnet.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
kaldi::nnet2	nnet-precondition-online-test.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
kaldi::nnet2	nnet-precondition-online.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
kaldi::nnet2	nnet-precondition-online.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
kaldi::nnet2	nnet-precondition-test.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
kaldi::nnet2	nnet-precondition.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
kaldi::nnet2	nnet-precondition.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
kaldi::nnet2	nnet-randomize.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
kaldi::nnet2	nnet-randomize.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
kaldi::nnet2	nnet-stats.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
kaldi::nnet2	nnet-stats.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
kaldi::nnet2	nnet-update-parallel.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
kaldi::nnet2	nnet-update-parallel.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
kaldi::nnet2	nnet-update.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
kaldi::nnet2	nnet-update.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
kaldi::nnet2	rescale-nnet.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
kaldi::nnet2	rescale-nnet.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
kaldi::nnet2	shrink-nnet.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
kaldi::nnet2	shrink-nnet.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
kaldi::nnet2	train-nnet.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
kaldi::nnet2	train-nnet.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
kaldi::nnet2	widen-nnet.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
kaldi::nnet2	widen-nnet.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
kaldi::nnet2::AddDirection	combine-nnet-a.cc	/^static void AddDirection(const Nnet &orig_nnet,$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::AdditiveNoiseComponent	nnet-component.h	/^class AdditiveNoiseComponent: public RandomComponent {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::AdditiveNoiseComponent::AdditiveNoiseComponent	nnet-component.h	/^  AdditiveNoiseComponent(): dim_(0), stddev_(1.0) { }$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
kaldi::nnet2::AdditiveNoiseComponent::AdditiveNoiseComponent	nnet-component.h	/^  AdditiveNoiseComponent(int32 dim, BaseFloat stddev) { Init(dim, stddev); }$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
kaldi::nnet2::AdditiveNoiseComponent::Backprop	nnet-component.h	/^  virtual void Backprop(const CuMatrixBase<BaseFloat> &in_value,$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
kaldi::nnet2::AdditiveNoiseComponent::BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
kaldi::nnet2::AdditiveNoiseComponent::BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }  $/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
kaldi::nnet2::AdditiveNoiseComponent::Copy	nnet-component.h	/^  virtual Component* Copy() const {$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
kaldi::nnet2::AdditiveNoiseComponent::Init	nnet-component.cc	/^void AdditiveNoiseComponent::Init(int32 dim, BaseFloat stddev) {$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
kaldi::nnet2::AdditiveNoiseComponent::InitFromString	nnet-component.cc	/^void AdditiveNoiseComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
kaldi::nnet2::AdditiveNoiseComponent::InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
kaldi::nnet2::AdditiveNoiseComponent::OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
kaldi::nnet2::AdditiveNoiseComponent::Propagate	nnet-component.cc	/^void AdditiveNoiseComponent::Propagate($/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
kaldi::nnet2::AdditiveNoiseComponent::Read	nnet-component.cc	/^void AdditiveNoiseComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
kaldi::nnet2::AdditiveNoiseComponent::Type	nnet-component.h	/^  virtual std::string Type() const { return "AdditiveNoiseComponent"; }$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
kaldi::nnet2::AdditiveNoiseComponent::Write	nnet-component.cc	/^void AdditiveNoiseComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::AdditiveNoiseComponent
kaldi::nnet2::AdditiveNoiseComponent::dim_	nnet-component.h	/^  int32 dim_;  $/;"	m	class:kaldi::nnet2::AdditiveNoiseComponent
kaldi::nnet2::AdditiveNoiseComponent::stddev_	nnet-component.h	/^  BaseFloat stddev_;$/;"	m	class:kaldi::nnet2::AdditiveNoiseComponent
kaldi::nnet2::AffineComponent	nnet-component.h	/^class AffineComponent: public UpdatableComponent {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::AffineComponent::Add	nnet-component.cc	/^void AffineComponent::Add(BaseFloat alpha, const UpdatableComponent &other_in) {$/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::AffineComponent	nnet-component.cc	/^AffineComponent::AffineComponent(const AffineComponent &component):$/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::AffineComponent	nnet-component.h	/^  AffineComponent(): is_gradient_(false) { } \/\/ use Init to really initialize.$/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::Backprop	nnet-component.cc	/^void AffineComponent::Backprop(const CuMatrixBase<BaseFloat> &in_value,$/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::BiasParams	nnet-component.h	/^  const CuVector<BaseFloat> &BiasParams() { return bias_params_; }$/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::CollapseWithNext	nnet-component.cc	/^Component *AffineComponent::CollapseWithNext($/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::CollapseWithPrevious	nnet-component.cc	/^Component *AffineComponent::CollapseWithPrevious($/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::Copy	nnet-component.cc	/^Component* AffineComponent::Copy() const {$/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::DotProduct	nnet-component.cc	/^BaseFloat AffineComponent::DotProduct(const UpdatableComponent &other_in) const {$/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::GetParameterDim	nnet-component.cc	/^int32 AffineComponent::GetParameterDim() const {$/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::Info	nnet-component.cc	/^std::string AffineComponent::Info() const {$/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::Init	nnet-component.cc	/^void AffineComponent::Init(BaseFloat learning_rate, $/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::Init	nnet-component.cc	/^void AffineComponent::Init(BaseFloat learning_rate,$/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::InitFromString	nnet-component.cc	/^void AffineComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return linear_params_.NumCols(); }$/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::LimitRank	nnet-component.cc	/^void AffineComponent::LimitRank(int32 d,$/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::LinearParams	nnet-component.h	/^  const CuMatrix<BaseFloat> &LinearParams() { return linear_params_; }$/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return linear_params_.NumRows(); }$/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::PerturbParams	nnet-component.cc	/^void AffineComponent::PerturbParams(BaseFloat stddev) {$/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::Propagate	nnet-component.cc	/^void AffineComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::Read	nnet-component.cc	/^void AffineComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::Scale	nnet-component.cc	/^void AffineComponent::Scale(BaseFloat scale) {$/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::SetParams	nnet-component.cc	/^void AffineComponent::SetParams(const VectorBase<BaseFloat> &bias,$/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::SetZero	nnet-component.cc	/^void AffineComponent::SetZero(bool treat_as_gradient) {$/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::Type	nnet-component.h	/^  virtual std::string Type() const { return "AffineComponent"; }$/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::UnVectorize	nnet-component.cc	/^void AffineComponent::UnVectorize(const VectorBase<BaseFloat> &params) {$/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::Update	nnet-component.h	/^  virtual void Update($/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::UpdateSimple	nnet-component.cc	/^void AffineComponent::UpdateSimple(const CuMatrixBase<BaseFloat> &in_value,$/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::Vectorize	nnet-component.cc	/^void AffineComponent::Vectorize(VectorBase<BaseFloat> *params) const {$/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::Widen	widen-nnet.cc	/^void AffineComponent::Widen(int32 new_dim,$/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::Write	nnet-component.cc	/^void AffineComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::bias_params_	nnet-component.h	/^  CuVector<BaseFloat> bias_params_;$/;"	m	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::is_gradient_	nnet-component.h	/^  bool is_gradient_; \/\/ If true, treat this as just a gradient.$/;"	m	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponent::linear_params_	nnet-component.h	/^  CuMatrix<BaseFloat> linear_params_;$/;"	m	class:kaldi::nnet2::AffineComponent
kaldi::nnet2::AffineComponentA	nnet-component.h	/^class AffineComponentA: public AffineComponent {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::AffineComponentA::Add	nnet-component.cc	/^void AffineComponentA::Add(BaseFloat alpha, const UpdatableComponent &other_in) {$/;"	f	class:kaldi::nnet2::AffineComponentA
kaldi::nnet2::AffineComponentA::AffineComponentA	nnet-component.cc	/^AffineComponentA::AffineComponentA(const AffineComponent &component):$/;"	f	class:kaldi::nnet2::AffineComponentA
kaldi::nnet2::AffineComponentA::AffineComponentA	nnet-component.h	/^  AffineComponentA() { }$/;"	f	class:kaldi::nnet2::AffineComponentA
kaldi::nnet2::AffineComponentA::ClearPrecomputedQuantities	nnet-component.cc	/^void AffineComponentA::ClearPrecomputedQuantities() {$/;"	f	class:kaldi::nnet2::AffineComponentA
kaldi::nnet2::AffineComponentA::ComputePreconditioner	nnet-component.cc	/^void AffineComponentA::ComputePreconditioner(const CuSpMatrix<double> &scatter_in,$/;"	f	class:kaldi::nnet2::AffineComponentA
kaldi::nnet2::AffineComponentA::ComputeTransforms	nnet-component.cc	/^void AffineComponentA::ComputeTransforms(const CuSpMatrix<double> &scatter_in,$/;"	f	class:kaldi::nnet2::AffineComponentA
kaldi::nnet2::AffineComponentA::Copy	nnet-component.cc	/^Component* AffineComponentA::Copy() const {$/;"	f	class:kaldi::nnet2::AffineComponentA
kaldi::nnet2::AffineComponentA::InitFromString	nnet-component.h	/^  virtual void InitFromString(std::string args) { KALDI_ASSERT(0); }$/;"	f	class:kaldi::nnet2::AffineComponentA
kaldi::nnet2::AffineComponentA::InitializeScatter	nnet-component.cc	/^void AffineComponentA::InitializeScatter() {$/;"	f	class:kaldi::nnet2::AffineComponentA
kaldi::nnet2::AffineComponentA::Precondition	nnet-component.cc	/^void AffineComponentA::Precondition($/;"	f	class:kaldi::nnet2::AffineComponentA
kaldi::nnet2::AffineComponentA::Read	nnet-component.cc	/^void AffineComponentA::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::AffineComponentA
kaldi::nnet2::AffineComponentA::Scale	nnet-component.cc	/^void AffineComponentA::Scale(BaseFloat scale) {$/;"	f	class:kaldi::nnet2::AffineComponentA
kaldi::nnet2::AffineComponentA::Transform	nnet-component.cc	/^void AffineComponentA::Transform($/;"	f	class:kaldi::nnet2::AffineComponentA
kaldi::nnet2::AffineComponentA::Type	nnet-component.h	/^  virtual std::string Type() const { return "AffineComponentA"; }$/;"	f	class:kaldi::nnet2::AffineComponentA
kaldi::nnet2::AffineComponentA::UpdateSimple	nnet-component.cc	/^void AffineComponentA::UpdateSimple($/;"	f	class:kaldi::nnet2::AffineComponentA
kaldi::nnet2::AffineComponentA::Write	nnet-component.cc	/^void AffineComponentA::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::AffineComponentA
kaldi::nnet2::AffineComponentA::in_C_	nnet-component.h	/^  CuTpMatrix<double> in_C_;$/;"	m	class:kaldi::nnet2::AffineComponentA
kaldi::nnet2::AffineComponentA::in_C_inv_	nnet-component.h	/^  CuTpMatrix<double> in_C_inv_;$/;"	m	class:kaldi::nnet2::AffineComponentA
kaldi::nnet2::AffineComponentA::input_scatter_	nnet-component.h	/^  CuSpMatrix<double> input_scatter_; \/\/ scatter of (input vectors extended with 1.)$/;"	m	class:kaldi::nnet2::AffineComponentA
kaldi::nnet2::AffineComponentA::inv_fisher_in_	nnet-component.h	/^  CuSpMatrix<double> inv_fisher_in_;$/;"	m	class:kaldi::nnet2::AffineComponentA
kaldi::nnet2::AffineComponentA::inv_fisher_out_	nnet-component.h	/^  CuSpMatrix<double> inv_fisher_out_;$/;"	m	class:kaldi::nnet2::AffineComponentA
kaldi::nnet2::AffineComponentA::out_C_	nnet-component.h	/^  CuTpMatrix<double> out_C_;$/;"	m	class:kaldi::nnet2::AffineComponentA
kaldi::nnet2::AffineComponentA::out_C_inv_	nnet-component.h	/^  CuTpMatrix<double> out_C_inv_;$/;"	m	class:kaldi::nnet2::AffineComponentA
kaldi::nnet2::AffineComponentA::output_scatter_	nnet-component.h	/^  CuSpMatrix<double> output_scatter_;$/;"	m	class:kaldi::nnet2::AffineComponentA
kaldi::nnet2::AffineComponentModified	nnet-component.h	/^class AffineComponentModified: public AffineComponent {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::AffineComponentModified::AffineComponentModified	nnet-component.h	/^  AffineComponentModified(): cutoff_length_(10.0), max_change_(0.1) { }$/;"	f	class:kaldi::nnet2::AffineComponentModified
kaldi::nnet2::AffineComponentModified::Copy	nnet-component.cc	/^Component* AffineComponentModified::Copy() const {$/;"	f	class:kaldi::nnet2::AffineComponentModified
kaldi::nnet2::AffineComponentModified::Info	nnet-component.cc	/^std::string AffineComponentModified::Info() const {$/;"	f	class:kaldi::nnet2::AffineComponentModified
kaldi::nnet2::AffineComponentModified::Init	nnet-component.cc	/^void AffineComponentModified::Init($/;"	f	class:kaldi::nnet2::AffineComponentModified
kaldi::nnet2::AffineComponentModified::Init	nnet-component.cc	/^void AffineComponentModified::Init(BaseFloat learning_rate, BaseFloat length_cutoff,$/;"	f	class:kaldi::nnet2::AffineComponentModified
kaldi::nnet2::AffineComponentModified::InitFromString	nnet-component.cc	/^void AffineComponentModified::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::AffineComponentModified
kaldi::nnet2::AffineComponentModified::Read	nnet-component.cc	/^void AffineComponentModified::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::AffineComponentModified
kaldi::nnet2::AffineComponentModified::Type	nnet-component.h	/^  virtual std::string Type() const { return "AffineComponentModified"; }$/;"	f	class:kaldi::nnet2::AffineComponentModified
kaldi::nnet2::AffineComponentModified::Update	nnet-component.cc	/^void AffineComponentModified::Update($/;"	f	class:kaldi::nnet2::AffineComponentModified
kaldi::nnet2::AffineComponentModified::Write	nnet-component.cc	/^void AffineComponentModified::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::AffineComponentModified
kaldi::nnet2::AffineComponentModified::cutoff_length_	nnet-component.h	/^  BaseFloat cutoff_length_; \/\/\/ If the length of the vector corresponding to$/;"	m	class:kaldi::nnet2::AffineComponentModified
kaldi::nnet2::AffineComponentModified::max_change_	nnet-component.h	/^  BaseFloat max_change_; \/\/\/ [if above the cutoff], this is the maximum$/;"	m	class:kaldi::nnet2::AffineComponentModified
kaldi::nnet2::AffineComponentPreconditioned	nnet-component.h	/^class AffineComponentPreconditioned: public AffineComponent {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::AffineComponentPreconditioned::AffineComponentPreconditioned	nnet-component.h	/^  AffineComponentPreconditioned(): alpha_(1.0), max_change_(0.0) { }$/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
kaldi::nnet2::AffineComponentPreconditioned::Copy	nnet-component.cc	/^Component* AffineComponentPreconditioned::Copy() const {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
kaldi::nnet2::AffineComponentPreconditioned::GetScalingFactor	nnet-component.cc	/^BaseFloat AffineComponentPreconditioned::GetScalingFactor($/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
kaldi::nnet2::AffineComponentPreconditioned::Info	nnet-component.cc	/^std::string AffineComponentPreconditioned::Info() const {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
kaldi::nnet2::AffineComponentPreconditioned::Init	nnet-component.cc	/^void AffineComponentPreconditioned::Init($/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
kaldi::nnet2::AffineComponentPreconditioned::Init	nnet-component.cc	/^void AffineComponentPreconditioned::Init(BaseFloat learning_rate,$/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
kaldi::nnet2::AffineComponentPreconditioned::InitFromString	nnet-component.cc	/^void AffineComponentPreconditioned::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
kaldi::nnet2::AffineComponentPreconditioned::Read	nnet-component.cc	/^void AffineComponentPreconditioned::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
kaldi::nnet2::AffineComponentPreconditioned::SetMaxChange	nnet-component.h	/^  void SetMaxChange(BaseFloat max_change) { max_change_ = max_change; }$/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
kaldi::nnet2::AffineComponentPreconditioned::Type	nnet-component.h	/^  virtual std::string Type() const { return "AffineComponentPreconditioned"; }$/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
kaldi::nnet2::AffineComponentPreconditioned::Update	nnet-component.cc	/^void AffineComponentPreconditioned::Update($/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
kaldi::nnet2::AffineComponentPreconditioned::Write	nnet-component.cc	/^void AffineComponentPreconditioned::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditioned
kaldi::nnet2::AffineComponentPreconditioned::alpha_	nnet-component.h	/^  BaseFloat alpha_;$/;"	m	class:kaldi::nnet2::AffineComponentPreconditioned
kaldi::nnet2::AffineComponentPreconditioned::max_change_	nnet-component.h	/^  BaseFloat max_change_; \/\/ If > 0, this is the maximum amount of parameter change (in L2 norm)$/;"	m	class:kaldi::nnet2::AffineComponentPreconditioned
kaldi::nnet2::AffineComponentPreconditionedOnline	nnet-component.h	/^class AffineComponentPreconditionedOnline: public AffineComponent {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::AffineComponentPreconditionedOnline::AffineComponentPreconditionedOnline	nnet-component.h	/^  AffineComponentPreconditionedOnline(): eta_(1.0), max_change_(0.0) { }$/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
kaldi::nnet2::AffineComponentPreconditionedOnline::Copy	nnet-component.cc	/^Component* AffineComponentPreconditionedOnline::Copy() const {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
kaldi::nnet2::AffineComponentPreconditionedOnline::GetScalingFactor	nnet-component.cc	/^BaseFloat AffineComponentPreconditionedOnline::GetScalingFactor($/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
kaldi::nnet2::AffineComponentPreconditionedOnline::Info	nnet-component.cc	/^std::string AffineComponentPreconditionedOnline::Info() const {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
kaldi::nnet2::AffineComponentPreconditionedOnline::Init	nnet-component.cc	/^void AffineComponentPreconditionedOnline::Init($/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
kaldi::nnet2::AffineComponentPreconditionedOnline::InitFromString	nnet-component.cc	/^void AffineComponentPreconditionedOnline::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
kaldi::nnet2::AffineComponentPreconditionedOnline::N_input_	nnet-component.h	/^  CuMatrix<BaseFloat> N_input_; \/\/ N matrix for input, of dimension rank x$/;"	m	class:kaldi::nnet2::AffineComponentPreconditionedOnline
kaldi::nnet2::AffineComponentPreconditionedOnline::N_mutex_	nnet-component.h	/^  Mutex N_mutex_;    \/\/ Mutex that locks the N values.  We use this for both$/;"	m	class:kaldi::nnet2::AffineComponentPreconditionedOnline
kaldi::nnet2::AffineComponentPreconditionedOnline::N_output_	nnet-component.h	/^  CuMatrix<BaseFloat> N_output_; \/\/ N matrix, of dimension rank x OutputDim()$/;"	m	class:kaldi::nnet2::AffineComponentPreconditionedOnline
kaldi::nnet2::AffineComponentPreconditionedOnline::Read	nnet-component.cc	/^void AffineComponentPreconditionedOnline::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
kaldi::nnet2::AffineComponentPreconditionedOnline::Type	nnet-component.h	/^  virtual std::string Type() const {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
kaldi::nnet2::AffineComponentPreconditionedOnline::Update	nnet-component.cc	/^void AffineComponentPreconditionedOnline::Update($/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
kaldi::nnet2::AffineComponentPreconditionedOnline::Write	nnet-component.cc	/^void AffineComponentPreconditionedOnline::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::AffineComponentPreconditionedOnline
kaldi::nnet2::AffineComponentPreconditionedOnline::eta_	nnet-component.h	/^  BaseFloat eta_;$/;"	m	class:kaldi::nnet2::AffineComponentPreconditionedOnline
kaldi::nnet2::AffineComponentPreconditionedOnline::max_change_	nnet-component.h	/^  BaseFloat max_change_; \/\/ If > 0, this is the maximum amount of parameter$/;"	m	class:kaldi::nnet2::AffineComponentPreconditionedOnline
kaldi::nnet2::AffineComponentPreconditionedOnline::rank_	nnet-component.h	/^  int32 rank_;           \/\/ Number of rows of N matrices.$/;"	m	class:kaldi::nnet2::AffineComponentPreconditionedOnline
kaldi::nnet2::AffinePreconInputComponent	nnet-component.h	/^class AffinePreconInputComponent: public AffineComponent {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::AffinePreconInputComponent::AffinePreconInputComponent	nnet-component.h	/^  AffinePreconInputComponent() { } \/\/ use Init to really initialize.$/;"	f	class:kaldi::nnet2::AffinePreconInputComponent
kaldi::nnet2::AffinePreconInputComponent::Backprop	nnet-component.cc	/^void AffinePreconInputComponent::Backprop($/;"	f	class:kaldi::nnet2::AffinePreconInputComponent
kaldi::nnet2::AffinePreconInputComponent::Copy	nnet-component.cc	/^Component* AffinePreconInputComponent::Copy() const {$/;"	f	class:kaldi::nnet2::AffinePreconInputComponent
kaldi::nnet2::AffinePreconInputComponent::Init	nnet-component.cc	/^void AffinePreconInputComponent::Init($/;"	f	class:kaldi::nnet2::AffinePreconInputComponent
kaldi::nnet2::AffinePreconInputComponent::InitFromString	nnet-component.cc	/^void AffinePreconInputComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::AffinePreconInputComponent
kaldi::nnet2::AffinePreconInputComponent::Read	nnet-component.cc	/^void AffinePreconInputComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::AffinePreconInputComponent
kaldi::nnet2::AffinePreconInputComponent::SetZero	nnet-component.cc	/^void AffinePreconInputComponent::SetZero(bool treat_as_gradient) {$/;"	f	class:kaldi::nnet2::AffinePreconInputComponent
kaldi::nnet2::AffinePreconInputComponent::Type	nnet-component.h	/^  virtual std::string Type() const { return "AffinePreconInputComponent"; }$/;"	f	class:kaldi::nnet2::AffinePreconInputComponent
kaldi::nnet2::AffinePreconInputComponent::Write	nnet-component.cc	/^void AffinePreconInputComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::AffinePreconInputComponent
kaldi::nnet2::AffinePreconInputComponent::avg_samples_	nnet-component.h	/^  BaseFloat avg_samples_; \/\/ Config parameter; determines how many samples$/;"	m	class:kaldi::nnet2::AffinePreconInputComponent
kaldi::nnet2::AffinePreconInputComponent::input_precision_	nnet-component.h	/^  CuVector<BaseFloat> input_precision_; \/\/ Inverse variance of input features; used$/;"	m	class:kaldi::nnet2::AffinePreconInputComponent
kaldi::nnet2::AffinePreconInputComponent::is_gradient_	nnet-component.h	/^  bool is_gradient_; \/\/ Set this to true if we consider this as a gradient.$/;"	m	class:kaldi::nnet2::AffinePreconInputComponent
kaldi::nnet2::AmNnet	am-nnet.h	/^class AmNnet {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::AmNnet::AmNnet	am-nnet.h	/^  AmNnet() { }$/;"	f	class:kaldi::nnet2::AmNnet
kaldi::nnet2::AmNnet::AmNnet	am-nnet.h	/^  AmNnet(const AmNnet &other): nnet_(other.nnet_), priors_(other.priors_) { }$/;"	f	class:kaldi::nnet2::AmNnet
kaldi::nnet2::AmNnet::AmNnet	am-nnet.h	/^  explicit AmNnet(const Nnet &nnet): nnet_(nnet) { }$/;"	f	class:kaldi::nnet2::AmNnet
kaldi::nnet2::AmNnet::GetNnet	am-nnet.h	/^  Nnet &GetNnet() { return nnet_; }$/;"	f	class:kaldi::nnet2::AmNnet
kaldi::nnet2::AmNnet::GetNnet	am-nnet.h	/^  const Nnet &GetNnet() const { return nnet_; }$/;"	f	class:kaldi::nnet2::AmNnet
kaldi::nnet2::AmNnet::Info	am-nnet.cc	/^std::string AmNnet::Info() const {$/;"	f	class:kaldi::nnet2::AmNnet
kaldi::nnet2::AmNnet::Init	am-nnet.cc	/^void AmNnet::Init(const Nnet &nnet) {$/;"	f	class:kaldi::nnet2::AmNnet
kaldi::nnet2::AmNnet::Init	am-nnet.cc	/^void AmNnet::Init(std::istream &config_is) {$/;"	f	class:kaldi::nnet2::AmNnet
kaldi::nnet2::AmNnet::NumPdfs	am-nnet.h	/^  int32 NumPdfs() const { return nnet_.OutputDim(); }$/;"	f	class:kaldi::nnet2::AmNnet
kaldi::nnet2::AmNnet::Priors	am-nnet.h	/^  const VectorBase<BaseFloat> &Priors() const { return priors_; }$/;"	f	class:kaldi::nnet2::AmNnet
kaldi::nnet2::AmNnet::Read	am-nnet.cc	/^void AmNnet::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::AmNnet
kaldi::nnet2::AmNnet::SetPriors	am-nnet.cc	/^void AmNnet::SetPriors(const VectorBase<BaseFloat> &priors) {$/;"	f	class:kaldi::nnet2::AmNnet
kaldi::nnet2::AmNnet::Write	am-nnet.cc	/^void AmNnet::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::AmNnet
kaldi::nnet2::AmNnet::nnet_	am-nnet.h	/^  Nnet nnet_;$/;"	m	class:kaldi::nnet2::AmNnet
kaldi::nnet2::AmNnet::priors_	am-nnet.h	/^  Vector<BaseFloat> priors_;$/;"	m	class:kaldi::nnet2::AmNnet
kaldi::nnet2::AppendDiscriminativeExamples	nnet-example-functions.cc	/^void AppendDiscriminativeExamples($/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::BasicDebugTestForSplice	nnet-component-test.cc	/^void BasicDebugTestForSplice(bool output=false) {$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::BasicDebugTestForSpliceMax	nnet-component-test.cc	/^void BasicDebugTestForSpliceMax(bool output=false) {$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::BlockAffineComponent	nnet-component.h	/^class BlockAffineComponent: public UpdatableComponent {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::BlockAffineComponent::Add	nnet-component.cc	/^void BlockAffineComponent::Add(BaseFloat alpha,$/;"	f	class:kaldi::nnet2::BlockAffineComponent
kaldi::nnet2::BlockAffineComponent::Backprop	nnet-component.cc	/^void BlockAffineComponent::Backprop($/;"	f	class:kaldi::nnet2::BlockAffineComponent
kaldi::nnet2::BlockAffineComponent::BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::BlockAffineComponent
kaldi::nnet2::BlockAffineComponent::BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::BlockAffineComponent
kaldi::nnet2::BlockAffineComponent::BlockAffineComponent	nnet-component.h	/^  BlockAffineComponent() { } \/\/ use Init to really initialize.$/;"	f	class:kaldi::nnet2::BlockAffineComponent
kaldi::nnet2::BlockAffineComponent::Copy	nnet-component.cc	/^Component* BlockAffineComponent::Copy() const {$/;"	f	class:kaldi::nnet2::BlockAffineComponent
kaldi::nnet2::BlockAffineComponent::DotProduct	nnet-component.cc	/^BaseFloat BlockAffineComponent::DotProduct($/;"	f	class:kaldi::nnet2::BlockAffineComponent
kaldi::nnet2::BlockAffineComponent::GetParameterDim	nnet-component.cc	/^int32 BlockAffineComponent::GetParameterDim() const {$/;"	f	class:kaldi::nnet2::BlockAffineComponent
kaldi::nnet2::BlockAffineComponent::Init	nnet-component.cc	/^void BlockAffineComponent::Init(BaseFloat learning_rate,$/;"	f	class:kaldi::nnet2::BlockAffineComponent
kaldi::nnet2::BlockAffineComponent::InitFromString	nnet-component.cc	/^void BlockAffineComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::BlockAffineComponent
kaldi::nnet2::BlockAffineComponent::InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return linear_params_.NumCols() * num_blocks_; }$/;"	f	class:kaldi::nnet2::BlockAffineComponent
kaldi::nnet2::BlockAffineComponent::OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return linear_params_.NumRows(); }$/;"	f	class:kaldi::nnet2::BlockAffineComponent
kaldi::nnet2::BlockAffineComponent::PerturbParams	nnet-component.cc	/^void BlockAffineComponent::PerturbParams(BaseFloat stddev) {$/;"	f	class:kaldi::nnet2::BlockAffineComponent
kaldi::nnet2::BlockAffineComponent::Propagate	nnet-component.cc	/^void BlockAffineComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::BlockAffineComponent
kaldi::nnet2::BlockAffineComponent::Read	nnet-component.cc	/^void BlockAffineComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::BlockAffineComponent
kaldi::nnet2::BlockAffineComponent::Scale	nnet-component.cc	/^void BlockAffineComponent::Scale(BaseFloat scale) {$/;"	f	class:kaldi::nnet2::BlockAffineComponent
kaldi::nnet2::BlockAffineComponent::SetZero	nnet-component.cc	/^void BlockAffineComponent::SetZero(bool treat_as_gradient) {$/;"	f	class:kaldi::nnet2::BlockAffineComponent
kaldi::nnet2::BlockAffineComponent::Type	nnet-component.h	/^  virtual std::string Type() const { return "BlockAffineComponent"; }$/;"	f	class:kaldi::nnet2::BlockAffineComponent
kaldi::nnet2::BlockAffineComponent::UnVectorize	nnet-component.cc	/^void BlockAffineComponent::UnVectorize(const VectorBase<BaseFloat> &params) {$/;"	f	class:kaldi::nnet2::BlockAffineComponent
kaldi::nnet2::BlockAffineComponent::Update	nnet-component.h	/^  virtual void Update($/;"	f	class:kaldi::nnet2::BlockAffineComponent
kaldi::nnet2::BlockAffineComponent::UpdateSimple	nnet-component.cc	/^void BlockAffineComponent::UpdateSimple($/;"	f	class:kaldi::nnet2::BlockAffineComponent
kaldi::nnet2::BlockAffineComponent::Vectorize	nnet-component.cc	/^void BlockAffineComponent::Vectorize(VectorBase<BaseFloat> *params) const {$/;"	f	class:kaldi::nnet2::BlockAffineComponent
kaldi::nnet2::BlockAffineComponent::Write	nnet-component.cc	/^void BlockAffineComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::BlockAffineComponent
kaldi::nnet2::BlockAffineComponent::bias_params_	nnet-component.h	/^  CuVector<BaseFloat> bias_params_;$/;"	m	class:kaldi::nnet2::BlockAffineComponent
kaldi::nnet2::BlockAffineComponent::linear_params_	nnet-component.h	/^  CuMatrix<BaseFloat> linear_params_;$/;"	m	class:kaldi::nnet2::BlockAffineComponent
kaldi::nnet2::BlockAffineComponent::num_blocks_	nnet-component.h	/^  int32 num_blocks_;$/;"	m	class:kaldi::nnet2::BlockAffineComponent
kaldi::nnet2::BlockAffineComponentPreconditioned	nnet-component.h	/^class BlockAffineComponentPreconditioned: public BlockAffineComponent {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::BlockAffineComponentPreconditioned::BlockAffineComponentPreconditioned	nnet-component.h	/^  BlockAffineComponentPreconditioned() { } \/\/ use Init to really initialize.$/;"	f	class:kaldi::nnet2::BlockAffineComponentPreconditioned
kaldi::nnet2::BlockAffineComponentPreconditioned::Copy	nnet-component.cc	/^Component* BlockAffineComponentPreconditioned::Copy() const {$/;"	f	class:kaldi::nnet2::BlockAffineComponentPreconditioned
kaldi::nnet2::BlockAffineComponentPreconditioned::Init	nnet-component.cc	/^void BlockAffineComponentPreconditioned::Init(BaseFloat learning_rate,$/;"	f	class:kaldi::nnet2::BlockAffineComponentPreconditioned
kaldi::nnet2::BlockAffineComponentPreconditioned::InitFromString	nnet-component.cc	/^void BlockAffineComponentPreconditioned::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::BlockAffineComponentPreconditioned
kaldi::nnet2::BlockAffineComponentPreconditioned::Read	nnet-component.cc	/^void BlockAffineComponentPreconditioned::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::BlockAffineComponentPreconditioned
kaldi::nnet2::BlockAffineComponentPreconditioned::SetZero	nnet-component.cc	/^void BlockAffineComponentPreconditioned::SetZero(bool treat_as_gradient) {$/;"	f	class:kaldi::nnet2::BlockAffineComponentPreconditioned
kaldi::nnet2::BlockAffineComponentPreconditioned::Type	nnet-component.h	/^  virtual std::string Type() const { return "BlockAffineComponentPreconditioned"; }$/;"	f	class:kaldi::nnet2::BlockAffineComponentPreconditioned
kaldi::nnet2::BlockAffineComponentPreconditioned::Update	nnet-component.cc	/^void BlockAffineComponentPreconditioned::Update($/;"	f	class:kaldi::nnet2::BlockAffineComponentPreconditioned
kaldi::nnet2::BlockAffineComponentPreconditioned::Write	nnet-component.cc	/^void BlockAffineComponentPreconditioned::Write(std::ostream &os,$/;"	f	class:kaldi::nnet2::BlockAffineComponentPreconditioned
kaldi::nnet2::BlockAffineComponentPreconditioned::alpha_	nnet-component.h	/^  BaseFloat alpha_;$/;"	m	class:kaldi::nnet2::BlockAffineComponentPreconditioned
kaldi::nnet2::BlockAffineComponentPreconditioned::is_gradient_	nnet-component.h	/^  bool is_gradient_;$/;"	m	class:kaldi::nnet2::BlockAffineComponentPreconditioned
kaldi::nnet2::CheckOrthogonal	nnet-precondition-online.cc	/^static void CheckOrthogonal(CuMatrixBase<BaseFloat> *N,$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::CombineDiscriminativeExamples	nnet-example-functions.cc	/^void CombineDiscriminativeExamples($/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::CombineNnets	combine-nnet.cc	/^static void CombineNnets(const Vector<BaseFloat> &scale_params,$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::CombineNnets	combine-nnet.cc	/^void CombineNnets(const NnetCombineConfig &combine_config,$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::CombineNnetsA	combine-nnet-a.cc	/^void CombineNnetsA(const NnetCombineAconfig &config,$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::CombineNnetsFast	combine-nnet-fast.cc	/^void CombineNnetsFast(const NnetCombineFastConfig &combine_config,$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::Component	nnet-component.h	/^class Component {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::Component::BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; } \/\/ if this returns false,$/;"	f	class:kaldi::nnet2::Component
kaldi::nnet2::Component::BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; } \/\/ if this returns false,$/;"	f	class:kaldi::nnet2::Component
kaldi::nnet2::Component::Component	nnet-component.h	/^  Component(): index_(-1) { }$/;"	f	class:kaldi::nnet2::Component
kaldi::nnet2::Component::Index	nnet-component.h	/^  virtual int32 Index() const { return index_; }$/;"	f	class:kaldi::nnet2::Component
kaldi::nnet2::Component::Info	nnet-component.cc	/^std::string Component::Info() const {$/;"	f	class:kaldi::nnet2::Component
kaldi::nnet2::Component::LeftContext	nnet-component.h	/^  virtual int32 LeftContext() { return 0; }$/;"	f	class:kaldi::nnet2::Component
kaldi::nnet2::Component::NewComponentOfType	nnet-component.cc	/^Component* Component::NewComponentOfType(const std::string &component_type) {$/;"	f	class:kaldi::nnet2::Component
kaldi::nnet2::Component::NewFromString	nnet-component.cc	/^Component* Component::NewFromString(const std::string &initializer_line) {$/;"	f	class:kaldi::nnet2::Component
kaldi::nnet2::Component::ReadNew	nnet-component.cc	/^Component* Component::ReadNew(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::Component
kaldi::nnet2::Component::RightContext	nnet-component.h	/^  virtual int32 RightContext() { return 0; }$/;"	f	class:kaldi::nnet2::Component
kaldi::nnet2::Component::SetIndex	nnet-component.h	/^  virtual void SetIndex(int32 index) { index_ = index; }$/;"	f	class:kaldi::nnet2::Component
kaldi::nnet2::Component::index_	nnet-component.h	/^  int32 index_;$/;"	m	class:kaldi::nnet2::Component
kaldi::nnet2::Component::~Component	nnet-component.h	/^  virtual ~Component() { }$/;"	f	class:kaldi::nnet2::Component
kaldi::nnet2::ComputeNnetGradient	nnet-update.cc	/^double ComputeNnetGradient($/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::ComputeNnetObjf	nnet-update.cc	/^double ComputeNnetObjf($/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::ComputeNnetObjf	nnet-update.cc	/^double ComputeNnetObjf(const Nnet &nnet,$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::ComputeNnetObjfParallel	nnet-update-parallel.h	/^inline double ComputeNnetObjfParallel($/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::ComputeObjfAndGradient	combine-nnet-a.cc	/^static BaseFloat ComputeObjfAndGradient($/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::ComputeObjfAndGradient	combine-nnet.cc	/^static double ComputeObjfAndGradient($/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::ComputeObjfAndGradient	shrink-nnet.cc	/^static BaseFloat ComputeObjfAndGradient($/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::DctComponent	nnet-component.h	/^class DctComponent: public Component {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::DctComponent::Backprop	nnet-component.cc	/^void DctComponent::Backprop(const CuMatrixBase<BaseFloat>&, \/\/ in_value,$/;"	f	class:kaldi::nnet2::DctComponent
kaldi::nnet2::DctComponent::BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::DctComponent
kaldi::nnet2::DctComponent::BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::DctComponent
kaldi::nnet2::DctComponent::Copy	nnet-component.cc	/^Component* DctComponent::Copy() const {$/;"	f	class:kaldi::nnet2::DctComponent
kaldi::nnet2::DctComponent::DctComponent	nnet-component.h	/^  DctComponent() { dim_ = 0; } $/;"	f	class:kaldi::nnet2::DctComponent
kaldi::nnet2::DctComponent::Info	nnet-component.cc	/^std::string DctComponent::Info() const {$/;"	f	class:kaldi::nnet2::DctComponent
kaldi::nnet2::DctComponent::Init	nnet-component.cc	/^void DctComponent::Init(int32 dim, int32 dct_dim, bool reorder, int32 dct_keep_dim) {$/;"	f	class:kaldi::nnet2::DctComponent
kaldi::nnet2::DctComponent::InitFromString	nnet-component.cc	/^void DctComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::DctComponent
kaldi::nnet2::DctComponent::InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::DctComponent
kaldi::nnet2::DctComponent::OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return dct_mat_.NumRows() * (dim_ \/ dct_mat_.NumCols()); }$/;"	f	class:kaldi::nnet2::DctComponent
kaldi::nnet2::DctComponent::Propagate	nnet-component.cc	/^void DctComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::DctComponent
kaldi::nnet2::DctComponent::Read	nnet-component.cc	/^void DctComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::DctComponent
kaldi::nnet2::DctComponent::Reorder	nnet-component.cc	/^void DctComponent::Reorder(CuMatrixBase<BaseFloat> *mat, bool reverse) const {$/;"	f	class:kaldi::nnet2::DctComponent
kaldi::nnet2::DctComponent::Type	nnet-component.h	/^  virtual std::string Type() const { return "DctComponent"; }$/;"	f	class:kaldi::nnet2::DctComponent
kaldi::nnet2::DctComponent::Write	nnet-component.cc	/^void DctComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::DctComponent
kaldi::nnet2::DctComponent::dct_mat_	nnet-component.h	/^  CuMatrix<BaseFloat> dct_mat_;$/;"	m	class:kaldi::nnet2::DctComponent
kaldi::nnet2::DctComponent::dim_	nnet-component.h	/^  int32 dim_; \/\/ The input dimension of the (sub)vector.$/;"	m	class:kaldi::nnet2::DctComponent
kaldi::nnet2::DctComponent::reorder_	nnet-component.h	/^  bool reorder_; \/\/ If true, transformation matrix we use is not$/;"	m	class:kaldi::nnet2::DctComponent
kaldi::nnet2::DecodableAmNnet	decodable-am-nnet.h	/^class DecodableAmNnet: public DecodableInterface {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::DecodableAmNnet::DecodableAmNnet	decodable-am-nnet.h	/^  DecodableAmNnet(const TransitionModel &trans_model,$/;"	f	class:kaldi::nnet2::DecodableAmNnet
kaldi::nnet2::DecodableAmNnet::IsLastFrame	decodable-am-nnet.h	/^  virtual bool IsLastFrame(int32 frame) {$/;"	f	class:kaldi::nnet2::DecodableAmNnet
kaldi::nnet2::DecodableAmNnet::LogLikelihood	decodable-am-nnet.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 transition_id) {$/;"	f	class:kaldi::nnet2::DecodableAmNnet
kaldi::nnet2::DecodableAmNnet::NumFrames	decodable-am-nnet.h	/^  int32 NumFrames() { return log_probs_.NumRows(); }$/;"	f	class:kaldi::nnet2::DecodableAmNnet
kaldi::nnet2::DecodableAmNnet::NumIndices	decodable-am-nnet.h	/^  virtual int32 NumIndices() { return trans_model_.NumTransitionIds(); }$/;"	f	class:kaldi::nnet2::DecodableAmNnet
kaldi::nnet2::DecodableAmNnet::log_probs_	decodable-am-nnet.h	/^  Matrix<BaseFloat> log_probs_; \/\/ actually not really probabilities, since we divide$/;"	m	class:kaldi::nnet2::DecodableAmNnet
kaldi::nnet2::DecodableAmNnet::trans_model_	decodable-am-nnet.h	/^  const TransitionModel &trans_model_;$/;"	m	class:kaldi::nnet2::DecodableAmNnet
kaldi::nnet2::DecodableAmNnetParallel	decodable-am-nnet.h	/^class DecodableAmNnetParallel: public DecodableInterface {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::DecodableAmNnetParallel::Compute	decodable-am-nnet.h	/^  void Compute() {$/;"	f	class:kaldi::nnet2::DecodableAmNnetParallel
kaldi::nnet2::DecodableAmNnetParallel::DecodableAmNnetParallel	decodable-am-nnet.h	/^  DecodableAmNnetParallel($/;"	f	class:kaldi::nnet2::DecodableAmNnetParallel
kaldi::nnet2::DecodableAmNnetParallel::IsLastFrame	decodable-am-nnet.h	/^  virtual bool IsLastFrame(int32 frame) {$/;"	f	class:kaldi::nnet2::DecodableAmNnetParallel
kaldi::nnet2::DecodableAmNnetParallel::LogLikelihood	decodable-am-nnet.h	/^  virtual BaseFloat LogLikelihood(int32 frame, int32 transition_id) {$/;"	f	class:kaldi::nnet2::DecodableAmNnetParallel
kaldi::nnet2::DecodableAmNnetParallel::NumFrames	decodable-am-nnet.h	/^  int32 NumFrames() {$/;"	f	class:kaldi::nnet2::DecodableAmNnetParallel
kaldi::nnet2::DecodableAmNnetParallel::NumIndices	decodable-am-nnet.h	/^  virtual int32 NumIndices() { return trans_model_.NumTransitionIds(); }$/;"	f	class:kaldi::nnet2::DecodableAmNnetParallel
kaldi::nnet2::DecodableAmNnetParallel::am_nnet_	decodable-am-nnet.h	/^  const AmNnet &am_nnet_;$/;"	m	class:kaldi::nnet2::DecodableAmNnetParallel
kaldi::nnet2::DecodableAmNnetParallel::feats_	decodable-am-nnet.h	/^  const CuMatrix<BaseFloat> *feats_;$/;"	m	class:kaldi::nnet2::DecodableAmNnetParallel
kaldi::nnet2::DecodableAmNnetParallel::log_probs_	decodable-am-nnet.h	/^  CuMatrix<BaseFloat> log_probs_; \/\/ actually not really probabilities, since we divide$/;"	m	class:kaldi::nnet2::DecodableAmNnetParallel
kaldi::nnet2::DecodableAmNnetParallel::pad_input_	decodable-am-nnet.h	/^  bool pad_input_;$/;"	m	class:kaldi::nnet2::DecodableAmNnetParallel
kaldi::nnet2::DecodableAmNnetParallel::prob_scale_	decodable-am-nnet.h	/^  BaseFloat prob_scale_;$/;"	m	class:kaldi::nnet2::DecodableAmNnetParallel
kaldi::nnet2::DecodableAmNnetParallel::spk_info_	decodable-am-nnet.h	/^  const CuVector<BaseFloat> *spk_info_;$/;"	m	class:kaldi::nnet2::DecodableAmNnetParallel
kaldi::nnet2::DecodableAmNnetParallel::trans_model_	decodable-am-nnet.h	/^  const TransitionModel &trans_model_;$/;"	m	class:kaldi::nnet2::DecodableAmNnetParallel
kaldi::nnet2::DecodableAmNnetParallel::~DecodableAmNnetParallel	decodable-am-nnet.h	/^  ~DecodableAmNnetParallel() {$/;"	f	class:kaldi::nnet2::DecodableAmNnetParallel
kaldi::nnet2::DiscTrainParallelClass	nnet-compute-discriminative-parallel.cc	/^class DiscTrainParallelClass: public MultiThreadable {$/;"	c	namespace:kaldi::nnet2	file:
kaldi::nnet2::DiscTrainParallelClass::DiscTrainParallelClass	nnet-compute-discriminative-parallel.cc	/^  DiscTrainParallelClass(const AmNnet &am_nnet,$/;"	f	class:kaldi::nnet2::DiscTrainParallelClass
kaldi::nnet2::DiscTrainParallelClass::DiscTrainParallelClass	nnet-compute-discriminative-parallel.cc	/^  DiscTrainParallelClass(const DiscTrainParallelClass &other):$/;"	f	class:kaldi::nnet2::DiscTrainParallelClass
kaldi::nnet2::DiscTrainParallelClass::am_nnet_	nnet-compute-discriminative-parallel.cc	/^  const AmNnet &am_nnet_;$/;"	m	class:kaldi::nnet2::DiscTrainParallelClass	file:
kaldi::nnet2::DiscTrainParallelClass::nnet_to_update_	nnet-compute-discriminative-parallel.cc	/^  Nnet *nnet_to_update_;$/;"	m	class:kaldi::nnet2::DiscTrainParallelClass	file:
kaldi::nnet2::DiscTrainParallelClass::nnet_to_update_orig_	nnet-compute-discriminative-parallel.cc	/^  Nnet *nnet_to_update_orig_;$/;"	m	class:kaldi::nnet2::DiscTrainParallelClass	file:
kaldi::nnet2::DiscTrainParallelClass::operator ()	nnet-compute-discriminative-parallel.cc	/^  void operator () () {$/;"	f	class:kaldi::nnet2::DiscTrainParallelClass
kaldi::nnet2::DiscTrainParallelClass::opts_	nnet-compute-discriminative-parallel.cc	/^  const NnetDiscriminativeUpdateOptions &opts_;$/;"	m	class:kaldi::nnet2::DiscTrainParallelClass	file:
kaldi::nnet2::DiscTrainParallelClass::repository_	nnet-compute-discriminative-parallel.cc	/^  DiscriminativeExamplesRepository *repository_;$/;"	m	class:kaldi::nnet2::DiscTrainParallelClass	file:
kaldi::nnet2::DiscTrainParallelClass::stats_	nnet-compute-discriminative-parallel.cc	/^  NnetDiscriminativeStats stats_;$/;"	m	class:kaldi::nnet2::DiscTrainParallelClass	file:
kaldi::nnet2::DiscTrainParallelClass::stats_ptr_	nnet-compute-discriminative-parallel.cc	/^  NnetDiscriminativeStats *stats_ptr_;$/;"	m	class:kaldi::nnet2::DiscTrainParallelClass	file:
kaldi::nnet2::DiscTrainParallelClass::store_separate_gradients_	nnet-compute-discriminative-parallel.cc	/^  bool store_separate_gradients_;$/;"	m	class:kaldi::nnet2::DiscTrainParallelClass	file:
kaldi::nnet2::DiscTrainParallelClass::tmodel_	nnet-compute-discriminative-parallel.cc	/^  const TransitionModel &tmodel_;$/;"	m	class:kaldi::nnet2::DiscTrainParallelClass	file:
kaldi::nnet2::DiscTrainParallelClass::~DiscTrainParallelClass	nnet-compute-discriminative-parallel.cc	/^  ~DiscTrainParallelClass() {$/;"	f	class:kaldi::nnet2::DiscTrainParallelClass
kaldi::nnet2::DiscriminativeExampleSplitter	nnet-example-functions.cc	/^class DiscriminativeExampleSplitter {$/;"	c	namespace:kaldi::nnet2	file:
kaldi::nnet2::DiscriminativeExampleSplitter::Arc	nnet-example-functions.cc	/^  typedef LatticeArc Arc;$/;"	t	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
kaldi::nnet2::DiscriminativeExampleSplitter::CollapseTransitionIds	nnet-example-functions.cc	/^void DiscriminativeExampleSplitter::CollapseTransitionIds() {$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
kaldi::nnet2::DiscriminativeExampleSplitter::ComputeFrameInfo	nnet-example-functions.cc	/^bool DiscriminativeExampleSplitter::ComputeFrameInfo() {$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
kaldi::nnet2::DiscriminativeExampleSplitter::CreateOutputLattice	nnet-example-functions.cc	/^void DiscriminativeExampleSplitter::CreateOutputLattice($/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
kaldi::nnet2::DiscriminativeExampleSplitter::DiscriminativeExampleSplitter	nnet-example-functions.cc	/^  DiscriminativeExampleSplitter($/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
kaldi::nnet2::DiscriminativeExampleSplitter::DoExcise	nnet-example-functions.cc	/^void DiscriminativeExampleSplitter::DoExcise(SplitExampleStats *stats) {$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
kaldi::nnet2::DiscriminativeExampleSplitter::DoSplit	nnet-example-functions.cc	/^void DiscriminativeExampleSplitter::DoSplit(SplitExampleStats *stats) {$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
kaldi::nnet2::DiscriminativeExampleSplitter::Excise	nnet-example-functions.cc	/^  void Excise(SplitExampleStats *stats) {$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo	nnet-example-functions.cc	/^  struct FrameInfo {$/;"	s	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo::FrameInfo	nnet-example-functions.cc	/^    FrameInfo(): den_state_count(0), den_pdf_count(0),$/;"	f	struct:kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo
kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo::can_excise_frame	nnet-example-functions.cc	/^    bool can_excise_frame; \/\/ True if the frame, if part of a segment, can be$/;"	m	struct:kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo	file:
kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo::den_pdf_count	nnet-example-functions.cc	/^    int32 den_pdf_count; \/\/ number of distinct pdfs in denominator lattice$/;"	m	struct:kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo	file:
kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo::den_state_count	nnet-example-functions.cc	/^    int32 den_state_count;$/;"	m	struct:kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo	file:
kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo::end_state	nnet-example-functions.cc	/^    StateId end_state;  $/;"	m	struct:kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo	file:
kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo::multiple_transition_ids	nnet-example-functions.cc	/^    bool multiple_transition_ids; \/\/ true if there are multiple distinct$/;"	m	struct:kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo	file:
kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo::nonzero_derivative	nnet-example-functions.cc	/^    bool nonzero_derivative; \/\/ True if we need to keep this frame because the$/;"	m	struct:kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo	file:
kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo::num_den_overlap	nnet-example-functions.cc	/^    bool num_den_overlap; \/\/ true if num and den overlap.$/;"	m	struct:kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo	file:
kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo::start_state	nnet-example-functions.cc	/^    StateId start_state;$/;"	m	struct:kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo	file:
kaldi::nnet2::DiscriminativeExampleSplitter::GetOutputStateId	nnet-example-functions.cc	/^DiscriminativeExampleSplitter::GetOutputStateId($/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
kaldi::nnet2::DiscriminativeExampleSplitter::Label	nnet-example-functions.cc	/^  typedef Arc::Label Label;$/;"	t	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
kaldi::nnet2::DiscriminativeExampleSplitter::NumFrames	nnet-example-functions.cc	/^  int32 NumFrames() const { return static_cast<int32>(eg_.num_ali.size()); }$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
kaldi::nnet2::DiscriminativeExampleSplitter::OutputOneSplit	nnet-example-functions.cc	/^void DiscriminativeExampleSplitter::OutputOneSplit(int32 seg_begin,$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
kaldi::nnet2::DiscriminativeExampleSplitter::PrepareLattice	nnet-example-functions.cc	/^void DiscriminativeExampleSplitter::PrepareLattice(bool first_time) {$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
kaldi::nnet2::DiscriminativeExampleSplitter::RemoveAllOutputSymbols	nnet-example-functions.cc	/^void DiscriminativeExampleSplitter::RemoveAllOutputSymbols(Lattice *lat) {$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
kaldi::nnet2::DiscriminativeExampleSplitter::RightContext	nnet-example-functions.cc	/^  int32 RightContext() { return eg_.input_frames.NumRows() - NumFrames() - eg_.left_context; }$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
kaldi::nnet2::DiscriminativeExampleSplitter::Split	nnet-example-functions.cc	/^  void Split(SplitExampleStats *stats) {$/;"	f	class:kaldi::nnet2::DiscriminativeExampleSplitter
kaldi::nnet2::DiscriminativeExampleSplitter::StateId	nnet-example-functions.cc	/^  typedef Arc::StateId StateId;$/;"	t	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
kaldi::nnet2::DiscriminativeExampleSplitter::config_	nnet-example-functions.cc	/^  const SplitDiscriminativeExampleConfig &config_;$/;"	m	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
kaldi::nnet2::DiscriminativeExampleSplitter::eg_	nnet-example-functions.cc	/^  const DiscriminativeNnetExample &eg_;$/;"	m	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
kaldi::nnet2::DiscriminativeExampleSplitter::egs_out_	nnet-example-functions.cc	/^  std::vector<DiscriminativeNnetExample> *egs_out_;$/;"	m	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
kaldi::nnet2::DiscriminativeExampleSplitter::frame_info_	nnet-example-functions.cc	/^  std::vector<FrameInfo> frame_info_;$/;"	m	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
kaldi::nnet2::DiscriminativeExampleSplitter::lat_	nnet-example-functions.cc	/^  Lattice lat_; \/\/ lattice generated from eg_.den_lat, with epsilons removed etc.$/;"	m	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
kaldi::nnet2::DiscriminativeExampleSplitter::state_times_	nnet-example-functions.cc	/^  std::vector<int32> state_times_;$/;"	m	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
kaldi::nnet2::DiscriminativeExampleSplitter::tmodel_	nnet-example-functions.cc	/^  const TransitionModel &tmodel_;$/;"	m	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
kaldi::nnet2::DiscriminativeExamplesRepository	nnet-compute-discriminative-parallel.cc	/^class DiscriminativeExamplesRepository {$/;"	c	namespace:kaldi::nnet2	file:
kaldi::nnet2::DiscriminativeExamplesRepository::AcceptExample	nnet-compute-discriminative-parallel.cc	/^void DiscriminativeExamplesRepository::AcceptExample($/;"	f	class:kaldi::nnet2::DiscriminativeExamplesRepository
kaldi::nnet2::DiscriminativeExamplesRepository::DiscriminativeExamplesRepository	nnet-compute-discriminative-parallel.cc	/^  DiscriminativeExamplesRepository(): buffer_size_(4),$/;"	f	class:kaldi::nnet2::DiscriminativeExamplesRepository
kaldi::nnet2::DiscriminativeExamplesRepository::ExamplesDone	nnet-compute-discriminative-parallel.cc	/^void DiscriminativeExamplesRepository::ExamplesDone() {$/;"	f	class:kaldi::nnet2::DiscriminativeExamplesRepository
kaldi::nnet2::DiscriminativeExamplesRepository::ProvideExample	nnet-compute-discriminative-parallel.cc	/^DiscriminativeExamplesRepository::ProvideExample() {$/;"	f	class:kaldi::nnet2::DiscriminativeExamplesRepository
kaldi::nnet2::DiscriminativeExamplesRepository::buffer_size_	nnet-compute-discriminative-parallel.cc	/^  int32 buffer_size_;$/;"	m	class:kaldi::nnet2::DiscriminativeExamplesRepository	file:
kaldi::nnet2::DiscriminativeExamplesRepository::done_	nnet-compute-discriminative-parallel.cc	/^  bool done_;$/;"	m	class:kaldi::nnet2::DiscriminativeExamplesRepository	file:
kaldi::nnet2::DiscriminativeExamplesRepository::empty_semaphore_	nnet-compute-discriminative-parallel.cc	/^  Semaphore empty_semaphore_;$/;"	m	class:kaldi::nnet2::DiscriminativeExamplesRepository	file:
kaldi::nnet2::DiscriminativeExamplesRepository::examples_	nnet-compute-discriminative-parallel.cc	/^  std::deque<DiscriminativeNnetExample*> examples_;$/;"	m	class:kaldi::nnet2::DiscriminativeExamplesRepository	file:
kaldi::nnet2::DiscriminativeExamplesRepository::examples_mutex_	nnet-compute-discriminative-parallel.cc	/^  Mutex examples_mutex_; \/\/ mutex we lock to modify examples_.$/;"	m	class:kaldi::nnet2::DiscriminativeExamplesRepository	file:
kaldi::nnet2::DiscriminativeExamplesRepository::full_semaphore_	nnet-compute-discriminative-parallel.cc	/^  Semaphore full_semaphore_;$/;"	m	class:kaldi::nnet2::DiscriminativeExamplesRepository	file:
kaldi::nnet2::DiscriminativeNnetExample	nnet-example.h	/^struct DiscriminativeNnetExample {$/;"	s	namespace:kaldi::nnet2
kaldi::nnet2::DiscriminativeNnetExample::Check	nnet-example.cc	/^void DiscriminativeNnetExample::Check() const {$/;"	f	class:kaldi::nnet2::DiscriminativeNnetExample
kaldi::nnet2::DiscriminativeNnetExample::Read	nnet-example.cc	/^void DiscriminativeNnetExample::Read(std::istream &is,$/;"	f	class:kaldi::nnet2::DiscriminativeNnetExample
kaldi::nnet2::DiscriminativeNnetExample::Write	nnet-example.cc	/^void DiscriminativeNnetExample::Write(std::ostream &os,$/;"	f	class:kaldi::nnet2::DiscriminativeNnetExample
kaldi::nnet2::DiscriminativeNnetExample::den_lat	nnet-example.h	/^  CompactLattice den_lat; $/;"	m	struct:kaldi::nnet2::DiscriminativeNnetExample
kaldi::nnet2::DiscriminativeNnetExample::input_frames	nnet-example.h	/^  Matrix<BaseFloat> input_frames;$/;"	m	struct:kaldi::nnet2::DiscriminativeNnetExample
kaldi::nnet2::DiscriminativeNnetExample::left_context	nnet-example.h	/^  int32 left_context;$/;"	m	struct:kaldi::nnet2::DiscriminativeNnetExample
kaldi::nnet2::DiscriminativeNnetExample::num_ali	nnet-example.h	/^  std::vector<int32> num_ali; $/;"	m	struct:kaldi::nnet2::DiscriminativeNnetExample
kaldi::nnet2::DiscriminativeNnetExample::spk_info	nnet-example.h	/^  Vector<BaseFloat> spk_info; $/;"	m	struct:kaldi::nnet2::DiscriminativeNnetExample
kaldi::nnet2::DiscriminativeNnetExample::weight	nnet-example.h	/^  BaseFloat weight; $/;"	m	struct:kaldi::nnet2::DiscriminativeNnetExample
kaldi::nnet2::DiscriminativeNnetExampleWriter	nnet-example.h	/^   DiscriminativeNnetExampleWriter;$/;"	t	namespace:kaldi::nnet2
kaldi::nnet2::DoBackprop	nnet-update.cc	/^double DoBackprop(const Nnet &nnet,$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::DoBackpropParallel	nnet-update-parallel.cc	/^double DoBackpropParallel(const Nnet &nnet,$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::DoBackpropParallelClass	nnet-update-parallel.cc	/^class DoBackpropParallelClass: public MultiThreadable {$/;"	c	namespace:kaldi::nnet2	file:
kaldi::nnet2::DoBackpropParallelClass::DoBackpropParallelClass	nnet-update-parallel.cc	/^  DoBackpropParallelClass(const DoBackpropParallelClass &other):$/;"	f	class:kaldi::nnet2::DoBackpropParallelClass
kaldi::nnet2::DoBackpropParallelClass::DoBackpropParallelClass	nnet-update-parallel.cc	/^  DoBackpropParallelClass(const Nnet &nnet,$/;"	f	class:kaldi::nnet2::DoBackpropParallelClass
kaldi::nnet2::DoBackpropParallelClass::log_prob_	nnet-update-parallel.cc	/^  double log_prob_; \/\/ log-like times num frames.$/;"	m	class:kaldi::nnet2::DoBackpropParallelClass	file:
kaldi::nnet2::DoBackpropParallelClass::log_prob_ptr_	nnet-update-parallel.cc	/^  double *log_prob_ptr_;$/;"	m	class:kaldi::nnet2::DoBackpropParallelClass	file:
kaldi::nnet2::DoBackpropParallelClass::nnet_	nnet-update-parallel.cc	/^  const Nnet &nnet_;$/;"	m	class:kaldi::nnet2::DoBackpropParallelClass	file:
kaldi::nnet2::DoBackpropParallelClass::nnet_to_update_	nnet-update-parallel.cc	/^  Nnet *nnet_to_update_;$/;"	m	class:kaldi::nnet2::DoBackpropParallelClass	file:
kaldi::nnet2::DoBackpropParallelClass::nnet_to_update_orig_	nnet-update-parallel.cc	/^  Nnet *nnet_to_update_orig_;$/;"	m	class:kaldi::nnet2::DoBackpropParallelClass	file:
kaldi::nnet2::DoBackpropParallelClass::operator ()	nnet-update-parallel.cc	/^  void operator () () {$/;"	f	class:kaldi::nnet2::DoBackpropParallelClass
kaldi::nnet2::DoBackpropParallelClass::repository_	nnet-update-parallel.cc	/^  ExamplesRepository *repository_;$/;"	m	class:kaldi::nnet2::DoBackpropParallelClass	file:
kaldi::nnet2::DoBackpropParallelClass::store_separate_gradients_	nnet-update-parallel.cc	/^  bool store_separate_gradients_;$/;"	m	class:kaldi::nnet2::DoBackpropParallelClass	file:
kaldi::nnet2::DoBackpropParallelClass::tot_weight_	nnet-update-parallel.cc	/^  double tot_weight_;$/;"	m	class:kaldi::nnet2::DoBackpropParallelClass	file:
kaldi::nnet2::DoBackpropParallelClass::tot_weight_ptr_	nnet-update-parallel.cc	/^  double *tot_weight_ptr_;$/;"	m	class:kaldi::nnet2::DoBackpropParallelClass	file:
kaldi::nnet2::DoBackpropParallelClass::~DoBackpropParallelClass	nnet-update-parallel.cc	/^  ~DoBackpropParallelClass() {$/;"	f	class:kaldi::nnet2::DoBackpropParallelClass
kaldi::nnet2::DoBackpropSingleThreaded	nnet-update-parallel.cc	/^double DoBackpropSingleThreaded(const Nnet &nnet,$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::DropoutComponent	nnet-component.h	/^class DropoutComponent: public RandomComponent {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::DropoutComponent::Backprop	nnet-component.cc	/^void DropoutComponent::Backprop(const CuMatrixBase<BaseFloat> &in_value,$/;"	f	class:kaldi::nnet2::DropoutComponent
kaldi::nnet2::DropoutComponent::BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::DropoutComponent
kaldi::nnet2::DropoutComponent::BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; }  $/;"	f	class:kaldi::nnet2::DropoutComponent
kaldi::nnet2::DropoutComponent::Copy	nnet-component.cc	/^Component* DropoutComponent::Copy() const {$/;"	f	class:kaldi::nnet2::DropoutComponent
kaldi::nnet2::DropoutComponent::DropoutComponent	nnet-component.h	/^  DropoutComponent(): dim_(0), dropout_proportion_(0.5) { }$/;"	f	class:kaldi::nnet2::DropoutComponent
kaldi::nnet2::DropoutComponent::DropoutComponent	nnet-component.h	/^  DropoutComponent(int32 dim, BaseFloat dp = 0.5, BaseFloat sc = 0.0) {$/;"	f	class:kaldi::nnet2::DropoutComponent
kaldi::nnet2::DropoutComponent::Info	nnet-component.cc	/^std::string DropoutComponent::Info() const {$/;"	f	class:kaldi::nnet2::DropoutComponent
kaldi::nnet2::DropoutComponent::Init	nnet-component.cc	/^void DropoutComponent::Init(int32 dim,$/;"	f	class:kaldi::nnet2::DropoutComponent
kaldi::nnet2::DropoutComponent::InitFromString	nnet-component.cc	/^void DropoutComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::DropoutComponent
kaldi::nnet2::DropoutComponent::InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::DropoutComponent
kaldi::nnet2::DropoutComponent::OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::DropoutComponent
kaldi::nnet2::DropoutComponent::Propagate	nnet-component.cc	/^void DropoutComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::DropoutComponent
kaldi::nnet2::DropoutComponent::Read	nnet-component.cc	/^void DropoutComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::DropoutComponent
kaldi::nnet2::DropoutComponent::SetDropoutScale	nnet-component.h	/^  void SetDropoutScale(BaseFloat scale) { dropout_scale_ = scale; }$/;"	f	class:kaldi::nnet2::DropoutComponent
kaldi::nnet2::DropoutComponent::Type	nnet-component.h	/^  virtual std::string Type() const { return "DropoutComponent"; }$/;"	f	class:kaldi::nnet2::DropoutComponent
kaldi::nnet2::DropoutComponent::Write	nnet-component.cc	/^void DropoutComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::DropoutComponent
kaldi::nnet2::DropoutComponent::dim_	nnet-component.h	/^  int32 dim_;  $/;"	m	class:kaldi::nnet2::DropoutComponent
kaldi::nnet2::DropoutComponent::dropout_proportion_	nnet-component.h	/^  BaseFloat dropout_proportion_;$/;"	m	class:kaldi::nnet2::DropoutComponent
kaldi::nnet2::DropoutComponent::dropout_scale_	nnet-component.h	/^  BaseFloat dropout_scale_; \/\/ Set the scale that we scale "dropout_proportion_"$/;"	m	class:kaldi::nnet2::DropoutComponent
kaldi::nnet2::ExampleToPdfPost	nnet-example-functions.cc	/^void ExampleToPdfPost($/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::ExamplesRepository	nnet-update-parallel.cc	/^class ExamplesRepository {$/;"	c	namespace:kaldi::nnet2	file:
kaldi::nnet2::ExamplesRepository::AcceptExamples	nnet-update-parallel.cc	/^void ExamplesRepository::AcceptExamples($/;"	f	class:kaldi::nnet2::ExamplesRepository
kaldi::nnet2::ExamplesRepository::ExamplesDone	nnet-update-parallel.cc	/^void ExamplesRepository::ExamplesDone() {$/;"	f	class:kaldi::nnet2::ExamplesRepository
kaldi::nnet2::ExamplesRepository::ExamplesRepository	nnet-update-parallel.cc	/^  ExamplesRepository(): empty_semaphore_(1), done_(false) { }$/;"	f	class:kaldi::nnet2::ExamplesRepository
kaldi::nnet2::ExamplesRepository::ProvideExamples	nnet-update-parallel.cc	/^bool ExamplesRepository::ProvideExamples($/;"	f	class:kaldi::nnet2::ExamplesRepository
kaldi::nnet2::ExamplesRepository::done_	nnet-update-parallel.cc	/^  bool done_;$/;"	m	class:kaldi::nnet2::ExamplesRepository	file:
kaldi::nnet2::ExamplesRepository::empty_semaphore_	nnet-update-parallel.cc	/^  Semaphore empty_semaphore_;$/;"	m	class:kaldi::nnet2::ExamplesRepository	file:
kaldi::nnet2::ExamplesRepository::examples_	nnet-update-parallel.cc	/^  std::vector<NnetExample> examples_;$/;"	m	class:kaldi::nnet2::ExamplesRepository	file:
kaldi::nnet2::ExamplesRepository::full_semaphore_	nnet-update-parallel.cc	/^  Semaphore full_semaphore_;$/;"	m	class:kaldi::nnet2::ExamplesRepository	file:
kaldi::nnet2::ExciseDiscriminativeExample	nnet-example-functions.cc	/^void ExciseDiscriminativeExample($/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::ExpectOneOrTwoTokens	nnet-component.cc	/^static void ExpectOneOrTwoTokens(std::istream &is, bool binary,$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::FastNnetCombiner	combine-nnet-fast.cc	/^class FastNnetCombiner {$/;"	c	namespace:kaldi::nnet2	file:
kaldi::nnet2::FastNnetCombiner::C_	combine-nnet-fast.cc	/^  TpMatrix<double> C_;$/;"	m	class:kaldi::nnet2::FastNnetCombiner	file:
kaldi::nnet2::FastNnetCombiner::C_inv_	combine-nnet-fast.cc	/^  TpMatrix<double> C_inv_;$/;"	m	class:kaldi::nnet2::FastNnetCombiner	file:
kaldi::nnet2::FastNnetCombiner::CombineNnets	combine-nnet-fast.cc	/^void FastNnetCombiner::CombineNnets(const Vector<double> &scale_params,$/;"	f	class:kaldi::nnet2::FastNnetCombiner
kaldi::nnet2::FastNnetCombiner::ComputeCurrentNnet	combine-nnet-fast.cc	/^void FastNnetCombiner::ComputeCurrentNnet($/;"	f	class:kaldi::nnet2::FastNnetCombiner
kaldi::nnet2::FastNnetCombiner::ComputeObjfAndGradient	combine-nnet-fast.cc	/^double FastNnetCombiner::ComputeObjfAndGradient($/;"	f	class:kaldi::nnet2::FastNnetCombiner
kaldi::nnet2::FastNnetCombiner::ComputePreconditioner	combine-nnet-fast.cc	/^void FastNnetCombiner::ComputePreconditioner() {$/;"	f	class:kaldi::nnet2::FastNnetCombiner
kaldi::nnet2::FastNnetCombiner::FastNnetCombiner	combine-nnet-fast.cc	/^  FastNnetCombiner(const NnetCombineFastConfig &combine_config,$/;"	f	class:kaldi::nnet2::FastNnetCombiner
kaldi::nnet2::FastNnetCombiner::GetInitialModel	combine-nnet-fast.cc	/^int32 FastNnetCombiner::GetInitialModel($/;"	f	class:kaldi::nnet2::FastNnetCombiner
kaldi::nnet2::FastNnetCombiner::GetInitialParams	combine-nnet-fast.cc	/^void FastNnetCombiner::GetInitialParams() {$/;"	f	class:kaldi::nnet2::FastNnetCombiner
kaldi::nnet2::FastNnetCombiner::config_	combine-nnet-fast.cc	/^  const NnetCombineFastConfig &config_;$/;"	m	class:kaldi::nnet2::FastNnetCombiner	file:
kaldi::nnet2::FastNnetCombiner::egs_	combine-nnet-fast.cc	/^  const std::vector<NnetExample> &egs_;$/;"	m	class:kaldi::nnet2::FastNnetCombiner	file:
kaldi::nnet2::FastNnetCombiner::nnet_out_	combine-nnet-fast.cc	/^  Nnet *nnet_out_;$/;"	m	class:kaldi::nnet2::FastNnetCombiner	file:
kaldi::nnet2::FastNnetCombiner::nnets_	combine-nnet-fast.cc	/^  const std::vector<Nnet> &nnets_;$/;"	m	class:kaldi::nnet2::FastNnetCombiner	file:
kaldi::nnet2::FastNnetCombiner::params_	combine-nnet-fast.cc	/^  Vector<double> params_; \/\/ the parameters we're optimizing-- in the$/;"	m	class:kaldi::nnet2::FastNnetCombiner	file:
kaldi::nnet2::FisherComputationClass	combine-nnet-fast.cc	/^class FisherComputationClass: public MultiThreadable {$/;"	c	namespace:kaldi::nnet2	file:
kaldi::nnet2::FisherComputationClass::FisherComputationClass	combine-nnet-fast.cc	/^  FisherComputationClass(const FisherComputationClass &other):$/;"	f	class:kaldi::nnet2::FisherComputationClass
kaldi::nnet2::FisherComputationClass::FisherComputationClass	combine-nnet-fast.cc	/^  FisherComputationClass(const Nnet &nnet,$/;"	f	class:kaldi::nnet2::FisherComputationClass
kaldi::nnet2::FisherComputationClass::egs_	combine-nnet-fast.cc	/^  const std::vector<NnetExample> &egs_;$/;"	m	class:kaldi::nnet2::FisherComputationClass	file:
kaldi::nnet2::FisherComputationClass::minibatch_size_	combine-nnet-fast.cc	/^  int32 minibatch_size_; \/\/ equals config --fisher-minbatch-size e.g. 64 (smaller than$/;"	m	class:kaldi::nnet2::FisherComputationClass	file:
kaldi::nnet2::FisherComputationClass::nnet_	combine-nnet-fast.cc	/^  const Nnet &nnet_; \/\/ point at which we compute the parameter gradients.$/;"	m	class:kaldi::nnet2::FisherComputationClass	file:
kaldi::nnet2::FisherComputationClass::nnets_	combine-nnet-fast.cc	/^  const std::vector<Nnet> &nnets_; \/\/ The dot-product  of each of these with the parameter gradients,$/;"	m	class:kaldi::nnet2::FisherComputationClass	file:
kaldi::nnet2::FisherComputationClass::operator ()	combine-nnet-fast.cc	/^  void operator () () {$/;"	f	class:kaldi::nnet2::FisherComputationClass
kaldi::nnet2::FisherComputationClass::scatter_	combine-nnet-fast.cc	/^  SpMatrix<double> scatter_; \/\/ Local accumulation of the scatter.  $/;"	m	class:kaldi::nnet2::FisherComputationClass	file:
kaldi::nnet2::FisherComputationClass::scatter_ptr_	combine-nnet-fast.cc	/^  SpMatrix<double> *scatter_ptr_;$/;"	m	class:kaldi::nnet2::FisherComputationClass	file:
kaldi::nnet2::FisherComputationClass::~FisherComputationClass	combine-nnet-fast.cc	/^  ~FisherComputationClass() {$/;"	f	class:kaldi::nnet2::FisherComputationClass
kaldi::nnet2::FixNnet	nnet-fix.cc	/^void FixNnet(const NnetFixConfig &config, Nnet *nnet) {$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::FixedAffineComponent	nnet-component.h	/^class FixedAffineComponent: public Component {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::FixedAffineComponent::Backprop	nnet-component.cc	/^void FixedAffineComponent::Backprop(const CuMatrixBase<BaseFloat> &, \/\/ in_value$/;"	f	class:kaldi::nnet2::FixedAffineComponent
kaldi::nnet2::FixedAffineComponent::BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::FixedAffineComponent
kaldi::nnet2::FixedAffineComponent::BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::FixedAffineComponent
kaldi::nnet2::FixedAffineComponent::Copy	nnet-component.cc	/^Component* FixedAffineComponent::Copy() const {$/;"	f	class:kaldi::nnet2::FixedAffineComponent
kaldi::nnet2::FixedAffineComponent::FixedAffineComponent	nnet-component.h	/^  FixedAffineComponent() { } $/;"	f	class:kaldi::nnet2::FixedAffineComponent
kaldi::nnet2::FixedAffineComponent::Info	nnet-component.cc	/^std::string FixedAffineComponent::Info() const {$/;"	f	class:kaldi::nnet2::FixedAffineComponent
kaldi::nnet2::FixedAffineComponent::Init	nnet-component.cc	/^void FixedAffineComponent::Init(const CuMatrixBase<BaseFloat> &mat) {$/;"	f	class:kaldi::nnet2::FixedAffineComponent
kaldi::nnet2::FixedAffineComponent::InitFromString	nnet-component.cc	/^void FixedAffineComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::FixedAffineComponent
kaldi::nnet2::FixedAffineComponent::InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return linear_params_.NumCols(); }$/;"	f	class:kaldi::nnet2::FixedAffineComponent
kaldi::nnet2::FixedAffineComponent::OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return linear_params_.NumRows(); }$/;"	f	class:kaldi::nnet2::FixedAffineComponent
kaldi::nnet2::FixedAffineComponent::Propagate	nnet-component.cc	/^void FixedAffineComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::FixedAffineComponent
kaldi::nnet2::FixedAffineComponent::Read	nnet-component.cc	/^void FixedAffineComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::FixedAffineComponent
kaldi::nnet2::FixedAffineComponent::Type	nnet-component.h	/^  virtual std::string Type() const { return "FixedAffineComponent"; }$/;"	f	class:kaldi::nnet2::FixedAffineComponent
kaldi::nnet2::FixedAffineComponent::Write	nnet-component.cc	/^void FixedAffineComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::FixedAffineComponent
kaldi::nnet2::FixedAffineComponent::bias_params_	nnet-component.h	/^  CuVector<BaseFloat> bias_params_;$/;"	m	class:kaldi::nnet2::FixedAffineComponent
kaldi::nnet2::FixedAffineComponent::linear_params_	nnet-component.h	/^  CuMatrix<BaseFloat> linear_params_;$/;"	m	class:kaldi::nnet2::FixedAffineComponent
kaldi::nnet2::FixedLinearComponent	nnet-component.h	/^class FixedLinearComponent: public Component {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::FixedLinearComponent::Backprop	nnet-component.cc	/^void FixedLinearComponent::Backprop(const CuMatrixBase<BaseFloat> &, \/\/ in_value$/;"	f	class:kaldi::nnet2::FixedLinearComponent
kaldi::nnet2::FixedLinearComponent::BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::FixedLinearComponent
kaldi::nnet2::FixedLinearComponent::BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::FixedLinearComponent
kaldi::nnet2::FixedLinearComponent::Copy	nnet-component.cc	/^Component* FixedLinearComponent::Copy() const {$/;"	f	class:kaldi::nnet2::FixedLinearComponent
kaldi::nnet2::FixedLinearComponent::FixedLinearComponent	nnet-component.h	/^  FixedLinearComponent() { } $/;"	f	class:kaldi::nnet2::FixedLinearComponent
kaldi::nnet2::FixedLinearComponent::Info	nnet-component.cc	/^std::string FixedLinearComponent::Info() const {$/;"	f	class:kaldi::nnet2::FixedLinearComponent
kaldi::nnet2::FixedLinearComponent::Init	nnet-component.h	/^  void Init(const CuMatrixBase<BaseFloat> &matrix) { mat_ = matrix; }$/;"	f	class:kaldi::nnet2::FixedLinearComponent
kaldi::nnet2::FixedLinearComponent::InitFromString	nnet-component.cc	/^void FixedLinearComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::FixedLinearComponent
kaldi::nnet2::FixedLinearComponent::InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return mat_.NumCols(); }$/;"	f	class:kaldi::nnet2::FixedLinearComponent
kaldi::nnet2::FixedLinearComponent::OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return mat_.NumRows(); }$/;"	f	class:kaldi::nnet2::FixedLinearComponent
kaldi::nnet2::FixedLinearComponent::Propagate	nnet-component.cc	/^void FixedLinearComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::FixedLinearComponent
kaldi::nnet2::FixedLinearComponent::Read	nnet-component.cc	/^void FixedLinearComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::FixedLinearComponent
kaldi::nnet2::FixedLinearComponent::Type	nnet-component.h	/^  virtual std::string Type() const { return "FixedLinearComponent"; }$/;"	f	class:kaldi::nnet2::FixedLinearComponent
kaldi::nnet2::FixedLinearComponent::Write	nnet-component.cc	/^void FixedLinearComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::FixedLinearComponent
kaldi::nnet2::FixedLinearComponent::mat_	nnet-component.h	/^  CuMatrix<BaseFloat> mat_;$/;"	m	class:kaldi::nnet2::FixedLinearComponent
kaldi::nnet2::GetInitialModel	combine-nnet.cc	/^static int32 GetInitialModel($/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::GetInitialScaleParams	combine-nnet.cc	/^static void GetInitialScaleParams($/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::GetNnetStats	nnet-stats.cc	/^void GetNnetStats(const NnetStatsConfig &config,$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::GetPreconditioner	nnet-lbfgs.cc	/^Nnet *GetPreconditioner(const Nnet &nnet) {$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::GetUpdateDirection	combine-nnet-a.cc	/^static void GetUpdateDirection(const std::vector<Nnet> &nnets,$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::GiveNnetCorrectTopology	mixup-nnet.cc	/^static void GiveNnetCorrectTopology(Nnet *nnet,$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::IndexOfSoftmaxLayer	nnet-functions.cc	/^int32 IndexOfSoftmaxLayer(const Nnet &nnet) {$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::InformationBottleneckComponent	nnet-component.h	/^class InformationBottleneckComponent: public RandomComponent {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::InformationBottleneckComponent::Backprop	nnet-component.cc	/^void InformationBottleneckComponent::Backprop($/;"	f	class:kaldi::nnet2::InformationBottleneckComponent
kaldi::nnet2::InformationBottleneckComponent::BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::InformationBottleneckComponent
kaldi::nnet2::InformationBottleneckComponent::BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; }  $/;"	f	class:kaldi::nnet2::InformationBottleneckComponent
kaldi::nnet2::InformationBottleneckComponent::Copy	nnet-component.h	/^  virtual Component* Copy() const {$/;"	f	class:kaldi::nnet2::InformationBottleneckComponent
kaldi::nnet2::InformationBottleneckComponent::Info	nnet-component.cc	/^std::string InformationBottleneckComponent::Info() const {$/;"	f	class:kaldi::nnet2::InformationBottleneckComponent
kaldi::nnet2::InformationBottleneckComponent::InformationBottleneckComponent	nnet-component.h	/^  InformationBottleneckComponent(): dim_(0), noise_proportion_(0.1),$/;"	f	class:kaldi::nnet2::InformationBottleneckComponent
kaldi::nnet2::InformationBottleneckComponent::InformationBottleneckComponent	nnet-component.h	/^  InformationBottleneckComponent(int32 dim, BaseFloat noise_proportion) {$/;"	f	class:kaldi::nnet2::InformationBottleneckComponent
kaldi::nnet2::InformationBottleneckComponent::Init	nnet-component.cc	/^void InformationBottleneckComponent::Init(int32 dim,$/;"	f	class:kaldi::nnet2::InformationBottleneckComponent
kaldi::nnet2::InformationBottleneckComponent::InitFromString	nnet-component.cc	/^void InformationBottleneckComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::InformationBottleneckComponent
kaldi::nnet2::InformationBottleneckComponent::InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::InformationBottleneckComponent
kaldi::nnet2::InformationBottleneckComponent::OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::InformationBottleneckComponent
kaldi::nnet2::InformationBottleneckComponent::Propagate	nnet-component.cc	/^void InformationBottleneckComponent::Propagate($/;"	f	class:kaldi::nnet2::InformationBottleneckComponent
kaldi::nnet2::InformationBottleneckComponent::Read	nnet-component.cc	/^void InformationBottleneckComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::InformationBottleneckComponent
kaldi::nnet2::InformationBottleneckComponent::Type	nnet-component.h	/^  virtual std::string Type() const { return "InformationBottleneckComponent"; }$/;"	f	class:kaldi::nnet2::InformationBottleneckComponent
kaldi::nnet2::InformationBottleneckComponent::Write	nnet-component.cc	/^void InformationBottleneckComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::InformationBottleneckComponent
kaldi::nnet2::InformationBottleneckComponent::count_	nnet-component.h	/^  BaseFloat count_;$/;"	m	class:kaldi::nnet2::InformationBottleneckComponent
kaldi::nnet2::InformationBottleneckComponent::dim_	nnet-component.h	/^  int32 dim_;  $/;"	m	class:kaldi::nnet2::InformationBottleneckComponent
kaldi::nnet2::InformationBottleneckComponent::noise_proportion_	nnet-component.h	/^  BaseFloat noise_proportion_; \/\/ as a proportion of variance...$/;"	m	class:kaldi::nnet2::InformationBottleneckComponent
kaldi::nnet2::InformationBottleneckComponent::sumsq_	nnet-component.h	/^  CuVector<BaseFloat> sumsq_;$/;"	m	class:kaldi::nnet2::InformationBottleneckComponent
kaldi::nnet2::InsertComponents	nnet-functions.cc	/^void InsertComponents(const Nnet &src_nnet,$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::LatticeToDiscriminativeExample	nnet-example-functions.cc	/^bool LatticeToDiscriminativeExample($/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::LimitRankClass	nnet-limit-rank.cc	/^class LimitRankClass {$/;"	c	namespace:kaldi::nnet2	file:
kaldi::nnet2::LimitRankClass::GetRetainedDim	nnet-limit-rank.cc	/^  int32 GetRetainedDim(int32 rows, int32 cols) {$/;"	f	class:kaldi::nnet2::LimitRankClass
kaldi::nnet2::LimitRankClass::LimitRankClass	nnet-limit-rank.cc	/^  LimitRankClass(const NnetLimitRankOpts &opts,$/;"	f	class:kaldi::nnet2::LimitRankClass
kaldi::nnet2::LimitRankClass::c_	nnet-limit-rank.cc	/^  int32 c_;$/;"	m	class:kaldi::nnet2::LimitRankClass	file:
kaldi::nnet2::LimitRankClass::nnet_	nnet-limit-rank.cc	/^  Nnet *nnet_;$/;"	m	class:kaldi::nnet2::LimitRankClass	file:
kaldi::nnet2::LimitRankClass::operator ()	nnet-limit-rank.cc	/^  void operator () () {$/;"	f	class:kaldi::nnet2::LimitRankClass
kaldi::nnet2::LimitRankClass::opts_	nnet-limit-rank.cc	/^  const NnetLimitRankOpts &opts_;$/;"	m	class:kaldi::nnet2::LimitRankClass	file:
kaldi::nnet2::LimitRankClass::~LimitRankClass	nnet-limit-rank.cc	/^  ~LimitRankClass() { }$/;"	f	class:kaldi::nnet2::LimitRankClass
kaldi::nnet2::LimitRankParallel	nnet-limit-rank.cc	/^void LimitRankParallel(const NnetLimitRankOpts &opts,$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::MaxoutComponent	nnet-component.h	/^class MaxoutComponent: public Component {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::MaxoutComponent::Backprop	nnet-component.cc	/^void MaxoutComponent::Backprop(const CuMatrixBase<BaseFloat> &in_value,$/;"	f	class:kaldi::nnet2::MaxoutComponent
kaldi::nnet2::MaxoutComponent::BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::MaxoutComponent
kaldi::nnet2::MaxoutComponent::BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; }$/;"	f	class:kaldi::nnet2::MaxoutComponent
kaldi::nnet2::MaxoutComponent::Copy	nnet-component.h	/^  virtual Component* Copy() const { return new MaxoutComponent(input_dim_,$/;"	f	class:kaldi::nnet2::MaxoutComponent
kaldi::nnet2::MaxoutComponent::Info	nnet-component.cc	/^std::string MaxoutComponent::Info() const {$/;"	f	class:kaldi::nnet2::MaxoutComponent
kaldi::nnet2::MaxoutComponent::Init	nnet-component.cc	/^void MaxoutComponent::Init(int32 input_dim, int32 output_dim)  {$/;"	f	class:kaldi::nnet2::MaxoutComponent
kaldi::nnet2::MaxoutComponent::InitFromString	nnet-component.cc	/^void MaxoutComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::MaxoutComponent
kaldi::nnet2::MaxoutComponent::InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return input_dim_; }$/;"	f	class:kaldi::nnet2::MaxoutComponent
kaldi::nnet2::MaxoutComponent::MaxoutComponent	nnet-component.h	/^  MaxoutComponent(): input_dim_(0), output_dim_(0) { }$/;"	f	class:kaldi::nnet2::MaxoutComponent
kaldi::nnet2::MaxoutComponent::MaxoutComponent	nnet-component.h	/^  explicit MaxoutComponent(int32 input_dim, int32 output_dim) {$/;"	f	class:kaldi::nnet2::MaxoutComponent
kaldi::nnet2::MaxoutComponent::OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return output_dim_; }$/;"	f	class:kaldi::nnet2::MaxoutComponent
kaldi::nnet2::MaxoutComponent::Propagate	nnet-component.cc	/^void MaxoutComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::MaxoutComponent
kaldi::nnet2::MaxoutComponent::Read	nnet-component.cc	/^void MaxoutComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::MaxoutComponent
kaldi::nnet2::MaxoutComponent::Type	nnet-component.h	/^  virtual std::string Type() const { return "MaxoutComponent"; }$/;"	f	class:kaldi::nnet2::MaxoutComponent
kaldi::nnet2::MaxoutComponent::Write	nnet-component.cc	/^void MaxoutComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::MaxoutComponent
kaldi::nnet2::MaxoutComponent::input_dim_	nnet-component.h	/^  int32 input_dim_;$/;"	m	class:kaldi::nnet2::MaxoutComponent
kaldi::nnet2::MaxoutComponent::output_dim_	nnet-component.h	/^  int32 output_dim_;$/;"	m	class:kaldi::nnet2::MaxoutComponent
kaldi::nnet2::MixtureProbComponent	nnet-component.h	/^class MixtureProbComponent: public UpdatableComponent {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::MixtureProbComponent::Add	nnet-component.cc	/^void MixtureProbComponent::Add(BaseFloat alpha, const UpdatableComponent &other_in) {$/;"	f	class:kaldi::nnet2::MixtureProbComponent
kaldi::nnet2::MixtureProbComponent::Backprop	nnet-component.cc	/^void MixtureProbComponent::Backprop(const CuMatrixBase<BaseFloat> &in_value,$/;"	f	class:kaldi::nnet2::MixtureProbComponent
kaldi::nnet2::MixtureProbComponent::BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::MixtureProbComponent
kaldi::nnet2::MixtureProbComponent::BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::MixtureProbComponent
kaldi::nnet2::MixtureProbComponent::Copy	nnet-component.cc	/^Component* MixtureProbComponent::Copy() const {$/;"	f	class:kaldi::nnet2::MixtureProbComponent
kaldi::nnet2::MixtureProbComponent::DotProduct	nnet-component.cc	/^BaseFloat MixtureProbComponent::DotProduct($/;"	f	class:kaldi::nnet2::MixtureProbComponent
kaldi::nnet2::MixtureProbComponent::GetParameterDim	nnet-component.cc	/^int32 MixtureProbComponent::GetParameterDim() const {$/;"	f	class:kaldi::nnet2::MixtureProbComponent
kaldi::nnet2::MixtureProbComponent::Init	nnet-component.cc	/^void MixtureProbComponent::Init(BaseFloat learning_rate,$/;"	f	class:kaldi::nnet2::MixtureProbComponent
kaldi::nnet2::MixtureProbComponent::InitFromString	nnet-component.cc	/^void MixtureProbComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::MixtureProbComponent
kaldi::nnet2::MixtureProbComponent::InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return input_dim_; }$/;"	f	class:kaldi::nnet2::MixtureProbComponent
kaldi::nnet2::MixtureProbComponent::MixtureProbComponent	nnet-component.h	/^  MixtureProbComponent() { }$/;"	f	class:kaldi::nnet2::MixtureProbComponent
kaldi::nnet2::MixtureProbComponent::OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return output_dim_; }$/;"	f	class:kaldi::nnet2::MixtureProbComponent
kaldi::nnet2::MixtureProbComponent::PerturbParams	nnet-component.cc	/^void MixtureProbComponent::PerturbParams(BaseFloat stddev) {$/;"	f	class:kaldi::nnet2::MixtureProbComponent
kaldi::nnet2::MixtureProbComponent::Propagate	nnet-component.cc	/^void MixtureProbComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::MixtureProbComponent
kaldi::nnet2::MixtureProbComponent::Read	nnet-component.cc	/^void MixtureProbComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::MixtureProbComponent
kaldi::nnet2::MixtureProbComponent::Refresh	nnet-component.cc	/^void MixtureProbComponent::Refresh() {$/;"	f	class:kaldi::nnet2::MixtureProbComponent
kaldi::nnet2::MixtureProbComponent::Scale	nnet-component.cc	/^void MixtureProbComponent::Scale(BaseFloat scale) {$/;"	f	class:kaldi::nnet2::MixtureProbComponent
kaldi::nnet2::MixtureProbComponent::SetZero	nnet-component.cc	/^void MixtureProbComponent::SetZero(bool treat_as_gradient) {$/;"	f	class:kaldi::nnet2::MixtureProbComponent
kaldi::nnet2::MixtureProbComponent::Type	nnet-component.h	/^  virtual std::string Type() const { return "MixtureProbComponent"; }$/;"	f	class:kaldi::nnet2::MixtureProbComponent
kaldi::nnet2::MixtureProbComponent::UnVectorize	nnet-component.cc	/^void MixtureProbComponent::UnVectorize(const VectorBase<BaseFloat> &params) {$/;"	f	class:kaldi::nnet2::MixtureProbComponent
kaldi::nnet2::MixtureProbComponent::Vectorize	nnet-component.cc	/^void MixtureProbComponent::Vectorize(VectorBase<BaseFloat> *params) const {$/;"	f	class:kaldi::nnet2::MixtureProbComponent
kaldi::nnet2::MixtureProbComponent::Write	nnet-component.cc	/^void MixtureProbComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::MixtureProbComponent
kaldi::nnet2::MixtureProbComponent::input_dim_	nnet-component.h	/^  int32 input_dim_;$/;"	m	class:kaldi::nnet2::MixtureProbComponent
kaldi::nnet2::MixtureProbComponent::log_params_	nnet-component.h	/^  std::vector<CuMatrix<BaseFloat> > log_params_; \/\/ these are the$/;"	m	class:kaldi::nnet2::MixtureProbComponent
kaldi::nnet2::MixtureProbComponent::output_dim_	nnet-component.h	/^  int32 output_dim_;$/;"	m	class:kaldi::nnet2::MixtureProbComponent
kaldi::nnet2::MixtureProbComponent::params_	nnet-component.h	/^  std::vector<CuMatrix<BaseFloat> > params_; \/\/ these are derived from$/;"	m	class:kaldi::nnet2::MixtureProbComponent
kaldi::nnet2::MixupNnet	mixup-nnet.cc	/^void MixupNnet(const NnetMixupConfig &mixup_config,$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::Nnet	nnet-nnet.h	/^class Nnet {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::Nnet::AddNnet	nnet-nnet.cc	/^void Nnet::AddNnet(BaseFloat alpha,$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::AddNnet	nnet-nnet.cc	/^void Nnet::AddNnet(const VectorBase<BaseFloat> &scale_params,$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::AdjustLearningRates	nnet-nnet.cc	/^void Nnet::AdjustLearningRates($/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::Append	nnet-nnet.cc	/^void Nnet::Append(Component *new_component) {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::Check	nnet-nnet.cc	/^void Nnet::Check() const {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::Collapse	nnet-nnet.cc	/^void Nnet::Collapse(bool match_updatableness) {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::ComponentDotProducts	nnet-nnet.cc	/^void Nnet::ComponentDotProducts($/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::CopyStatsFrom	nnet-nnet.cc	/^void Nnet::CopyStatsFrom(const Nnet &other) {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::Destroy	nnet-nnet.cc	/^void Nnet::Destroy() {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::GetComponent	nnet-nnet.cc	/^Component& Nnet::GetComponent(int32 component) {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::GetComponent	nnet-nnet.cc	/^const Component& Nnet::GetComponent(int32 component) const {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::GetLearningRates	nnet-nnet.cc	/^void Nnet::GetLearningRates(VectorBase<BaseFloat> *learning_rates) const {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::GetParameterDim	nnet-nnet.cc	/^int32 Nnet::GetParameterDim() const {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::Info	nnet-nnet.cc	/^std::string Nnet::Info() const {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::Init	nnet-nnet.cc	/^void Nnet::Init(std::istream &is) {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::Init	nnet-nnet.cc	/^void Nnet::Init(std::vector<Component*> *components) {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::InputDim	nnet-nnet.cc	/^int32 Nnet::InputDim() const {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::LeftContext	nnet-nnet.cc	/^int32 Nnet::LeftContext() const {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::LimitRankOfLastLayer	nnet-nnet.cc	/^void Nnet::LimitRankOfLastLayer(int32 dim) {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::Nnet	nnet-nnet.cc	/^Nnet::Nnet(const Nnet &other): components_(other.components_.size()) {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::Nnet	nnet-nnet.cc	/^Nnet::Nnet(const Nnet &other1, const Nnet &other2) {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::Nnet	nnet-nnet.h	/^  Nnet() {}$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::NumComponents	nnet-nnet.h	/^  int32 NumComponents() const { return components_.size(); }$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::NumUpdatableComponents	nnet-nnet.cc	/^int32 Nnet::NumUpdatableComponents() const {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::OutputDim	nnet-nnet.cc	/^int32 Nnet::OutputDim() const {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::Read	nnet-nnet.cc	/^void Nnet::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::RemoveDropout	nnet-nnet.cc	/^void Nnet::RemoveDropout() {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::RemovePreconditioning	nnet-nnet.cc	/^void Nnet::RemovePreconditioning() {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::ResetGenerators	nnet-nnet.cc	/^void Nnet::ResetGenerators() { \/\/ resets random-number generators for all random$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::Resize	nnet-nnet.cc	/^void Nnet::Resize(int32 new_size) {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::RightContext	nnet-nnet.cc	/^int32 Nnet::RightContext() const {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::Scale	nnet-nnet.cc	/^void Nnet::Scale(BaseFloat scale) {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::ScaleComponents	nnet-nnet.cc	/^void Nnet::ScaleComponents(const VectorBase<BaseFloat> &scale_params) {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::ScaleLearningRates	nnet-nnet.cc	/^void Nnet::ScaleLearningRates(BaseFloat factor) {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::SetComponent	nnet-nnet.cc	/^void Nnet::SetComponent(int32 c, Component *component) {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::SetDropoutScale	nnet-nnet.cc	/^void Nnet::SetDropoutScale(BaseFloat scale) {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::SetIndexes	nnet-nnet.cc	/^void Nnet::SetIndexes() {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::SetLearningRates	nnet-nnet.cc	/^void Nnet::SetLearningRates(BaseFloat learning_rate) {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::SetLearningRates	nnet-nnet.cc	/^void Nnet::SetLearningRates(const VectorBase<BaseFloat> &learning_rates) {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::SetZero	nnet-nnet.cc	/^void Nnet::SetZero(bool treat_as_gradient) {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::UnVectorize	nnet-nnet.cc	/^void Nnet::UnVectorize(const VectorBase<BaseFloat> &params) {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::Vectorize	nnet-nnet.cc	/^void Nnet::Vectorize(VectorBase<BaseFloat> *params) const {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::Write	nnet-nnet.cc	/^void Nnet::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::ZeroStats	nnet-nnet.cc	/^void Nnet::ZeroStats() {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::components_	nnet-nnet.h	/^  std::vector<Component*> components_;$/;"	m	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::operator =	nnet-nnet.cc	/^Nnet &Nnet::operator = (const Nnet &other) {$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::Nnet::~Nnet	nnet-nnet.h	/^  virtual ~Nnet() { Destroy(); }$/;"	f	class:kaldi::nnet2::Nnet
kaldi::nnet2::NnetCombineAconfig	combine-nnet-a.h	/^struct NnetCombineAconfig {$/;"	s	namespace:kaldi::nnet2
kaldi::nnet2::NnetCombineAconfig::NnetCombineAconfig	combine-nnet-a.h	/^  NnetCombineAconfig(): num_bfgs_iters(15), initial_step(0.1),$/;"	f	struct:kaldi::nnet2::NnetCombineAconfig
kaldi::nnet2::NnetCombineAconfig::Register	combine-nnet-a.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetCombineAconfig
kaldi::nnet2::NnetCombineAconfig::initial_step	combine-nnet-a.h	/^  BaseFloat initial_step;$/;"	m	struct:kaldi::nnet2::NnetCombineAconfig
kaldi::nnet2::NnetCombineAconfig::max_learning_rate_factor	combine-nnet-a.h	/^  BaseFloat max_learning_rate_factor; \/\/ 2.0 by default.$/;"	m	struct:kaldi::nnet2::NnetCombineAconfig
kaldi::nnet2::NnetCombineAconfig::min_learning_rate	combine-nnet-a.h	/^  BaseFloat min_learning_rate; \/\/ 0.0001 by default; we don't allow learning rate to go below$/;"	m	struct:kaldi::nnet2::NnetCombineAconfig
kaldi::nnet2::NnetCombineAconfig::min_learning_rate_factor	combine-nnet-a.h	/^  BaseFloat min_learning_rate_factor; \/\/ 0.5 by default;$/;"	m	struct:kaldi::nnet2::NnetCombineAconfig
kaldi::nnet2::NnetCombineAconfig::num_bfgs_iters	combine-nnet-a.h	/^  int32 num_bfgs_iters; \/\/ The dimension is small (the number of layers)$/;"	m	struct:kaldi::nnet2::NnetCombineAconfig
kaldi::nnet2::NnetCombineAconfig::overshoot	combine-nnet-a.h	/^  BaseFloat overshoot;$/;"	m	struct:kaldi::nnet2::NnetCombineAconfig
kaldi::nnet2::NnetCombineAconfig::valid_impr_thresh	combine-nnet-a.h	/^  BaseFloat valid_impr_thresh;$/;"	m	struct:kaldi::nnet2::NnetCombineAconfig
kaldi::nnet2::NnetCombineConfig	combine-nnet.h	/^struct NnetCombineConfig {$/;"	s	namespace:kaldi::nnet2
kaldi::nnet2::NnetCombineConfig::NnetCombineConfig	combine-nnet.h	/^  NnetCombineConfig(): initial_model(-1), num_bfgs_iters(30),$/;"	f	struct:kaldi::nnet2::NnetCombineConfig
kaldi::nnet2::NnetCombineConfig::Register	combine-nnet.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetCombineConfig
kaldi::nnet2::NnetCombineConfig::initial_impr	combine-nnet.h	/^  BaseFloat initial_impr;$/;"	m	struct:kaldi::nnet2::NnetCombineConfig
kaldi::nnet2::NnetCombineConfig::initial_model	combine-nnet.h	/^  int32 initial_model; \/\/ If provided, the index of the initial model to start$/;"	m	struct:kaldi::nnet2::NnetCombineConfig
kaldi::nnet2::NnetCombineConfig::num_bfgs_iters	combine-nnet.h	/^  int32 num_bfgs_iters; \/\/ The dimension is small (e.g. 3 to 5 times the$/;"	m	struct:kaldi::nnet2::NnetCombineConfig
kaldi::nnet2::NnetCombineConfig::test_gradient	combine-nnet.h	/^  bool test_gradient;$/;"	m	struct:kaldi::nnet2::NnetCombineConfig
kaldi::nnet2::NnetCombineFastConfig	combine-nnet-fast.h	/^struct NnetCombineFastConfig {$/;"	s	namespace:kaldi::nnet2
kaldi::nnet2::NnetCombineFastConfig::NnetCombineFastConfig	combine-nnet-fast.h	/^  NnetCombineFastConfig(): initial_model(-1), num_lbfgs_iters(10),$/;"	f	struct:kaldi::nnet2::NnetCombineFastConfig
kaldi::nnet2::NnetCombineFastConfig::Register	combine-nnet-fast.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetCombineFastConfig
kaldi::nnet2::NnetCombineFastConfig::alpha	combine-nnet-fast.h	/^  BaseFloat alpha; \/\/ A smoothing value we use in getting the Fisher matrix.$/;"	m	struct:kaldi::nnet2::NnetCombineFastConfig
kaldi::nnet2::NnetCombineFastConfig::fisher_floor	combine-nnet-fast.h	/^  BaseFloat fisher_floor; \/\/ Flooring value we use for Fisher matrix (mainly$/;"	m	struct:kaldi::nnet2::NnetCombineFastConfig
kaldi::nnet2::NnetCombineFastConfig::fisher_minibatch_size	combine-nnet-fast.h	/^  int32 fisher_minibatch_size; \/\/ e.g. 64; a relatively small minibatch size we$/;"	m	struct:kaldi::nnet2::NnetCombineFastConfig
kaldi::nnet2::NnetCombineFastConfig::initial_impr	combine-nnet-fast.h	/^  BaseFloat initial_impr;$/;"	m	struct:kaldi::nnet2::NnetCombineFastConfig
kaldi::nnet2::NnetCombineFastConfig::initial_model	combine-nnet-fast.h	/^  int32 initial_model; \/\/ If provided, the index of the initial model to start$/;"	m	struct:kaldi::nnet2::NnetCombineFastConfig
kaldi::nnet2::NnetCombineFastConfig::max_lbfgs_dim	combine-nnet-fast.h	/^  int32 max_lbfgs_dim;$/;"	m	struct:kaldi::nnet2::NnetCombineFastConfig
kaldi::nnet2::NnetCombineFastConfig::minibatch_size	combine-nnet-fast.h	/^  int32 minibatch_size; \/\/ e.g. 1028; a larger minibatch size we use in$/;"	m	struct:kaldi::nnet2::NnetCombineFastConfig
kaldi::nnet2::NnetCombineFastConfig::num_lbfgs_iters	combine-nnet-fast.h	/^  int32 num_lbfgs_iters; $/;"	m	struct:kaldi::nnet2::NnetCombineFastConfig
kaldi::nnet2::NnetCombineFastConfig::num_threads	combine-nnet-fast.h	/^  int32 num_threads;$/;"	m	struct:kaldi::nnet2::NnetCombineFastConfig
kaldi::nnet2::NnetCombineFastConfig::regularizer	combine-nnet-fast.h	/^  BaseFloat regularizer;$/;"	m	struct:kaldi::nnet2::NnetCombineFastConfig
kaldi::nnet2::NnetComputation	nnet-compute.cc	/^void NnetComputation(const Nnet &nnet,$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::NnetComputer	nnet-compute.cc	/^class NnetComputer {$/;"	c	namespace:kaldi::nnet2	file:
kaldi::nnet2::NnetComputer::Backprop	nnet-compute.cc	/^void NnetComputer::Backprop(CuMatrix<BaseFloat> *tmp_deriv) {$/;"	f	class:kaldi::nnet2::NnetComputer
kaldi::nnet2::NnetComputer::ComputeLastLayerDeriv	nnet-compute.cc	/^BaseFloat NnetComputer::ComputeLastLayerDeriv(const Posterior &pdf_post,$/;"	f	class:kaldi::nnet2::NnetComputer
kaldi::nnet2::NnetComputer::GetOutput	nnet-compute.cc	/^  CuMatrixBase<BaseFloat> &GetOutput() { return forward_data_.back(); }$/;"	f	class:kaldi::nnet2::NnetComputer
kaldi::nnet2::NnetComputer::NnetComputer	nnet-compute.cc	/^NnetComputer::NnetComputer(const Nnet &nnet,$/;"	f	class:kaldi::nnet2::NnetComputer
kaldi::nnet2::NnetComputer::Propagate	nnet-compute.cc	/^void NnetComputer::Propagate() {$/;"	f	class:kaldi::nnet2::NnetComputer
kaldi::nnet2::NnetComputer::forward_data_	nnet-compute.cc	/^  std::vector<CuMatrix<BaseFloat> > forward_data_;$/;"	m	class:kaldi::nnet2::NnetComputer	file:
kaldi::nnet2::NnetComputer::nnet_	nnet-compute.cc	/^  const Nnet &nnet_;$/;"	m	class:kaldi::nnet2::NnetComputer	file:
kaldi::nnet2::NnetComputer::nnet_to_update_	nnet-compute.cc	/^  Nnet *nnet_to_update_; \/\/ May be NULL, if just want objective function$/;"	m	class:kaldi::nnet2::NnetComputer	file:
kaldi::nnet2::NnetComputer::spk_info_	nnet-compute.cc	/^  CuVector<BaseFloat> spk_info_;$/;"	m	class:kaldi::nnet2::NnetComputer	file:
kaldi::nnet2::NnetDataRandomizer	nnet-randomize.h	/^class NnetDataRandomizer {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::NnetDataRandomizer::AddTrainingFile	nnet-randomize.cc	/^void NnetDataRandomizer::AddTrainingFile(const Matrix<BaseFloat> &feats,$/;"	f	class:kaldi::nnet2::NnetDataRandomizer
kaldi::nnet2::NnetDataRandomizer::Done	nnet-randomize.cc	/^bool NnetDataRandomizer::Done() {$/;"	f	class:kaldi::nnet2::NnetDataRandomizer
kaldi::nnet2::NnetDataRandomizer::GetExample	nnet-randomize.cc	/^void NnetDataRandomizer::GetExample(const std::pair<int32, int32> &pair,$/;"	f	class:kaldi::nnet2::NnetDataRandomizer
kaldi::nnet2::NnetDataRandomizer::Next	nnet-randomize.cc	/^void NnetDataRandomizer::Next() {$/;"	f	class:kaldi::nnet2::NnetDataRandomizer
kaldi::nnet2::NnetDataRandomizer::NnetDataRandomizer	nnet-randomize.cc	/^NnetDataRandomizer::NnetDataRandomizer(int32 left_context_,$/;"	f	class:kaldi::nnet2::NnetDataRandomizer
kaldi::nnet2::NnetDataRandomizer::RandomizeSamples	nnet-randomize.cc	/^void NnetDataRandomizer::RandomizeSamples() {$/;"	f	class:kaldi::nnet2::NnetDataRandomizer
kaldi::nnet2::NnetDataRandomizer::TrainingFile	nnet-randomize.h	/^  struct TrainingFile {$/;"	s	class:kaldi::nnet2::NnetDataRandomizer
kaldi::nnet2::NnetDataRandomizer::TrainingFile::TrainingFile	nnet-randomize.h	/^    TrainingFile(const MatrixBase<BaseFloat> &feats_in,$/;"	f	struct:kaldi::nnet2::NnetDataRandomizer::TrainingFile
kaldi::nnet2::NnetDataRandomizer::TrainingFile::feats	nnet-randomize.h	/^    CompressedMatrix feats;$/;"	m	struct:kaldi::nnet2::NnetDataRandomizer::TrainingFile
kaldi::nnet2::NnetDataRandomizer::TrainingFile::pdf_post	nnet-randomize.h	/^    Posterior pdf_post; \/\/ pdf-level posteriors.  Typically a single$/;"	m	struct:kaldi::nnet2::NnetDataRandomizer::TrainingFile
kaldi::nnet2::NnetDataRandomizer::TrainingFile::spk_info	nnet-randomize.h	/^    Vector<BaseFloat> spk_info;$/;"	m	struct:kaldi::nnet2::NnetDataRandomizer::TrainingFile
kaldi::nnet2::NnetDataRandomizer::Value	nnet-randomize.cc	/^const NnetExample &NnetDataRandomizer::Value() {$/;"	f	class:kaldi::nnet2::NnetDataRandomizer
kaldi::nnet2::NnetDataRandomizer::config_	nnet-randomize.h	/^  NnetDataRandomizerConfig config_;    $/;"	m	class:kaldi::nnet2::NnetDataRandomizer
kaldi::nnet2::NnetDataRandomizer::cur_example_	nnet-randomize.h	/^  NnetExample cur_example_; \/\/ Returned from Value().  NnetDataRandomizerConfig_ config_;$/;"	m	class:kaldi::nnet2::NnetDataRandomizer
kaldi::nnet2::NnetDataRandomizer::data_	nnet-randomize.h	/^  std::vector<TrainingFile*> data_;$/;"	m	class:kaldi::nnet2::NnetDataRandomizer
kaldi::nnet2::NnetDataRandomizer::left_context_	nnet-randomize.h	/^  int32 left_context_;$/;"	m	class:kaldi::nnet2::NnetDataRandomizer
kaldi::nnet2::NnetDataRandomizer::num_samples_returned_	nnet-randomize.h	/^  int32 num_samples_returned_; \/\/ increases during training.$/;"	m	class:kaldi::nnet2::NnetDataRandomizer
kaldi::nnet2::NnetDataRandomizer::num_samples_tgt_	nnet-randomize.h	/^  int32 num_samples_tgt_; \/\/ a function of the config.$/;"	m	class:kaldi::nnet2::NnetDataRandomizer
kaldi::nnet2::NnetDataRandomizer::right_context_	nnet-randomize.h	/^  int32 right_context_;$/;"	m	class:kaldi::nnet2::NnetDataRandomizer
kaldi::nnet2::NnetDataRandomizer::samples_	nnet-randomize.h	/^  std::vector<std::pair<int32, int32> > samples_; \/\/ each time we randomize$/;"	m	class:kaldi::nnet2::NnetDataRandomizer
kaldi::nnet2::NnetDataRandomizer::~NnetDataRandomizer	nnet-randomize.cc	/^NnetDataRandomizer::~NnetDataRandomizer() {$/;"	f	class:kaldi::nnet2::NnetDataRandomizer
kaldi::nnet2::NnetDataRandomizerConfig	nnet-randomize.h	/^struct NnetDataRandomizerConfig {$/;"	s	namespace:kaldi::nnet2
kaldi::nnet2::NnetDataRandomizerConfig::NnetDataRandomizerConfig	nnet-randomize.h	/^  NnetDataRandomizerConfig(): num_samples(-1), num_epochs(-1) { }$/;"	f	struct:kaldi::nnet2::NnetDataRandomizerConfig
kaldi::nnet2::NnetDataRandomizerConfig::Register	nnet-randomize.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetDataRandomizerConfig
kaldi::nnet2::NnetDataRandomizerConfig::num_epochs	nnet-randomize.h	/^  BaseFloat num_epochs; \/\/ Total number of epochs we want (if >0).  The program will run$/;"	m	struct:kaldi::nnet2::NnetDataRandomizerConfig
kaldi::nnet2::NnetDataRandomizerConfig::num_samples	nnet-randomize.h	/^  int32 num_samples; \/\/ Total number of samples we want to train on (if >0).  The program$/;"	m	struct:kaldi::nnet2::NnetDataRandomizerConfig
kaldi::nnet2::NnetDiscriminativeStats	nnet-compute-discriminative.h	/^struct NnetDiscriminativeStats {$/;"	s	namespace:kaldi::nnet2
kaldi::nnet2::NnetDiscriminativeStats::Add	nnet-compute-discriminative.cc	/^void NnetDiscriminativeStats::Add(const NnetDiscriminativeStats &other) {$/;"	f	class:kaldi::nnet2::NnetDiscriminativeStats
kaldi::nnet2::NnetDiscriminativeStats::NnetDiscriminativeStats	nnet-compute-discriminative.h	/^  NnetDiscriminativeStats() { std::memset(this, 0, sizeof(*this)); }$/;"	f	struct:kaldi::nnet2::NnetDiscriminativeStats
kaldi::nnet2::NnetDiscriminativeStats::Print	nnet-compute-discriminative.cc	/^void NnetDiscriminativeStats::Print(std::string criterion) {$/;"	f	class:kaldi::nnet2::NnetDiscriminativeStats
kaldi::nnet2::NnetDiscriminativeStats::tot_den_objf	nnet-compute-discriminative.h	/^  double tot_den_objf;  \/\/ for MMI, the (weighted) denominator likelihood; for$/;"	m	struct:kaldi::nnet2::NnetDiscriminativeStats
kaldi::nnet2::NnetDiscriminativeStats::tot_num_count	nnet-compute-discriminative.h	/^  double tot_num_count; \/\/ total count of numerator posterior (should be$/;"	m	struct:kaldi::nnet2::NnetDiscriminativeStats
kaldi::nnet2::NnetDiscriminativeStats::tot_num_objf	nnet-compute-discriminative.h	/^  double tot_num_objf;  \/\/ for MMI, the (weighted) numerator likelihood; for$/;"	m	struct:kaldi::nnet2::NnetDiscriminativeStats
kaldi::nnet2::NnetDiscriminativeStats::tot_t	nnet-compute-discriminative.h	/^  double tot_t; \/\/ total number of frames$/;"	m	struct:kaldi::nnet2::NnetDiscriminativeStats
kaldi::nnet2::NnetDiscriminativeStats::tot_t_weighted	nnet-compute-discriminative.h	/^  double tot_t_weighted; \/\/ total number of frames times weight.$/;"	m	struct:kaldi::nnet2::NnetDiscriminativeStats
kaldi::nnet2::NnetDiscriminativeUpdate	nnet-compute-discriminative.cc	/^void NnetDiscriminativeUpdate(const AmNnet &am_nnet,$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::NnetDiscriminativeUpdateOptions	nnet-compute-discriminative.h	/^struct NnetDiscriminativeUpdateOptions {$/;"	s	namespace:kaldi::nnet2
kaldi::nnet2::NnetDiscriminativeUpdateOptions::NnetDiscriminativeUpdateOptions	nnet-compute-discriminative.h	/^  NnetDiscriminativeUpdateOptions(): criterion("smbr"), acoustic_scale(0.1),$/;"	f	struct:kaldi::nnet2::NnetDiscriminativeUpdateOptions
kaldi::nnet2::NnetDiscriminativeUpdateOptions::Register	nnet-compute-discriminative.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetDiscriminativeUpdateOptions
kaldi::nnet2::NnetDiscriminativeUpdateOptions::acoustic_scale	nnet-compute-discriminative.h	/^  BaseFloat acoustic_scale; \/\/ e.g. 0.1$/;"	m	struct:kaldi::nnet2::NnetDiscriminativeUpdateOptions
kaldi::nnet2::NnetDiscriminativeUpdateOptions::boost	nnet-compute-discriminative.h	/^  BaseFloat boost; \/\/ for MMI, boosting factor (would be Boosted MMI)... e.g. 0.1.$/;"	m	struct:kaldi::nnet2::NnetDiscriminativeUpdateOptions
kaldi::nnet2::NnetDiscriminativeUpdateOptions::criterion	nnet-compute-discriminative.h	/^  std::string criterion; \/\/ "mmi" or "mpfe" or "smbr"$/;"	m	struct:kaldi::nnet2::NnetDiscriminativeUpdateOptions
kaldi::nnet2::NnetDiscriminativeUpdateOptions::drop_frames	nnet-compute-discriminative.h	/^  bool drop_frames; \/\/ for MMI, true if we ignore frames where alignment$/;"	m	struct:kaldi::nnet2::NnetDiscriminativeUpdateOptions
kaldi::nnet2::NnetDiscriminativeUpdateOptions::silence_phones_str	nnet-compute-discriminative.h	/^  std::string silence_phones_str; \/\/ colon-separated list of integer ids of silence phones,$/;"	m	struct:kaldi::nnet2::NnetDiscriminativeUpdateOptions
kaldi::nnet2::NnetDiscriminativeUpdateParallel	nnet-compute-discriminative-parallel.cc	/^void NnetDiscriminativeUpdateParallel($/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::NnetDiscriminativeUpdater	nnet-compute-discriminative.cc	/^class NnetDiscriminativeUpdater {$/;"	c	namespace:kaldi::nnet2	file:
kaldi::nnet2::NnetDiscriminativeUpdater::Arc	nnet-compute-discriminative.cc	/^  typedef LatticeArc Arc;$/;"	t	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
kaldi::nnet2::NnetDiscriminativeUpdater::Backprop	nnet-compute-discriminative.cc	/^void NnetDiscriminativeUpdater::Backprop() {$/;"	f	class:kaldi::nnet2::NnetDiscriminativeUpdater
kaldi::nnet2::NnetDiscriminativeUpdater::GetDiscriminativePosteriors	nnet-compute-discriminative.cc	/^double NnetDiscriminativeUpdater::GetDiscriminativePosteriors(Posterior *post) {$/;"	f	class:kaldi::nnet2::NnetDiscriminativeUpdater
kaldi::nnet2::NnetDiscriminativeUpdater::GetInputFeatures	nnet-compute-discriminative.cc	/^SubMatrix<BaseFloat> NnetDiscriminativeUpdater::GetInputFeatures() const {$/;"	f	class:kaldi::nnet2::NnetDiscriminativeUpdater
kaldi::nnet2::NnetDiscriminativeUpdater::GetOutput	nnet-compute-discriminative.cc	/^  CuMatrixBase<BaseFloat> &GetOutput() { return forward_data_.back(); }$/;"	f	class:kaldi::nnet2::NnetDiscriminativeUpdater
kaldi::nnet2::NnetDiscriminativeUpdater::LatticeComputations	nnet-compute-discriminative.cc	/^void NnetDiscriminativeUpdater::LatticeComputations() {$/;"	f	class:kaldi::nnet2::NnetDiscriminativeUpdater
kaldi::nnet2::NnetDiscriminativeUpdater::MakePair	nnet-compute-discriminative.cc	/^  static inline Int32Pair MakePair(int32 first, int32 second) {$/;"	f	class:kaldi::nnet2::NnetDiscriminativeUpdater
kaldi::nnet2::NnetDiscriminativeUpdater::NnetDiscriminativeUpdater	nnet-compute-discriminative.cc	/^NnetDiscriminativeUpdater::NnetDiscriminativeUpdater($/;"	f	class:kaldi::nnet2::NnetDiscriminativeUpdater
kaldi::nnet2::NnetDiscriminativeUpdater::Propagate	nnet-compute-discriminative.cc	/^void NnetDiscriminativeUpdater::Propagate() {$/;"	f	class:kaldi::nnet2::NnetDiscriminativeUpdater
kaldi::nnet2::NnetDiscriminativeUpdater::StateId	nnet-compute-discriminative.cc	/^  typedef Arc::StateId StateId;$/;"	t	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
kaldi::nnet2::NnetDiscriminativeUpdater::Update	nnet-compute-discriminative.cc	/^  void Update() {$/;"	f	class:kaldi::nnet2::NnetDiscriminativeUpdater
kaldi::nnet2::NnetDiscriminativeUpdater::am_nnet_	nnet-compute-discriminative.cc	/^  const AmNnet &am_nnet_;$/;"	m	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
kaldi::nnet2::NnetDiscriminativeUpdater::backward_data_	nnet-compute-discriminative.cc	/^  CuMatrix<BaseFloat> backward_data_;$/;"	m	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
kaldi::nnet2::NnetDiscriminativeUpdater::eg_	nnet-compute-discriminative.cc	/^  const DiscriminativeNnetExample &eg_;$/;"	m	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
kaldi::nnet2::NnetDiscriminativeUpdater::forward_data_	nnet-compute-discriminative.cc	/^  std::vector<CuMatrix<BaseFloat> > forward_data_; $/;"	m	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
kaldi::nnet2::NnetDiscriminativeUpdater::lat_	nnet-compute-discriminative.cc	/^  Lattice lat_; \/\/ we convert the CompactLattice in the eg, into Lattice form.$/;"	m	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
kaldi::nnet2::NnetDiscriminativeUpdater::nnet_to_update_	nnet-compute-discriminative.cc	/^  Nnet *nnet_to_update_; \/\/ will equal am_nnet_.GetNnet(), in SGD case, or$/;"	m	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
kaldi::nnet2::NnetDiscriminativeUpdater::opts_	nnet-compute-discriminative.cc	/^  const NnetDiscriminativeUpdateOptions &opts_;$/;"	m	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
kaldi::nnet2::NnetDiscriminativeUpdater::silence_phones_	nnet-compute-discriminative.cc	/^  std::vector<int32> silence_phones_; \/\/ derived from opts_.silence_phones_str$/;"	m	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
kaldi::nnet2::NnetDiscriminativeUpdater::stats_	nnet-compute-discriminative.cc	/^  NnetDiscriminativeStats *stats_; \/\/ the objective function, etc.$/;"	m	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
kaldi::nnet2::NnetDiscriminativeUpdater::tmodel_	nnet-compute-discriminative.cc	/^  const TransitionModel &tmodel_;$/;"	m	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
kaldi::nnet2::NnetExample	nnet-example.h	/^struct NnetExample {$/;"	s	namespace:kaldi::nnet2
kaldi::nnet2::NnetExample::Read	nnet-example.cc	/^void NnetExample::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::NnetExample
kaldi::nnet2::NnetExample::Write	nnet-example.cc	/^void NnetExample::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::NnetExample
kaldi::nnet2::NnetExample::input_frames	nnet-example.h	/^  CompressedMatrix input_frames; $/;"	m	struct:kaldi::nnet2::NnetExample
kaldi::nnet2::NnetExample::labels	nnet-example.h	/^  std::vector<std::pair<int32, BaseFloat> > labels;  $/;"	m	struct:kaldi::nnet2::NnetExample
kaldi::nnet2::NnetExample::left_context	nnet-example.h	/^  int32 left_context;$/;"	m	struct:kaldi::nnet2::NnetExample
kaldi::nnet2::NnetExample::spk_info	nnet-example.h	/^  Vector<BaseFloat> spk_info; $/;"	m	struct:kaldi::nnet2::NnetExample
kaldi::nnet2::NnetExampleWriter	nnet-example.h	/^typedef TableWriter<KaldiObjectHolder<NnetExample > > NnetExampleWriter;$/;"	t	namespace:kaldi::nnet2
kaldi::nnet2::NnetFixConfig	nnet-fix.h	/^struct NnetFixConfig {$/;"	s	namespace:kaldi::nnet2
kaldi::nnet2::NnetFixConfig::NnetFixConfig	nnet-fix.h	/^  NnetFixConfig(): min_average_deriv(0.1), max_average_deriv(0.75),$/;"	f	struct:kaldi::nnet2::NnetFixConfig
kaldi::nnet2::NnetFixConfig::Register	nnet-fix.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetFixConfig
kaldi::nnet2::NnetFixConfig::max_average_deriv	nnet-fix.h	/^  BaseFloat max_average_deriv; \/\/ Maximum average derivative that we allow,$/;"	m	struct:kaldi::nnet2::NnetFixConfig
kaldi::nnet2::NnetFixConfig::min_average_deriv	nnet-fix.h	/^  BaseFloat min_average_deriv; \/\/ Minimum average derivative that we allow,$/;"	m	struct:kaldi::nnet2::NnetFixConfig
kaldi::nnet2::NnetFixConfig::parameter_factor	nnet-fix.h	/^  BaseFloat parameter_factor; \/\/ Factor (>1.0) by which we change the parameters if$/;"	m	struct:kaldi::nnet2::NnetFixConfig
kaldi::nnet2::NnetFixConfig::relu_bias_change	nnet-fix.h	/^  BaseFloat relu_bias_change; \/\/ Change in bias for relus that are usually close to zero.$/;"	m	struct:kaldi::nnet2::NnetFixConfig
kaldi::nnet2::NnetGradientComputation	nnet-compute.cc	/^BaseFloat NnetGradientComputation(const Nnet &nnet,$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::NnetLbfgsTrainer	nnet-lbfgs.h	/^class NnetLbfgsTrainer {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::NnetLbfgsTrainer::AddExample	nnet-lbfgs.h	/^  void AddExample(const NnetExample &eg) { egs_.push_back(eg); }$/;"	f	class:kaldi::nnet2::NnetLbfgsTrainer
kaldi::nnet2::NnetLbfgsTrainer::CopyParamsOrGradientFromNnet	nnet-lbfgs.cc	/^void NnetLbfgsTrainer::CopyParamsOrGradientFromNnet(const Nnet &nnet,$/;"	f	class:kaldi::nnet2::NnetLbfgsTrainer
kaldi::nnet2::NnetLbfgsTrainer::CopyParamsOrGradientToNnet	nnet-lbfgs.cc	/^void NnetLbfgsTrainer::CopyParamsOrGradientToNnet(const VectorBase<BaseFloat> &params,$/;"	f	class:kaldi::nnet2::NnetLbfgsTrainer
kaldi::nnet2::NnetLbfgsTrainer::GetObjfAndGradient	nnet-lbfgs.cc	/^BaseFloat NnetLbfgsTrainer::GetObjfAndGradient($/;"	f	class:kaldi::nnet2::NnetLbfgsTrainer
kaldi::nnet2::NnetLbfgsTrainer::Initialize	nnet-lbfgs.cc	/^void NnetLbfgsTrainer::Initialize(Nnet *nnet_in) {$/;"	f	class:kaldi::nnet2::NnetLbfgsTrainer
kaldi::nnet2::NnetLbfgsTrainer::NnetLbfgsTrainer	nnet-lbfgs.h	/^  NnetLbfgsTrainer(const NnetLbfgsTrainerConfig &config): config_(config) { }$/;"	f	class:kaldi::nnet2::NnetLbfgsTrainer
kaldi::nnet2::NnetLbfgsTrainer::Train	nnet-lbfgs.cc	/^void NnetLbfgsTrainer::Train(Nnet *nnet_in) {$/;"	f	class:kaldi::nnet2::NnetLbfgsTrainer
kaldi::nnet2::NnetLbfgsTrainer::config_	nnet-lbfgs.h	/^  const NnetLbfgsTrainerConfig &config_;$/;"	m	class:kaldi::nnet2::NnetLbfgsTrainer
kaldi::nnet2::NnetLbfgsTrainer::egs_	nnet-lbfgs.h	/^  std::vector<NnetExample> egs_;  $/;"	m	class:kaldi::nnet2::NnetLbfgsTrainer
kaldi::nnet2::NnetLbfgsTrainer::initial_objf_	nnet-lbfgs.h	/^  BaseFloat initial_objf_;$/;"	m	class:kaldi::nnet2::NnetLbfgsTrainer
kaldi::nnet2::NnetLbfgsTrainer::lbfgs_	nnet-lbfgs.h	/^  OptimizeLbfgs<BaseFloat> *lbfgs_;$/;"	m	class:kaldi::nnet2::NnetLbfgsTrainer
kaldi::nnet2::NnetLbfgsTrainer::nnet_	nnet-lbfgs.h	/^  const Nnet *nnet_; \/\/ the original neural net.$/;"	m	class:kaldi::nnet2::NnetLbfgsTrainer
kaldi::nnet2::NnetLbfgsTrainer::nnet_precondition_	nnet-lbfgs.h	/^  Nnet *nnet_precondition_; \/\/ This object stores the preconditioning$/;"	m	class:kaldi::nnet2::NnetLbfgsTrainer
kaldi::nnet2::NnetLbfgsTrainer::params_	nnet-lbfgs.h	/^  Vector<BaseFloat> params_; \/\/ Neural net parameters, stored as a vector.$/;"	m	class:kaldi::nnet2::NnetLbfgsTrainer
kaldi::nnet2::NnetLbfgsTrainer::~NnetLbfgsTrainer	nnet-lbfgs.cc	/^NnetLbfgsTrainer::~NnetLbfgsTrainer() {$/;"	f	class:kaldi::nnet2::NnetLbfgsTrainer
kaldi::nnet2::NnetLbfgsTrainerConfig	nnet-lbfgs.h	/^struct NnetLbfgsTrainerConfig {$/;"	s	namespace:kaldi::nnet2
kaldi::nnet2::NnetLbfgsTrainerConfig::NnetLbfgsTrainerConfig	nnet-lbfgs.h	/^  NnetLbfgsTrainerConfig(): minibatch_size(1024), lbfgs_dim(10),$/;"	f	struct:kaldi::nnet2::NnetLbfgsTrainerConfig
kaldi::nnet2::NnetLbfgsTrainerConfig::Register	nnet-lbfgs.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetLbfgsTrainerConfig
kaldi::nnet2::NnetLbfgsTrainerConfig::initial_impr	nnet-lbfgs.h	/^  BaseFloat initial_impr;$/;"	m	struct:kaldi::nnet2::NnetLbfgsTrainerConfig
kaldi::nnet2::NnetLbfgsTrainerConfig::lbfgs_dim	nnet-lbfgs.h	/^  int32 lbfgs_dim; \/\/ Number of steps to keep in L-BFGS.$/;"	m	struct:kaldi::nnet2::NnetLbfgsTrainerConfig
kaldi::nnet2::NnetLbfgsTrainerConfig::lbfgs_num_iters	nnet-lbfgs.h	/^  int32 lbfgs_num_iters; \/\/ more precisely, the number of function evaluations.$/;"	m	struct:kaldi::nnet2::NnetLbfgsTrainerConfig
kaldi::nnet2::NnetLbfgsTrainerConfig::minibatch_size	nnet-lbfgs.h	/^  int32 minibatch_size;$/;"	m	struct:kaldi::nnet2::NnetLbfgsTrainerConfig
kaldi::nnet2::NnetLbfgsTrainerConfig::precondition_config	nnet-lbfgs.h	/^  PreconditionConfig precondition_config;$/;"	m	struct:kaldi::nnet2::NnetLbfgsTrainerConfig
kaldi::nnet2::NnetLimitRankOpts	nnet-limit-rank.h	/^struct NnetLimitRankOpts {$/;"	s	namespace:kaldi::nnet2
kaldi::nnet2::NnetLimitRankOpts::NnetLimitRankOpts	nnet-limit-rank.h	/^  NnetLimitRankOpts(): num_threads(1), parameter_proportion(0.75) { }$/;"	f	struct:kaldi::nnet2::NnetLimitRankOpts
kaldi::nnet2::NnetLimitRankOpts::Register	nnet-limit-rank.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetLimitRankOpts
kaldi::nnet2::NnetLimitRankOpts::num_threads	nnet-limit-rank.h	/^  int32 num_threads;$/;"	m	struct:kaldi::nnet2::NnetLimitRankOpts
kaldi::nnet2::NnetLimitRankOpts::parameter_proportion	nnet-limit-rank.h	/^  BaseFloat parameter_proportion;$/;"	m	struct:kaldi::nnet2::NnetLimitRankOpts
kaldi::nnet2::NnetMixupConfig	mixup-nnet.h	/^struct NnetMixupConfig {$/;"	s	namespace:kaldi::nnet2
kaldi::nnet2::NnetMixupConfig::NnetMixupConfig	mixup-nnet.h	/^  NnetMixupConfig(): power(0.25), min_count(1000.0),$/;"	f	struct:kaldi::nnet2::NnetMixupConfig
kaldi::nnet2::NnetMixupConfig::Register	mixup-nnet.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetMixupConfig
kaldi::nnet2::NnetMixupConfig::min_count	mixup-nnet.h	/^  BaseFloat min_count;$/;"	m	struct:kaldi::nnet2::NnetMixupConfig
kaldi::nnet2::NnetMixupConfig::num_mixtures	mixup-nnet.h	/^  int32 num_mixtures;$/;"	m	struct:kaldi::nnet2::NnetMixupConfig
kaldi::nnet2::NnetMixupConfig::perturb_stddev	mixup-nnet.h	/^  BaseFloat perturb_stddev;$/;"	m	struct:kaldi::nnet2::NnetMixupConfig
kaldi::nnet2::NnetMixupConfig::power	mixup-nnet.h	/^  BaseFloat power;$/;"	m	struct:kaldi::nnet2::NnetMixupConfig
kaldi::nnet2::NnetRescaleConfig	rescale-nnet.h	/^struct NnetRescaleConfig {$/;"	s	namespace:kaldi::nnet2
kaldi::nnet2::NnetRescaleConfig::NnetRescaleConfig	rescale-nnet.h	/^  NnetRescaleConfig(): target_avg_deriv(0.2),$/;"	f	struct:kaldi::nnet2::NnetRescaleConfig
kaldi::nnet2::NnetRescaleConfig::Register	rescale-nnet.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetRescaleConfig
kaldi::nnet2::NnetRescaleConfig::delta	rescale-nnet.h	/^  BaseFloat delta;$/;"	m	struct:kaldi::nnet2::NnetRescaleConfig
kaldi::nnet2::NnetRescaleConfig::max_change	rescale-nnet.h	/^  BaseFloat max_change; \/\/ maximum change on any one iteration (to$/;"	m	struct:kaldi::nnet2::NnetRescaleConfig
kaldi::nnet2::NnetRescaleConfig::min_change	rescale-nnet.h	/^  BaseFloat min_change; \/\/ minimum change on any one iteration (controls$/;"	m	struct:kaldi::nnet2::NnetRescaleConfig
kaldi::nnet2::NnetRescaleConfig::num_iters	rescale-nnet.h	/^  BaseFloat num_iters;$/;"	m	struct:kaldi::nnet2::NnetRescaleConfig
kaldi::nnet2::NnetRescaleConfig::target_avg_deriv	rescale-nnet.h	/^  BaseFloat target_avg_deriv;$/;"	m	struct:kaldi::nnet2::NnetRescaleConfig
kaldi::nnet2::NnetRescaleConfig::target_first_layer_avg_deriv	rescale-nnet.h	/^  BaseFloat target_first_layer_avg_deriv;$/;"	m	struct:kaldi::nnet2::NnetRescaleConfig
kaldi::nnet2::NnetRescaleConfig::target_last_layer_avg_deriv	rescale-nnet.h	/^  BaseFloat target_last_layer_avg_deriv;$/;"	m	struct:kaldi::nnet2::NnetRescaleConfig
kaldi::nnet2::NnetRescaler	rescale-nnet.cc	/^class NnetRescaler {$/;"	c	namespace:kaldi::nnet2	file:
kaldi::nnet2::NnetRescaler::ComputeRelevantIndexes	rescale-nnet.cc	/^void NnetRescaler::ComputeRelevantIndexes() {$/;"	f	class:kaldi::nnet2::NnetRescaler
kaldi::nnet2::NnetRescaler::FormatInput	rescale-nnet.cc	/^void NnetRescaler::FormatInput(const std::vector<NnetExample> &data,$/;"	f	class:kaldi::nnet2::NnetRescaler
kaldi::nnet2::NnetRescaler::GetTargetAvgDeriv	rescale-nnet.cc	/^BaseFloat NnetRescaler::GetTargetAvgDeriv(int32 c) {$/;"	f	class:kaldi::nnet2::NnetRescaler
kaldi::nnet2::NnetRescaler::NnetRescaler	rescale-nnet.cc	/^  NnetRescaler(const NnetRescaleConfig &config,$/;"	f	class:kaldi::nnet2::NnetRescaler
kaldi::nnet2::NnetRescaler::Rescale	rescale-nnet.cc	/^void NnetRescaler::Rescale() {$/;"	f	class:kaldi::nnet2::NnetRescaler
kaldi::nnet2::NnetRescaler::RescaleComponent	rescale-nnet.cc	/^void NnetRescaler::RescaleComponent($/;"	f	class:kaldi::nnet2::NnetRescaler
kaldi::nnet2::NnetRescaler::config_	rescale-nnet.cc	/^  const NnetRescaleConfig &config_;$/;"	m	class:kaldi::nnet2::NnetRescaler	file:
kaldi::nnet2::NnetRescaler::examples_	rescale-nnet.cc	/^  const std::vector<NnetExample> &examples_;$/;"	m	class:kaldi::nnet2::NnetRescaler	file:
kaldi::nnet2::NnetRescaler::nnet_	rescale-nnet.cc	/^  Nnet *nnet_;$/;"	m	class:kaldi::nnet2::NnetRescaler	file:
kaldi::nnet2::NnetRescaler::relevant_indexes_	rescale-nnet.cc	/^  std::set<int32> relevant_indexes_; \/\/ values of c with AffineComponent followed$/;"	m	class:kaldi::nnet2::NnetRescaler	file:
kaldi::nnet2::NnetShrinkConfig	shrink-nnet.h	/^struct NnetShrinkConfig {$/;"	s	namespace:kaldi::nnet2
kaldi::nnet2::NnetShrinkConfig::NnetShrinkConfig	shrink-nnet.h	/^  NnetShrinkConfig(): num_bfgs_iters(10), initial_step(0.1) { }$/;"	f	struct:kaldi::nnet2::NnetShrinkConfig
kaldi::nnet2::NnetShrinkConfig::Register	shrink-nnet.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetShrinkConfig
kaldi::nnet2::NnetShrinkConfig::initial_step	shrink-nnet.h	/^  BaseFloat initial_step;$/;"	m	struct:kaldi::nnet2::NnetShrinkConfig
kaldi::nnet2::NnetShrinkConfig::num_bfgs_iters	shrink-nnet.h	/^  int32 num_bfgs_iters; \/\/ The dimension is small (e.g. 3 to 5) so we do$/;"	m	struct:kaldi::nnet2::NnetShrinkConfig
kaldi::nnet2::NnetSimpleTrainer	train-nnet.h	/^class NnetSimpleTrainer {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::NnetSimpleTrainer::BeginNewPhase	train-nnet.cc	/^void NnetSimpleTrainer::BeginNewPhase(bool first_time) {$/;"	f	class:kaldi::nnet2::NnetSimpleTrainer
kaldi::nnet2::NnetSimpleTrainer::NnetSimpleTrainer	train-nnet.cc	/^NnetSimpleTrainer::NnetSimpleTrainer($/;"	f	class:kaldi::nnet2::NnetSimpleTrainer
kaldi::nnet2::NnetSimpleTrainer::TrainOnExample	train-nnet.cc	/^void NnetSimpleTrainer::TrainOnExample(const NnetExample &value) {$/;"	f	class:kaldi::nnet2::NnetSimpleTrainer
kaldi::nnet2::NnetSimpleTrainer::TrainOneMinibatch	train-nnet.cc	/^void NnetSimpleTrainer::TrainOneMinibatch() {$/;"	f	class:kaldi::nnet2::NnetSimpleTrainer
kaldi::nnet2::NnetSimpleTrainer::buffer_	train-nnet.h	/^  std::vector<NnetExample> buffer_;$/;"	m	class:kaldi::nnet2::NnetSimpleTrainer
kaldi::nnet2::NnetSimpleTrainer::config_	train-nnet.h	/^  NnetSimpleTrainerConfig config_;$/;"	m	class:kaldi::nnet2::NnetSimpleTrainer
kaldi::nnet2::NnetSimpleTrainer::count_this_phase_	train-nnet.h	/^  double count_this_phase_; \/\/ count corresponding to the above.$/;"	m	class:kaldi::nnet2::NnetSimpleTrainer
kaldi::nnet2::NnetSimpleTrainer::logprob_this_phase_	train-nnet.h	/^  double logprob_this_phase_; \/\/ Needed for accumulating train log-prob on each phase.$/;"	m	class:kaldi::nnet2::NnetSimpleTrainer
kaldi::nnet2::NnetSimpleTrainer::minibatches_seen_this_phase_	train-nnet.h	/^  int32 minibatches_seen_this_phase_;$/;"	m	class:kaldi::nnet2::NnetSimpleTrainer
kaldi::nnet2::NnetSimpleTrainer::nnet_	train-nnet.h	/^  Nnet *nnet_; \/\/ the nnet we're training.$/;"	m	class:kaldi::nnet2::NnetSimpleTrainer
kaldi::nnet2::NnetSimpleTrainer::num_phases_	train-nnet.h	/^  int32 num_phases_;$/;"	m	class:kaldi::nnet2::NnetSimpleTrainer
kaldi::nnet2::NnetSimpleTrainer::~NnetSimpleTrainer	train-nnet.cc	/^NnetSimpleTrainer::~NnetSimpleTrainer() {$/;"	f	class:kaldi::nnet2::NnetSimpleTrainer
kaldi::nnet2::NnetSimpleTrainerConfig	train-nnet.h	/^struct NnetSimpleTrainerConfig {$/;"	s	namespace:kaldi::nnet2
kaldi::nnet2::NnetSimpleTrainerConfig::NnetSimpleTrainerConfig	train-nnet.h	/^  NnetSimpleTrainerConfig(): minibatch_size(500),$/;"	f	struct:kaldi::nnet2::NnetSimpleTrainerConfig
kaldi::nnet2::NnetSimpleTrainerConfig::Register	train-nnet.h	/^  void Register (OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetSimpleTrainerConfig
kaldi::nnet2::NnetSimpleTrainerConfig::minibatch_size	train-nnet.h	/^  int32 minibatch_size;$/;"	m	struct:kaldi::nnet2::NnetSimpleTrainerConfig
kaldi::nnet2::NnetSimpleTrainerConfig::minibatches_per_phase	train-nnet.h	/^  int32 minibatches_per_phase;$/;"	m	struct:kaldi::nnet2::NnetSimpleTrainerConfig
kaldi::nnet2::NnetStats	nnet-stats.h	/^class NnetStats {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::NnetStats::AddStats	nnet-stats.cc	/^void NnetStats::AddStats(BaseFloat avg_deriv, BaseFloat avg_value) {$/;"	f	class:kaldi::nnet2::NnetStats
kaldi::nnet2::NnetStats::AddStatsFromNnet	nnet-stats.cc	/^void NnetStats::AddStatsFromNnet(const Nnet &nnet) {$/;"	f	class:kaldi::nnet2::NnetStats
kaldi::nnet2::NnetStats::BucketFor	nnet-stats.cc	/^int32 NnetStats::BucketFor(BaseFloat avg_deriv) {$/;"	f	class:kaldi::nnet2::NnetStats
kaldi::nnet2::NnetStats::NnetStats	nnet-stats.h	/^  NnetStats(int32 affine_component_index, BaseFloat bucket_width):$/;"	f	class:kaldi::nnet2::NnetStats
kaldi::nnet2::NnetStats::PrintStats	nnet-stats.cc	/^void NnetStats::PrintStats(std::ostream &os) {$/;"	f	class:kaldi::nnet2::NnetStats
kaldi::nnet2::NnetStats::StatsElement	nnet-stats.h	/^  struct StatsElement {$/;"	s	class:kaldi::nnet2::NnetStats
kaldi::nnet2::NnetStats::StatsElement::AddStats	nnet-stats.cc	/^void NnetStats::StatsElement::AddStats(BaseFloat avg_deriv, BaseFloat avg_value) {$/;"	f	class:kaldi::nnet2::NnetStats::StatsElement
kaldi::nnet2::NnetStats::StatsElement::PrintStats	nnet-stats.cc	/^void NnetStats::StatsElement::PrintStats(std::ostream &os) {$/;"	f	class:kaldi::nnet2::NnetStats::StatsElement
kaldi::nnet2::NnetStats::StatsElement::StatsElement	nnet-stats.h	/^    StatsElement(BaseFloat deriv_begin,$/;"	f	struct:kaldi::nnet2::NnetStats::StatsElement
kaldi::nnet2::NnetStats::StatsElement::abs_value_sum	nnet-stats.h	/^    BaseFloat abs_value_sum; \/\/ Sum of abs(avg-value).  Tells us whether it's$/;"	m	struct:kaldi::nnet2::NnetStats::StatsElement
kaldi::nnet2::NnetStats::StatsElement::abs_value_sumsq	nnet-stats.h	/^    BaseFloat abs_value_sumsq; \/\/ Sum-squared of abs(avg-value).$/;"	m	struct:kaldi::nnet2::NnetStats::StatsElement
kaldi::nnet2::NnetStats::StatsElement::count	nnet-stats.h	/^    int32 count;      \/\/ Number of nonlinearities in this bucket.$/;"	m	struct:kaldi::nnet2::NnetStats::StatsElement
kaldi::nnet2::NnetStats::StatsElement::deriv_begin	nnet-stats.h	/^    BaseFloat deriv_begin; \/\/ avg-deriv, beginning of bucket.$/;"	m	struct:kaldi::nnet2::NnetStats::StatsElement
kaldi::nnet2::NnetStats::StatsElement::deriv_end	nnet-stats.h	/^    BaseFloat deriv_end;   \/\/ avg-deriv, end of bucket.$/;"	m	struct:kaldi::nnet2::NnetStats::StatsElement
kaldi::nnet2::NnetStats::StatsElement::deriv_sum	nnet-stats.h	/^    BaseFloat deriv_sum;   \/\/ sum of avg-deriv within bucket.$/;"	m	struct:kaldi::nnet2::NnetStats::StatsElement
kaldi::nnet2::NnetStats::StatsElement::deriv_sumsq	nnet-stats.h	/^    BaseFloat deriv_sumsq;   \/\/ Sum-squared of avg-deriv within bucket.$/;"	m	struct:kaldi::nnet2::NnetStats::StatsElement
kaldi::nnet2::NnetStats::affine_component_index_	nnet-stats.h	/^  int32 affine_component_index_; \/\/ Component index of the affine component$/;"	m	class:kaldi::nnet2::NnetStats
kaldi::nnet2::NnetStats::bucket_width_	nnet-stats.h	/^  BaseFloat bucket_width_; \/\/ width of buckets of stats we store (in derivative values).$/;"	m	class:kaldi::nnet2::NnetStats
kaldi::nnet2::NnetStats::buckets_	nnet-stats.h	/^  std::vector<StatsElement> buckets_; \/\/ Stats divided into buckets by avg_deriv.$/;"	m	class:kaldi::nnet2::NnetStats
kaldi::nnet2::NnetStats::global_	nnet-stats.h	/^  StatsElement global_; \/\/ All the stats.$/;"	m	class:kaldi::nnet2::NnetStats
kaldi::nnet2::NnetStatsConfig	nnet-stats.h	/^struct NnetStatsConfig {  $/;"	s	namespace:kaldi::nnet2
kaldi::nnet2::NnetStatsConfig::NnetStatsConfig	nnet-stats.h	/^  NnetStatsConfig(): bucket_width(0.025) { }$/;"	f	struct:kaldi::nnet2::NnetStatsConfig
kaldi::nnet2::NnetStatsConfig::Register	nnet-stats.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetStatsConfig
kaldi::nnet2::NnetStatsConfig::bucket_width	nnet-stats.h	/^  BaseFloat bucket_width;$/;"	m	struct:kaldi::nnet2::NnetStatsConfig
kaldi::nnet2::NnetUpdater	nnet-update.cc	/^class NnetUpdater {$/;"	c	namespace:kaldi::nnet2	file:
kaldi::nnet2::NnetUpdater::Backprop	nnet-update.cc	/^void NnetUpdater::Backprop(const std::vector<NnetExample> &data,$/;"	f	class:kaldi::nnet2::NnetUpdater
kaldi::nnet2::NnetUpdater::ComputeForMinibatch	nnet-update.cc	/^double NnetUpdater::ComputeForMinibatch($/;"	f	class:kaldi::nnet2::NnetUpdater
kaldi::nnet2::NnetUpdater::ComputeObjfAndDeriv	nnet-update.cc	/^double NnetUpdater::ComputeObjfAndDeriv($/;"	f	class:kaldi::nnet2::NnetUpdater
kaldi::nnet2::NnetUpdater::FormatInput	nnet-update.cc	/^void NnetUpdater::FormatInput(const std::vector<NnetExample> &data) {$/;"	f	class:kaldi::nnet2::NnetUpdater
kaldi::nnet2::NnetUpdater::NnetUpdater	nnet-update.cc	/^NnetUpdater::NnetUpdater(const Nnet &nnet,$/;"	f	class:kaldi::nnet2::NnetUpdater
kaldi::nnet2::NnetUpdater::Propagate	nnet-update.cc	/^void NnetUpdater::Propagate() {$/;"	f	class:kaldi::nnet2::NnetUpdater
kaldi::nnet2::NnetUpdater::chunk_weights_	nnet-update.cc	/^  CuVector<BaseFloat> chunk_weights_;$/;"	m	class:kaldi::nnet2::NnetUpdater	file:
kaldi::nnet2::NnetUpdater::forward_data_	nnet-update.cc	/^  std::vector<CuMatrix<BaseFloat> > forward_data_; \/\/ The forward data$/;"	m	class:kaldi::nnet2::NnetUpdater	file:
kaldi::nnet2::NnetUpdater::nnet_	nnet-update.cc	/^  const Nnet &nnet_;$/;"	m	class:kaldi::nnet2::NnetUpdater	file:
kaldi::nnet2::NnetUpdater::nnet_to_update_	nnet-update.cc	/^  Nnet *nnet_to_update_;$/;"	m	class:kaldi::nnet2::NnetUpdater	file:
kaldi::nnet2::NnetUpdater::num_chunks_	nnet-update.cc	/^  int32 num_chunks_; \/\/ same as the minibatch size.$/;"	m	class:kaldi::nnet2::NnetUpdater	file:
kaldi::nnet2::NnetWidenConfig	widen-nnet.h	/^struct NnetWidenConfig {$/;"	s	namespace:kaldi::nnet2
kaldi::nnet2::NnetWidenConfig::NnetWidenConfig	widen-nnet.h	/^  NnetWidenConfig(): hidden_layer_dim(-1),$/;"	f	struct:kaldi::nnet2::NnetWidenConfig
kaldi::nnet2::NnetWidenConfig::Register	widen-nnet.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::NnetWidenConfig
kaldi::nnet2::NnetWidenConfig::bias_stddev	widen-nnet.h	/^  BaseFloat bias_stddev;$/;"	m	struct:kaldi::nnet2::NnetWidenConfig
kaldi::nnet2::NnetWidenConfig::hidden_layer_dim	widen-nnet.h	/^  int32 hidden_layer_dim;$/;"	m	struct:kaldi::nnet2::NnetWidenConfig
kaldi::nnet2::NnetWidenConfig::param_stddev_factor	widen-nnet.h	/^  BaseFloat param_stddev_factor;$/;"	m	struct:kaldi::nnet2::NnetWidenConfig
kaldi::nnet2::NonlinearComponent	nnet-component.h	/^class NonlinearComponent: public Component {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::NonlinearComponent::Add	nnet-component.cc	/^void NonlinearComponent::Add(BaseFloat alpha, const NonlinearComponent &other) {$/;"	f	class:kaldi::nnet2::NonlinearComponent
kaldi::nnet2::NonlinearComponent::Count	nnet-component.h	/^  double Count() const { return count_; }$/;"	f	class:kaldi::nnet2::NonlinearComponent
kaldi::nnet2::NonlinearComponent::DerivSum	nnet-component.h	/^  const CuVector<double> &DerivSum() const { return deriv_sum_; }$/;"	f	class:kaldi::nnet2::NonlinearComponent
kaldi::nnet2::NonlinearComponent::Init	nnet-component.h	/^  void Init(int32 dim) { dim_ = dim; count_ = 0.0; }$/;"	f	class:kaldi::nnet2::NonlinearComponent
kaldi::nnet2::NonlinearComponent::InitFromString	nnet-component.cc	/^void NonlinearComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::NonlinearComponent
kaldi::nnet2::NonlinearComponent::InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::NonlinearComponent
kaldi::nnet2::NonlinearComponent::NonlinearComponent	nnet-component.cc	/^NonlinearComponent::NonlinearComponent(const NonlinearComponent &other):$/;"	f	class:kaldi::nnet2::NonlinearComponent
kaldi::nnet2::NonlinearComponent::NonlinearComponent	nnet-component.h	/^  NonlinearComponent(): dim_(0) { } \/\/ e.g. prior to Read().$/;"	f	class:kaldi::nnet2::NonlinearComponent
kaldi::nnet2::NonlinearComponent::NonlinearComponent	nnet-component.h	/^  explicit NonlinearComponent(int32 dim) { Init(dim); }$/;"	f	class:kaldi::nnet2::NonlinearComponent
kaldi::nnet2::NonlinearComponent::OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::NonlinearComponent
kaldi::nnet2::NonlinearComponent::Read	nnet-component.cc	/^void NonlinearComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::NonlinearComponent
kaldi::nnet2::NonlinearComponent::Scale	nnet-component.cc	/^void NonlinearComponent::Scale(BaseFloat scale) {$/;"	f	class:kaldi::nnet2::NonlinearComponent
kaldi::nnet2::NonlinearComponent::SetDim	nnet-component.cc	/^void NonlinearComponent::SetDim(int32 dim) {$/;"	f	class:kaldi::nnet2::NonlinearComponent
kaldi::nnet2::NonlinearComponent::UpdateStats	nnet-component.cc	/^void NonlinearComponent::UpdateStats(const CuMatrixBase<BaseFloat> &out_value,$/;"	f	class:kaldi::nnet2::NonlinearComponent
kaldi::nnet2::NonlinearComponent::ValueSum	nnet-component.h	/^  const CuVector<double> &ValueSum() const { return value_sum_; }$/;"	f	class:kaldi::nnet2::NonlinearComponent
kaldi::nnet2::NonlinearComponent::Write	nnet-component.cc	/^void NonlinearComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::NonlinearComponent
kaldi::nnet2::NonlinearComponent::count_	nnet-component.h	/^  double count_;$/;"	m	class:kaldi::nnet2::NonlinearComponent
kaldi::nnet2::NonlinearComponent::deriv_sum_	nnet-component.h	/^  CuVector<double> deriv_sum_; \/\/ stats of the derivative of the nonlinearity (only$/;"	m	class:kaldi::nnet2::NonlinearComponent
kaldi::nnet2::NonlinearComponent::dim_	nnet-component.h	/^  int32 dim_;$/;"	m	class:kaldi::nnet2::NonlinearComponent
kaldi::nnet2::NonlinearComponent::value_sum_	nnet-component.h	/^  CuVector<double> value_sum_; \/\/ stats at the output.$/;"	m	class:kaldi::nnet2::NonlinearComponent
kaldi::nnet2::NormalizeComponent	nnet-component.h	/^class NormalizeComponent: public NonlinearComponent {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::NormalizeComponent::Backprop	nnet-component.cc	/^void NormalizeComponent::Backprop(const CuMatrixBase<BaseFloat> &in_value,$/;"	f	class:kaldi::nnet2::NormalizeComponent
kaldi::nnet2::NormalizeComponent::BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::NormalizeComponent
kaldi::nnet2::NormalizeComponent::BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; }$/;"	f	class:kaldi::nnet2::NormalizeComponent
kaldi::nnet2::NormalizeComponent::Copy	nnet-component.h	/^  virtual Component* Copy() const { return new NormalizeComponent(*this); }$/;"	f	class:kaldi::nnet2::NormalizeComponent
kaldi::nnet2::NormalizeComponent::NormalizeComponent	nnet-component.h	/^  NormalizeComponent() { }$/;"	f	class:kaldi::nnet2::NormalizeComponent
kaldi::nnet2::NormalizeComponent::NormalizeComponent	nnet-component.h	/^  explicit NormalizeComponent(const NormalizeComponent &other): NonlinearComponent(other) { }$/;"	f	class:kaldi::nnet2::NormalizeComponent
kaldi::nnet2::NormalizeComponent::NormalizeComponent	nnet-component.h	/^  explicit NormalizeComponent(int32 dim): NonlinearComponent(dim) { }$/;"	f	class:kaldi::nnet2::NormalizeComponent
kaldi::nnet2::NormalizeComponent::Propagate	nnet-component.cc	/^void NormalizeComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::NormalizeComponent
kaldi::nnet2::NormalizeComponent::Type	nnet-component.h	/^  virtual std::string Type() const { return "NormalizeComponent"; }$/;"	f	class:kaldi::nnet2::NormalizeComponent
kaldi::nnet2::NormalizeComponent::kNormFloor	nnet-component.cc	/^const BaseFloat NormalizeComponent::kNormFloor = pow(2.0, -66);$/;"	m	class:kaldi::nnet2::NormalizeComponent	file:
kaldi::nnet2::NormalizeComponent::kNormFloor	nnet-component.h	/^  static const BaseFloat kNormFloor;$/;"	m	class:kaldi::nnet2::NormalizeComponent
kaldi::nnet2::ParseFromString	nnet-component.cc	/^bool ParseFromString(const std::string &name, std::string *string,$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::PermuteComponent	nnet-component.h	/^class PermuteComponent: public Component {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::PermuteComponent::Backprop	nnet-component.cc	/^void PermuteComponent::Backprop(const CuMatrixBase<BaseFloat> &in_value,$/;"	f	class:kaldi::nnet2::PermuteComponent
kaldi::nnet2::PermuteComponent::BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::PermuteComponent
kaldi::nnet2::PermuteComponent::BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::PermuteComponent
kaldi::nnet2::PermuteComponent::Copy	nnet-component.cc	/^Component *PermuteComponent::Copy() const {$/;"	f	class:kaldi::nnet2::PermuteComponent
kaldi::nnet2::PermuteComponent::Init	nnet-component.cc	/^void PermuteComponent::Init(int32 dim) {$/;"	f	class:kaldi::nnet2::PermuteComponent
kaldi::nnet2::PermuteComponent::InitFromString	nnet-component.cc	/^void PermuteComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::PermuteComponent
kaldi::nnet2::PermuteComponent::InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return reorder_.size(); }$/;"	f	class:kaldi::nnet2::PermuteComponent
kaldi::nnet2::PermuteComponent::OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return reorder_.size(); }$/;"	f	class:kaldi::nnet2::PermuteComponent
kaldi::nnet2::PermuteComponent::PermuteComponent	nnet-component.h	/^  PermuteComponent() { } \/\/ e.g. prior to Read() or Init()$/;"	f	class:kaldi::nnet2::PermuteComponent
kaldi::nnet2::PermuteComponent::PermuteComponent	nnet-component.h	/^  PermuteComponent(int32 dim) { Init(dim); }$/;"	f	class:kaldi::nnet2::PermuteComponent
kaldi::nnet2::PermuteComponent::Propagate	nnet-component.cc	/^void PermuteComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::PermuteComponent
kaldi::nnet2::PermuteComponent::Read	nnet-component.cc	/^void PermuteComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::PermuteComponent
kaldi::nnet2::PermuteComponent::Type	nnet-component.h	/^  virtual std::string Type() const { return "PermuteComponent"; }$/;"	f	class:kaldi::nnet2::PermuteComponent
kaldi::nnet2::PermuteComponent::Write	nnet-component.cc	/^void PermuteComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::PermuteComponent
kaldi::nnet2::PermuteComponent::reorder_	nnet-component.h	/^  std::vector<int32> reorder_; \/\/ This class sends input dimension i to$/;"	m	class:kaldi::nnet2::PermuteComponent
kaldi::nnet2::PiecewiseLinearComponent	nnet-component.h	/^class PiecewiseLinearComponent: public UpdatableComponent {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::PiecewiseLinearComponent::Add	nnet-component.cc	/^void PiecewiseLinearComponent::Add(BaseFloat alpha, const UpdatableComponent &other_in) {$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
kaldi::nnet2::PiecewiseLinearComponent::Backprop	nnet-component.cc	/^void PiecewiseLinearComponent::Backprop(const CuMatrixBase<BaseFloat> &in_value,$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
kaldi::nnet2::PiecewiseLinearComponent::BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
kaldi::nnet2::PiecewiseLinearComponent::BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
kaldi::nnet2::PiecewiseLinearComponent::Copy	nnet-component.cc	/^Component* PiecewiseLinearComponent::Copy() const {$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
kaldi::nnet2::PiecewiseLinearComponent::DotProduct	nnet-component.cc	/^BaseFloat PiecewiseLinearComponent::DotProduct(const UpdatableComponent &other_in) const {$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
kaldi::nnet2::PiecewiseLinearComponent::GetParameterDim	nnet-component.cc	/^int32 PiecewiseLinearComponent::GetParameterDim() const {$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
kaldi::nnet2::PiecewiseLinearComponent::Info	nnet-component.cc	/^std::string PiecewiseLinearComponent::Info() const {$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
kaldi::nnet2::PiecewiseLinearComponent::Init	nnet-component.cc	/^void PiecewiseLinearComponent::Init(int32 dim, int32 N,$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
kaldi::nnet2::PiecewiseLinearComponent::InitFromString	nnet-component.cc	/^void PiecewiseLinearComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
kaldi::nnet2::PiecewiseLinearComponent::InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return params_.NumRows(); }$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
kaldi::nnet2::PiecewiseLinearComponent::OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return params_.NumRows(); }$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
kaldi::nnet2::PiecewiseLinearComponent::Params	nnet-component.h	/^  const CuMatrix<BaseFloat> &Params() { return params_; }$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
kaldi::nnet2::PiecewiseLinearComponent::PerturbParams	nnet-component.cc	/^void PiecewiseLinearComponent::PerturbParams(BaseFloat stddev) {$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
kaldi::nnet2::PiecewiseLinearComponent::PiecewiseLinearComponent	nnet-component.cc	/^PiecewiseLinearComponent::PiecewiseLinearComponent(const PiecewiseLinearComponent &component):$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
kaldi::nnet2::PiecewiseLinearComponent::PiecewiseLinearComponent	nnet-component.h	/^  PiecewiseLinearComponent(): is_gradient_(false), max_change_(0.0) { } \/\/ use Init to really initialize.$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
kaldi::nnet2::PiecewiseLinearComponent::Propagate	nnet-component.cc	/^void PiecewiseLinearComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
kaldi::nnet2::PiecewiseLinearComponent::Read	nnet-component.cc	/^void PiecewiseLinearComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
kaldi::nnet2::PiecewiseLinearComponent::Scale	nnet-component.cc	/^void PiecewiseLinearComponent::Scale(BaseFloat scale) {$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
kaldi::nnet2::PiecewiseLinearComponent::SetZero	nnet-component.cc	/^void PiecewiseLinearComponent::SetZero(bool treat_as_gradient) {$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
kaldi::nnet2::PiecewiseLinearComponent::Type	nnet-component.h	/^  virtual std::string Type() const { return "PiecewiseLinearComponent"; }$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
kaldi::nnet2::PiecewiseLinearComponent::UnVectorize	nnet-component.cc	/^void PiecewiseLinearComponent::UnVectorize(const VectorBase<BaseFloat> &params) {$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
kaldi::nnet2::PiecewiseLinearComponent::Vectorize	nnet-component.cc	/^void PiecewiseLinearComponent::Vectorize(VectorBase<BaseFloat> *params) const {$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
kaldi::nnet2::PiecewiseLinearComponent::Write	nnet-component.cc	/^void PiecewiseLinearComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::PiecewiseLinearComponent
kaldi::nnet2::PiecewiseLinearComponent::is_gradient_	nnet-component.h	/^  bool is_gradient_; \/\/ If true, treat this as just a gradient.$/;"	m	class:kaldi::nnet2::PiecewiseLinearComponent
kaldi::nnet2::PiecewiseLinearComponent::max_change_	nnet-component.h	/^  BaseFloat max_change_; \/\/ If nonzero, maximum change allowed per individual$/;"	m	class:kaldi::nnet2::PiecewiseLinearComponent
kaldi::nnet2::PiecewiseLinearComponent::params_	nnet-component.h	/^  CuMatrix<BaseFloat> params_;$/;"	m	class:kaldi::nnet2::PiecewiseLinearComponent
kaldi::nnet2::PnormComponent	nnet-component.h	/^class PnormComponent: public Component {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::PnormComponent::Backprop	nnet-component.cc	/^void PnormComponent::Backprop(const CuMatrixBase<BaseFloat> &in_value,$/;"	f	class:kaldi::nnet2::PnormComponent
kaldi::nnet2::PnormComponent::BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::PnormComponent
kaldi::nnet2::PnormComponent::BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; }$/;"	f	class:kaldi::nnet2::PnormComponent
kaldi::nnet2::PnormComponent::Copy	nnet-component.h	/^  virtual Component* Copy() const { return new PnormComponent(input_dim_,$/;"	f	class:kaldi::nnet2::PnormComponent
kaldi::nnet2::PnormComponent::Info	nnet-component.cc	/^std::string PnormComponent::Info() const {$/;"	f	class:kaldi::nnet2::PnormComponent
kaldi::nnet2::PnormComponent::Init	nnet-component.cc	/^void PnormComponent::Init(int32 input_dim, int32 output_dim, BaseFloat p)  {$/;"	f	class:kaldi::nnet2::PnormComponent
kaldi::nnet2::PnormComponent::InitFromString	nnet-component.cc	/^void PnormComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::PnormComponent
kaldi::nnet2::PnormComponent::InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return input_dim_; }$/;"	f	class:kaldi::nnet2::PnormComponent
kaldi::nnet2::PnormComponent::OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return output_dim_; }$/;"	f	class:kaldi::nnet2::PnormComponent
kaldi::nnet2::PnormComponent::PnormComponent	nnet-component.h	/^  PnormComponent(): input_dim_(0), output_dim_(0), p_(0) { }$/;"	f	class:kaldi::nnet2::PnormComponent
kaldi::nnet2::PnormComponent::PnormComponent	nnet-component.h	/^  explicit PnormComponent(int32 input_dim, int32 output_dim, BaseFloat p) {$/;"	f	class:kaldi::nnet2::PnormComponent
kaldi::nnet2::PnormComponent::Propagate	nnet-component.cc	/^void PnormComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::PnormComponent
kaldi::nnet2::PnormComponent::Read	nnet-component.cc	/^void PnormComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::PnormComponent
kaldi::nnet2::PnormComponent::Type	nnet-component.h	/^  virtual std::string Type() const { return "PnormComponent"; }$/;"	f	class:kaldi::nnet2::PnormComponent
kaldi::nnet2::PnormComponent::Write	nnet-component.cc	/^void PnormComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::PnormComponent
kaldi::nnet2::PnormComponent::input_dim_	nnet-component.h	/^  int32 input_dim_;$/;"	m	class:kaldi::nnet2::PnormComponent
kaldi::nnet2::PnormComponent::output_dim_	nnet-component.h	/^  int32 output_dim_;$/;"	m	class:kaldi::nnet2::PnormComponent
kaldi::nnet2::PnormComponent::p_	nnet-component.h	/^  BaseFloat p_;$/;"	m	class:kaldi::nnet2::PnormComponent
kaldi::nnet2::PowerExpandComponent	nnet-component.h	/^class PowerExpandComponent: public Component {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::PowerExpandComponent::Backprop	nnet-component.cc	/^void PowerExpandComponent::Backprop(const CuMatrixBase<BaseFloat> &in_value,$/;"	f	class:kaldi::nnet2::PowerExpandComponent
kaldi::nnet2::PowerExpandComponent::BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::PowerExpandComponent
kaldi::nnet2::PowerExpandComponent::BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::PowerExpandComponent
kaldi::nnet2::PowerExpandComponent::Copy	nnet-component.h	/^  virtual Component* Copy() const { return new PowerExpandComponent(input_dim_,$/;"	f	class:kaldi::nnet2::PowerExpandComponent
kaldi::nnet2::PowerExpandComponent::Info	nnet-component.cc	/^std::string PowerExpandComponent::Info() const {$/;"	f	class:kaldi::nnet2::PowerExpandComponent
kaldi::nnet2::PowerExpandComponent::Init	nnet-component.cc	/^void PowerExpandComponent::Init(int32 dim,$/;"	f	class:kaldi::nnet2::PowerExpandComponent
kaldi::nnet2::PowerExpandComponent::InitFromString	nnet-component.cc	/^void PowerExpandComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::PowerExpandComponent
kaldi::nnet2::PowerExpandComponent::InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return input_dim_; }$/;"	f	class:kaldi::nnet2::PowerExpandComponent
kaldi::nnet2::PowerExpandComponent::OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return max_power_ * input_dim_; }$/;"	f	class:kaldi::nnet2::PowerExpandComponent
kaldi::nnet2::PowerExpandComponent::PowerExpandComponent	nnet-component.h	/^  PowerExpandComponent(): input_dim_(0), max_power_(2),$/;"	f	class:kaldi::nnet2::PowerExpandComponent
kaldi::nnet2::PowerExpandComponent::PowerExpandComponent	nnet-component.h	/^  explicit PowerExpandComponent(int32 dim, int32 max_power = 2,$/;"	f	class:kaldi::nnet2::PowerExpandComponent
kaldi::nnet2::PowerExpandComponent::Propagate	nnet-component.cc	/^void PowerExpandComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::PowerExpandComponent
kaldi::nnet2::PowerExpandComponent::Read	nnet-component.cc	/^void PowerExpandComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::PowerExpandComponent
kaldi::nnet2::PowerExpandComponent::Type	nnet-component.h	/^  virtual std::string Type() const { return "PowerExpandComponent"; }$/;"	f	class:kaldi::nnet2::PowerExpandComponent
kaldi::nnet2::PowerExpandComponent::Write	nnet-component.cc	/^void PowerExpandComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::PowerExpandComponent
kaldi::nnet2::PowerExpandComponent::higher_power_scale_	nnet-component.h	/^  BaseFloat higher_power_scale_; \/\/ Scale put on all powers$/;"	m	class:kaldi::nnet2::PowerExpandComponent
kaldi::nnet2::PowerExpandComponent::input_dim_	nnet-component.h	/^  int32 input_dim_;$/;"	m	class:kaldi::nnet2::PowerExpandComponent
kaldi::nnet2::PowerExpandComponent::max_power_	nnet-component.h	/^  int32 max_power_;$/;"	m	class:kaldi::nnet2::PowerExpandComponent
kaldi::nnet2::PreconditionConfig	nnet-component.h	/^struct PreconditionConfig { \/\/ relates to AffineComponentA$/;"	s	namespace:kaldi::nnet2
kaldi::nnet2::PreconditionConfig::PreconditionConfig	nnet-component.h	/^  PreconditionConfig(): alpha(0.1), do_precondition(true),$/;"	f	struct:kaldi::nnet2::PreconditionConfig
kaldi::nnet2::PreconditionConfig::Register	nnet-component.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::PreconditionConfig
kaldi::nnet2::PreconditionConfig::alpha	nnet-component.h	/^  BaseFloat alpha;$/;"	m	struct:kaldi::nnet2::PreconditionConfig
kaldi::nnet2::PreconditionConfig::do_precondition	nnet-component.h	/^  bool do_precondition;$/;"	m	struct:kaldi::nnet2::PreconditionConfig
kaldi::nnet2::PreconditionConfig::renormalize	nnet-component.h	/^  bool renormalize;$/;"	m	struct:kaldi::nnet2::PreconditionConfig
kaldi::nnet2::PreconditionDirections	nnet-precondition.cc	/^void PreconditionDirections(const CuMatrixBase<BaseFloat> &R,$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::PreconditionDirectionsAlpha	nnet-precondition.cc	/^void PreconditionDirectionsAlpha($/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::PreconditionDirectionsAlphaRescaled	nnet-precondition.cc	/^void PreconditionDirectionsAlphaRescaled($/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::PreconditionDirectionsOnline	nnet-precondition-online.cc	/^void PreconditionDirectionsOnline(BaseFloat eta,$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::PreconditionDirectionsOnlineSimple	nnet-precondition-online-test.cc	/^void PreconditionDirectionsOnlineSimple(BaseFloat eta,$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::PreconditionNnet	nnet-lbfgs.cc	/^void PreconditionNnet(const PreconditionConfig &config,$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::RandomAccessDiscriminativeNnetExampleReader	nnet-example.h	/^   RandomAccessDiscriminativeNnetExampleReader;$/;"	t	namespace:kaldi::nnet2
kaldi::nnet2::RandomAccessNnetExampleReader	nnet-example.h	/^typedef RandomAccessTableReader<KaldiObjectHolder<NnetExample > > RandomAccessNnetExampleReader;$/;"	t	namespace:kaldi::nnet2
kaldi::nnet2::RandomComponent	nnet-component.h	/^class RandomComponent: public Component {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::RandomComponent::ResetGenerator	nnet-component.h	/^  void ResetGenerator() { random_generator_.SeedGpu(0); }$/;"	f	class:kaldi::nnet2::RandomComponent
kaldi::nnet2::RandomComponent::random_generator_	nnet-component.h	/^  CuRand<BaseFloat> random_generator_;$/;"	m	class:kaldi::nnet2::RandomComponent
kaldi::nnet2::RectifiedLinearComponent	nnet-component.h	/^class RectifiedLinearComponent: public NonlinearComponent {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::RectifiedLinearComponent::Backprop	nnet-component.cc	/^void RectifiedLinearComponent::Backprop(const CuMatrixBase<BaseFloat> &, \/\/ in_value$/;"	f	class:kaldi::nnet2::RectifiedLinearComponent
kaldi::nnet2::RectifiedLinearComponent::BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::RectifiedLinearComponent
kaldi::nnet2::RectifiedLinearComponent::BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; }$/;"	f	class:kaldi::nnet2::RectifiedLinearComponent
kaldi::nnet2::RectifiedLinearComponent::Copy	nnet-component.h	/^  virtual Component* Copy() const { return new RectifiedLinearComponent(*this); }$/;"	f	class:kaldi::nnet2::RectifiedLinearComponent
kaldi::nnet2::RectifiedLinearComponent::Propagate	nnet-component.cc	/^void RectifiedLinearComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::RectifiedLinearComponent
kaldi::nnet2::RectifiedLinearComponent::RectifiedLinearComponent	nnet-component.h	/^  RectifiedLinearComponent() { }$/;"	f	class:kaldi::nnet2::RectifiedLinearComponent
kaldi::nnet2::RectifiedLinearComponent::RectifiedLinearComponent	nnet-component.h	/^  explicit RectifiedLinearComponent(const RectifiedLinearComponent &other): NonlinearComponent(other) { }$/;"	f	class:kaldi::nnet2::RectifiedLinearComponent
kaldi::nnet2::RectifiedLinearComponent::RectifiedLinearComponent	nnet-component.h	/^  explicit RectifiedLinearComponent(int32 dim): NonlinearComponent(dim) { }$/;"	f	class:kaldi::nnet2::RectifiedLinearComponent
kaldi::nnet2::RectifiedLinearComponent::Type	nnet-component.h	/^  virtual std::string Type() const { return "RectifiedLinearComponent"; }$/;"	f	class:kaldi::nnet2::RectifiedLinearComponent
kaldi::nnet2::RescaleNnet	rescale-nnet.cc	/^void RescaleNnet(const NnetRescaleConfig &rescale_config,$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::ScaleComponent	nnet-component.h	/^class ScaleComponent: public Component {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::ScaleComponent::Backprop	nnet-component.cc	/^void ScaleComponent::Backprop(const CuMatrixBase<BaseFloat> &, \/\/ in_value$/;"	f	class:kaldi::nnet2::ScaleComponent
kaldi::nnet2::ScaleComponent::BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::ScaleComponent
kaldi::nnet2::ScaleComponent::BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::ScaleComponent
kaldi::nnet2::ScaleComponent::Copy	nnet-component.h	/^  virtual Component* Copy() const { return new ScaleComponent(*this); }$/;"	f	class:kaldi::nnet2::ScaleComponent
kaldi::nnet2::ScaleComponent::Info	nnet-component.cc	/^std::string ScaleComponent::Info() const {$/;"	f	class:kaldi::nnet2::ScaleComponent
kaldi::nnet2::ScaleComponent::Init	nnet-component.cc	/^void ScaleComponent::Init(int32 dim, BaseFloat scale) {$/;"	f	class:kaldi::nnet2::ScaleComponent
kaldi::nnet2::ScaleComponent::InitFromString	nnet-component.cc	/^void ScaleComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::ScaleComponent
kaldi::nnet2::ScaleComponent::InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::ScaleComponent
kaldi::nnet2::ScaleComponent::OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::ScaleComponent
kaldi::nnet2::ScaleComponent::Propagate	nnet-component.cc	/^void ScaleComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::ScaleComponent
kaldi::nnet2::ScaleComponent::Read	nnet-component.cc	/^void ScaleComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::ScaleComponent
kaldi::nnet2::ScaleComponent::ScaleComponent	nnet-component.h	/^  ScaleComponent(): dim_(0), scale_(0.0) { }$/;"	f	class:kaldi::nnet2::ScaleComponent
kaldi::nnet2::ScaleComponent::ScaleComponent	nnet-component.h	/^  explicit ScaleComponent(const ScaleComponent &other):$/;"	f	class:kaldi::nnet2::ScaleComponent
kaldi::nnet2::ScaleComponent::ScaleComponent	nnet-component.h	/^  explicit ScaleComponent(int32 dim, BaseFloat scale): dim_(dim), scale_(scale) { }$/;"	f	class:kaldi::nnet2::ScaleComponent
kaldi::nnet2::ScaleComponent::Type	nnet-component.h	/^  virtual std::string Type() const { return "ScaleComponent"; }$/;"	f	class:kaldi::nnet2::ScaleComponent
kaldi::nnet2::ScaleComponent::Write	nnet-component.cc	/^void ScaleComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::ScaleComponent
kaldi::nnet2::ScaleComponent::dim_	nnet-component.h	/^  int32 dim_;$/;"	m	class:kaldi::nnet2::ScaleComponent
kaldi::nnet2::ScaleComponent::scale_	nnet-component.h	/^  BaseFloat scale_;$/;"	m	class:kaldi::nnet2::ScaleComponent
kaldi::nnet2::SequentialDiscriminativeNnetExampleReader	nnet-example.h	/^   SequentialDiscriminativeNnetExampleReader;$/;"	t	namespace:kaldi::nnet2
kaldi::nnet2::SequentialNnetExampleReader	nnet-example.h	/^typedef SequentialTableReader<KaldiObjectHolder<NnetExample > > SequentialNnetExampleReader;$/;"	t	namespace:kaldi::nnet2
kaldi::nnet2::ShrinkNnet	shrink-nnet.cc	/^void ShrinkNnet(const NnetShrinkConfig &shrink_config,$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::SigmoidComponent	nnet-component.h	/^class SigmoidComponent: public NonlinearComponent {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::SigmoidComponent::Backprop	nnet-component.cc	/^void SigmoidComponent::Backprop(const CuMatrixBase<BaseFloat> &, \/\/ in_value$/;"	f	class:kaldi::nnet2::SigmoidComponent
kaldi::nnet2::SigmoidComponent::BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::SigmoidComponent
kaldi::nnet2::SigmoidComponent::BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; }$/;"	f	class:kaldi::nnet2::SigmoidComponent
kaldi::nnet2::SigmoidComponent::Copy	nnet-component.h	/^  virtual Component* Copy() const { return new SigmoidComponent(*this); }$/;"	f	class:kaldi::nnet2::SigmoidComponent
kaldi::nnet2::SigmoidComponent::Propagate	nnet-component.cc	/^void SigmoidComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::SigmoidComponent
kaldi::nnet2::SigmoidComponent::SigmoidComponent	nnet-component.h	/^  SigmoidComponent() { }$/;"	f	class:kaldi::nnet2::SigmoidComponent
kaldi::nnet2::SigmoidComponent::SigmoidComponent	nnet-component.h	/^  explicit SigmoidComponent(const SigmoidComponent &other): NonlinearComponent(other) { }    $/;"	f	class:kaldi::nnet2::SigmoidComponent
kaldi::nnet2::SigmoidComponent::SigmoidComponent	nnet-component.h	/^  explicit SigmoidComponent(int32 dim): NonlinearComponent(dim) { }$/;"	f	class:kaldi::nnet2::SigmoidComponent
kaldi::nnet2::SigmoidComponent::Type	nnet-component.h	/^  virtual std::string Type() const { return "SigmoidComponent"; }$/;"	f	class:kaldi::nnet2::SigmoidComponent
kaldi::nnet2::SoftHingeComponent	nnet-component.h	/^class SoftHingeComponent: public NonlinearComponent {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::SoftHingeComponent::Backprop	nnet-component.cc	/^void SoftHingeComponent::Backprop(const CuMatrixBase<BaseFloat> &in_value,$/;"	f	class:kaldi::nnet2::SoftHingeComponent
kaldi::nnet2::SoftHingeComponent::BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::SoftHingeComponent
kaldi::nnet2::SoftHingeComponent::BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; }$/;"	f	class:kaldi::nnet2::SoftHingeComponent
kaldi::nnet2::SoftHingeComponent::Copy	nnet-component.h	/^  virtual Component* Copy() const { return new SoftHingeComponent(*this); }$/;"	f	class:kaldi::nnet2::SoftHingeComponent
kaldi::nnet2::SoftHingeComponent::Propagate	nnet-component.cc	/^void SoftHingeComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::SoftHingeComponent
kaldi::nnet2::SoftHingeComponent::SoftHingeComponent	nnet-component.h	/^  SoftHingeComponent() { }$/;"	f	class:kaldi::nnet2::SoftHingeComponent
kaldi::nnet2::SoftHingeComponent::SoftHingeComponent	nnet-component.h	/^  explicit SoftHingeComponent(const SoftHingeComponent &other): NonlinearComponent(other) { }$/;"	f	class:kaldi::nnet2::SoftHingeComponent
kaldi::nnet2::SoftHingeComponent::SoftHingeComponent	nnet-component.h	/^  explicit SoftHingeComponent(int32 dim): NonlinearComponent(dim) { }$/;"	f	class:kaldi::nnet2::SoftHingeComponent
kaldi::nnet2::SoftHingeComponent::Type	nnet-component.h	/^  virtual std::string Type() const { return "SoftHingeComponent"; }$/;"	f	class:kaldi::nnet2::SoftHingeComponent
kaldi::nnet2::SoftmaxComponent	nnet-component.h	/^class SoftmaxComponent: public NonlinearComponent {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::SoftmaxComponent::Backprop	nnet-component.cc	/^void SoftmaxComponent::Backprop(const CuMatrixBase<BaseFloat> &, \/\/ in_value$/;"	f	class:kaldi::nnet2::SoftmaxComponent
kaldi::nnet2::SoftmaxComponent::BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::SoftmaxComponent
kaldi::nnet2::SoftmaxComponent::BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; }$/;"	f	class:kaldi::nnet2::SoftmaxComponent
kaldi::nnet2::SoftmaxComponent::Copy	nnet-component.h	/^  virtual Component* Copy() const { return new SoftmaxComponent(*this); }$/;"	f	class:kaldi::nnet2::SoftmaxComponent
kaldi::nnet2::SoftmaxComponent::MixUp	mixup-nnet.cc	/^void SoftmaxComponent::MixUp(int32 num_mixtures,$/;"	f	class:kaldi::nnet2::SoftmaxComponent
kaldi::nnet2::SoftmaxComponent::Propagate	nnet-component.cc	/^void SoftmaxComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::SoftmaxComponent
kaldi::nnet2::SoftmaxComponent::SoftmaxComponent	nnet-component.h	/^  SoftmaxComponent() { }$/;"	f	class:kaldi::nnet2::SoftmaxComponent
kaldi::nnet2::SoftmaxComponent::SoftmaxComponent	nnet-component.h	/^  explicit SoftmaxComponent(const SoftmaxComponent &other): NonlinearComponent(other) { }  $/;"	f	class:kaldi::nnet2::SoftmaxComponent
kaldi::nnet2::SoftmaxComponent::SoftmaxComponent	nnet-component.h	/^  explicit SoftmaxComponent(int32 dim): NonlinearComponent(dim) { }$/;"	f	class:kaldi::nnet2::SoftmaxComponent
kaldi::nnet2::SoftmaxComponent::Type	nnet-component.h	/^  virtual std::string Type() const { return "SoftmaxComponent"; }  \/\/ Make it lower case$/;"	f	class:kaldi::nnet2::SoftmaxComponent
kaldi::nnet2::SolvePackingProblem	nnet-example-functions.cc	/^void SolvePackingProblem(BaseFloat max_cost,$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::SpliceComponent	nnet-component.h	/^class SpliceComponent: public Component {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::SpliceComponent::Backprop	nnet-component.cc	/^void SpliceComponent::Backprop(const CuMatrixBase<BaseFloat> &, \/\/ in_value$/;"	f	class:kaldi::nnet2::SpliceComponent
kaldi::nnet2::SpliceComponent::BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::SpliceComponent
kaldi::nnet2::SpliceComponent::BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::SpliceComponent
kaldi::nnet2::SpliceComponent::Copy	nnet-component.cc	/^Component *SpliceComponent::Copy() const {$/;"	f	class:kaldi::nnet2::SpliceComponent
kaldi::nnet2::SpliceComponent::Info	nnet-component.cc	/^std::string SpliceComponent::Info() const {$/;"	f	class:kaldi::nnet2::SpliceComponent
kaldi::nnet2::SpliceComponent::Init	nnet-component.cc	/^void SpliceComponent::Init(int32 input_dim, int32 left_context,$/;"	f	class:kaldi::nnet2::SpliceComponent
kaldi::nnet2::SpliceComponent::InitFromString	nnet-component.cc	/^void SpliceComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::SpliceComponent
kaldi::nnet2::SpliceComponent::InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return input_dim_; }$/;"	f	class:kaldi::nnet2::SpliceComponent
kaldi::nnet2::SpliceComponent::LeftContext	nnet-component.h	/^  virtual int32 LeftContext() { return left_context_; }$/;"	f	class:kaldi::nnet2::SpliceComponent
kaldi::nnet2::SpliceComponent::OutputDim	nnet-component.cc	/^int32 SpliceComponent::OutputDim() const {$/;"	f	class:kaldi::nnet2::SpliceComponent
kaldi::nnet2::SpliceComponent::Propagate	nnet-component.cc	/^void SpliceComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::SpliceComponent
kaldi::nnet2::SpliceComponent::Read	nnet-component.cc	/^void SpliceComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::SpliceComponent
kaldi::nnet2::SpliceComponent::RightContext	nnet-component.h	/^  virtual int32 RightContext() { return right_context_; }$/;"	f	class:kaldi::nnet2::SpliceComponent
kaldi::nnet2::SpliceComponent::SpliceComponent	nnet-component.h	/^  SpliceComponent() { }  \/\/ called only prior to Read() or Init().$/;"	f	class:kaldi::nnet2::SpliceComponent
kaldi::nnet2::SpliceComponent::Type	nnet-component.h	/^  virtual std::string Type() const { return "SpliceComponent"; }$/;"	f	class:kaldi::nnet2::SpliceComponent
kaldi::nnet2::SpliceComponent::Write	nnet-component.cc	/^void SpliceComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::SpliceComponent
kaldi::nnet2::SpliceComponent::const_component_dim_	nnet-component.h	/^  int32 const_component_dim_;$/;"	m	class:kaldi::nnet2::SpliceComponent
kaldi::nnet2::SpliceComponent::input_dim_	nnet-component.h	/^  int32 input_dim_;$/;"	m	class:kaldi::nnet2::SpliceComponent
kaldi::nnet2::SpliceComponent::left_context_	nnet-component.h	/^  int32 left_context_;$/;"	m	class:kaldi::nnet2::SpliceComponent
kaldi::nnet2::SpliceComponent::right_context_	nnet-component.h	/^  int32 right_context_;$/;"	m	class:kaldi::nnet2::SpliceComponent
kaldi::nnet2::SpliceMaxComponent	nnet-component.h	/^class SpliceMaxComponent: public Component {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::SpliceMaxComponent::Backprop	nnet-component.cc	/^void SpliceMaxComponent::Backprop(const CuMatrixBase<BaseFloat> &in_value,$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
kaldi::nnet2::SpliceMaxComponent::BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return true; }$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
kaldi::nnet2::SpliceMaxComponent::BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
kaldi::nnet2::SpliceMaxComponent::Copy	nnet-component.cc	/^Component *SpliceMaxComponent::Copy() const {$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
kaldi::nnet2::SpliceMaxComponent::Info	nnet-component.cc	/^std::string SpliceMaxComponent::Info() const {$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
kaldi::nnet2::SpliceMaxComponent::Init	nnet-component.cc	/^void SpliceMaxComponent::Init(int32 dim, int32 left_context,$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
kaldi::nnet2::SpliceMaxComponent::InitFromString	nnet-component.cc	/^void SpliceMaxComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
kaldi::nnet2::SpliceMaxComponent::InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
kaldi::nnet2::SpliceMaxComponent::LeftContext	nnet-component.h	/^  virtual int32 LeftContext() { return left_context_; }$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
kaldi::nnet2::SpliceMaxComponent::OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return dim_; }$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
kaldi::nnet2::SpliceMaxComponent::Propagate	nnet-component.cc	/^void SpliceMaxComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
kaldi::nnet2::SpliceMaxComponent::Read	nnet-component.cc	/^void SpliceMaxComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
kaldi::nnet2::SpliceMaxComponent::RightContext	nnet-component.h	/^  virtual int32 RightContext() { return right_context_; }$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
kaldi::nnet2::SpliceMaxComponent::SpliceMaxComponent	nnet-component.h	/^  SpliceMaxComponent() { }  \/\/ called only prior to Read() or Init().$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
kaldi::nnet2::SpliceMaxComponent::Type	nnet-component.h	/^  virtual std::string Type() const { return "SpliceMaxComponent"; }$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
kaldi::nnet2::SpliceMaxComponent::Write	nnet-component.cc	/^void SpliceMaxComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::SpliceMaxComponent
kaldi::nnet2::SpliceMaxComponent::dim_	nnet-component.h	/^  int32 dim_;$/;"	m	class:kaldi::nnet2::SpliceMaxComponent
kaldi::nnet2::SpliceMaxComponent::left_context_	nnet-component.h	/^  int32 left_context_;$/;"	m	class:kaldi::nnet2::SpliceMaxComponent
kaldi::nnet2::SpliceMaxComponent::right_context_	nnet-component.h	/^  int32 right_context_;$/;"	m	class:kaldi::nnet2::SpliceMaxComponent
kaldi::nnet2::SplitDiscriminativeExample	nnet-example-functions.cc	/^void SplitDiscriminativeExample($/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::SplitDiscriminativeExampleConfig	nnet-example-functions.h	/^struct SplitDiscriminativeExampleConfig {$/;"	s	namespace:kaldi::nnet2
kaldi::nnet2::SplitDiscriminativeExampleConfig::Register	nnet-example-functions.h	/^  void Register(OptionsItf *po) {$/;"	f	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
kaldi::nnet2::SplitDiscriminativeExampleConfig::SplitDiscriminativeExampleConfig	nnet-example-functions.h	/^  SplitDiscriminativeExampleConfig():$/;"	f	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
kaldi::nnet2::SplitDiscriminativeExampleConfig::collapse_transition_ids	nnet-example-functions.h	/^  bool collapse_transition_ids;$/;"	m	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
kaldi::nnet2::SplitDiscriminativeExampleConfig::criterion	nnet-example-functions.h	/^  std::string criterion;$/;"	m	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
kaldi::nnet2::SplitDiscriminativeExampleConfig::determinize	nnet-example-functions.h	/^  bool determinize;$/;"	m	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
kaldi::nnet2::SplitDiscriminativeExampleConfig::drop_frames	nnet-example-functions.h	/^  bool drop_frames; \/\/ For MMI, true if we will eventually drop frames in which$/;"	m	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
kaldi::nnet2::SplitDiscriminativeExampleConfig::excise	nnet-example-functions.h	/^  bool excise; \/\/ if false, we will skip the "excise" step.$/;"	m	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
kaldi::nnet2::SplitDiscriminativeExampleConfig::max_length	nnet-example-functions.h	/^  int32 max_length;$/;"	m	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
kaldi::nnet2::SplitDiscriminativeExampleConfig::minimize	nnet-example-functions.h	/^  bool minimize; \/\/ we'll push and minimize if this is true.$/;"	m	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
kaldi::nnet2::SplitDiscriminativeExampleConfig::split	nnet-example-functions.h	/^  bool split; \/\/ if false, we won't split at all.$/;"	m	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
kaldi::nnet2::SplitDiscriminativeExampleConfig::test	nnet-example-functions.h	/^  bool test;$/;"	m	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
kaldi::nnet2::SplitExampleStats	nnet-example-functions.h	/^struct SplitExampleStats {$/;"	s	namespace:kaldi::nnet2
kaldi::nnet2::SplitExampleStats::Print	nnet-example-functions.cc	/^void SplitExampleStats::Print() {$/;"	f	class:kaldi::nnet2::SplitExampleStats
kaldi::nnet2::SplitExampleStats::SplitExampleStats	nnet-example-functions.h	/^  SplitExampleStats() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:kaldi::nnet2::SplitExampleStats
kaldi::nnet2::SplitExampleStats::longest_lattice	nnet-example-functions.h	/^  int32 longest_lattice;$/;"	m	struct:kaldi::nnet2::SplitExampleStats
kaldi::nnet2::SplitExampleStats::longest_segment_after_excise	nnet-example-functions.h	/^  int32 longest_segment_after_excise;$/;"	m	struct:kaldi::nnet2::SplitExampleStats
kaldi::nnet2::SplitExampleStats::longest_segment_after_split	nnet-example-functions.h	/^  int32 longest_segment_after_split;$/;"	m	struct:kaldi::nnet2::SplitExampleStats
kaldi::nnet2::SplitExampleStats::num_frames_kept_after_excise	nnet-example-functions.h	/^  int64 num_frames_kept_after_excise;$/;"	m	struct:kaldi::nnet2::SplitExampleStats
kaldi::nnet2::SplitExampleStats::num_frames_kept_after_split	nnet-example-functions.h	/^  int64 num_frames_kept_after_split;$/;"	m	struct:kaldi::nnet2::SplitExampleStats
kaldi::nnet2::SplitExampleStats::num_frames_must_keep	nnet-example-functions.h	/^  int64 num_frames_must_keep;$/;"	m	struct:kaldi::nnet2::SplitExampleStats
kaldi::nnet2::SplitExampleStats::num_frames_orig	nnet-example-functions.h	/^  int64 num_frames_orig;$/;"	m	struct:kaldi::nnet2::SplitExampleStats
kaldi::nnet2::SplitExampleStats::num_kept_segments	nnet-example-functions.h	/^  int32 num_kept_segments;$/;"	m	struct:kaldi::nnet2::SplitExampleStats
kaldi::nnet2::SplitExampleStats::num_lattices	nnet-example-functions.h	/^  int32 num_lattices;$/;"	m	struct:kaldi::nnet2::SplitExampleStats
kaldi::nnet2::SplitExampleStats::num_segments	nnet-example-functions.h	/^  int32 num_segments;$/;"	m	struct:kaldi::nnet2::SplitExampleStats
kaldi::nnet2::SumGroupComponent	nnet-component.h	/^class SumGroupComponent: public Component {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::SumGroupComponent::Backprop	nnet-component.cc	/^void SumGroupComponent::Backprop(const CuMatrixBase<BaseFloat> &, \/\/ in_value,$/;"	f	class:kaldi::nnet2::SumGroupComponent
kaldi::nnet2::SumGroupComponent::BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::SumGroupComponent
kaldi::nnet2::SumGroupComponent::BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return false; }$/;"	f	class:kaldi::nnet2::SumGroupComponent
kaldi::nnet2::SumGroupComponent::Copy	nnet-component.cc	/^Component* SumGroupComponent::Copy() const {$/;"	f	class:kaldi::nnet2::SumGroupComponent
kaldi::nnet2::SumGroupComponent::GetSizes	nnet-component.cc	/^void SumGroupComponent::GetSizes(std::vector<int32> *sizes) const {$/;"	f	class:kaldi::nnet2::SumGroupComponent
kaldi::nnet2::SumGroupComponent::Init	nnet-component.cc	/^void SumGroupComponent::Init(const std::vector<int32> &sizes) {$/;"	f	class:kaldi::nnet2::SumGroupComponent
kaldi::nnet2::SumGroupComponent::InitFromString	nnet-component.cc	/^void SumGroupComponent::InitFromString(std::string args) {$/;"	f	class:kaldi::nnet2::SumGroupComponent
kaldi::nnet2::SumGroupComponent::InputDim	nnet-component.h	/^  virtual int32 InputDim() const { return input_dim_; }$/;"	f	class:kaldi::nnet2::SumGroupComponent
kaldi::nnet2::SumGroupComponent::OutputDim	nnet-component.h	/^  virtual int32 OutputDim() const { return output_dim_; }$/;"	f	class:kaldi::nnet2::SumGroupComponent
kaldi::nnet2::SumGroupComponent::Propagate	nnet-component.cc	/^void SumGroupComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::SumGroupComponent
kaldi::nnet2::SumGroupComponent::Read	nnet-component.cc	/^void SumGroupComponent::Read(std::istream &is, bool binary) {$/;"	f	class:kaldi::nnet2::SumGroupComponent
kaldi::nnet2::SumGroupComponent::SumGroupComponent	nnet-component.h	/^  SumGroupComponent() { }$/;"	f	class:kaldi::nnet2::SumGroupComponent
kaldi::nnet2::SumGroupComponent::Type	nnet-component.h	/^  virtual std::string Type() const { return "SumGroupComponent"; }$/;"	f	class:kaldi::nnet2::SumGroupComponent
kaldi::nnet2::SumGroupComponent::Write	nnet-component.cc	/^void SumGroupComponent::Write(std::ostream &os, bool binary) const {$/;"	f	class:kaldi::nnet2::SumGroupComponent
kaldi::nnet2::SumGroupComponent::indexes_	nnet-component.h	/^  CuArray<Int32Pair> indexes_; \/\/ for each output index, the (start, end) input$/;"	m	class:kaldi::nnet2::SumGroupComponent
kaldi::nnet2::SumGroupComponent::input_dim_	nnet-component.h	/^  int32 input_dim_;$/;"	m	class:kaldi::nnet2::SumGroupComponent
kaldi::nnet2::SumGroupComponent::output_dim_	nnet-component.h	/^  int32 output_dim_;  $/;"	m	class:kaldi::nnet2::SumGroupComponent
kaldi::nnet2::SumGroupComponent::reverse_indexes_	nnet-component.h	/^  CuArray<int32> reverse_indexes_; \/\/ for each input index, the output index.$/;"	m	class:kaldi::nnet2::SumGroupComponent
kaldi::nnet2::TanhComponent	nnet-component.h	/^class TanhComponent: public NonlinearComponent {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::TanhComponent::Backprop	nnet-component.cc	/^void TanhComponent::Backprop(const CuMatrixBase<BaseFloat> &, \/\/ in_value$/;"	f	class:kaldi::nnet2::TanhComponent
kaldi::nnet2::TanhComponent::BackpropNeedsInput	nnet-component.h	/^  virtual bool BackpropNeedsInput() const { return false; }$/;"	f	class:kaldi::nnet2::TanhComponent
kaldi::nnet2::TanhComponent::BackpropNeedsOutput	nnet-component.h	/^  virtual bool BackpropNeedsOutput() const { return true; }$/;"	f	class:kaldi::nnet2::TanhComponent
kaldi::nnet2::TanhComponent::Copy	nnet-component.h	/^  virtual Component* Copy() const { return new TanhComponent(*this); }$/;"	f	class:kaldi::nnet2::TanhComponent
kaldi::nnet2::TanhComponent::Propagate	nnet-component.cc	/^void TanhComponent::Propagate(const CuMatrixBase<BaseFloat> &in,$/;"	f	class:kaldi::nnet2::TanhComponent
kaldi::nnet2::TanhComponent::TanhComponent	nnet-component.h	/^  TanhComponent() { }$/;"	f	class:kaldi::nnet2::TanhComponent
kaldi::nnet2::TanhComponent::TanhComponent	nnet-component.h	/^  explicit TanhComponent(const TanhComponent &other): NonlinearComponent(other) { }$/;"	f	class:kaldi::nnet2::TanhComponent
kaldi::nnet2::TanhComponent::TanhComponent	nnet-component.h	/^  explicit TanhComponent(int32 dim): NonlinearComponent(dim) { }$/;"	f	class:kaldi::nnet2::TanhComponent
kaldi::nnet2::TanhComponent::Type	nnet-component.h	/^  virtual std::string Type() const { return "TanhComponent"; }$/;"	f	class:kaldi::nnet2::TanhComponent
kaldi::nnet2::TotalNnetTrainingWeight	nnet-update.cc	/^BaseFloat TotalNnetTrainingWeight(const std::vector<NnetExample> &egs) {$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::UnitTestAdditiveNoiseComponent	nnet-component-test.cc	/^void UnitTestAdditiveNoiseComponent() {$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::UnitTestAffineComponent	nnet-component-test.cc	/^void UnitTestAffineComponent() {$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::UnitTestAffineComponentModified	nnet-component-test.cc	/^void UnitTestAffineComponentModified() {$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::UnitTestAffineComponentPreconditioned	nnet-component-test.cc	/^void UnitTestAffineComponentPreconditioned() {$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::UnitTestAffineComponentPreconditionedOnline	nnet-component-test.cc	/^void UnitTestAffineComponentPreconditionedOnline() {$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::UnitTestAffinePreconInputComponent	nnet-component-test.cc	/^void UnitTestAffinePreconInputComponent() {$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::UnitTestBlockAffineComponent	nnet-component-test.cc	/^void UnitTestBlockAffineComponent() {$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::UnitTestBlockAffineComponentPreconditioned	nnet-component-test.cc	/^void UnitTestBlockAffineComponentPreconditioned() {$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::UnitTestDctComponent	nnet-component-test.cc	/^void UnitTestDctComponent() {$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::UnitTestDropoutComponent	nnet-component-test.cc	/^void UnitTestDropoutComponent() {$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::UnitTestFixedAffineComponent	nnet-component-test.cc	/^void UnitTestFixedAffineComponent() {$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::UnitTestFixedLinearComponent	nnet-component-test.cc	/^void UnitTestFixedLinearComponent() {$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::UnitTestGenericComponent	nnet-component-test.cc	/^void UnitTestGenericComponent(std::string extra_str = "") {$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::UnitTestGenericComponentInternal	nnet-component-test.cc	/^void UnitTestGenericComponentInternal(const Component &component) {$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::UnitTestInformationBottleneckComponent	nnet-component-test.cc	/^void UnitTestInformationBottleneckComponent() {$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::UnitTestMaxoutComponent	nnet-component-test.cc	/^void UnitTestMaxoutComponent() {$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::UnitTestMixtureProbComponent	nnet-component-test.cc	/^void UnitTestMixtureProbComponent() {$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::UnitTestParsing	nnet-component-test.cc	/^void UnitTestParsing() {$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::UnitTestPiecewiseLinearComponent	nnet-component-test.cc	/^void UnitTestPiecewiseLinearComponent() {$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::UnitTestPnormComponent	nnet-component-test.cc	/^void UnitTestPnormComponent() {$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::UnitTestPreconditionDirections	nnet-precondition-test.cc	/^void UnitTestPreconditionDirections() {$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::UnitTestPreconditionDirectionsOnline	nnet-precondition-online-test.cc	/^void UnitTestPreconditionDirectionsOnline() {$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::UnitTestScaleComponent	nnet-component-test.cc	/^void UnitTestScaleComponent() {$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::UnitTestSigmoidComponent	nnet-component-test.cc	/^void UnitTestSigmoidComponent() {$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::UnitTestSolvePackingProblem	nnet-example-functions-test.cc	/^void UnitTestSolvePackingProblem() {$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::UnitTestSumGroupComponent	nnet-component-test.cc	/^void UnitTestSumGroupComponent() {$/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::UpdatableComponent	nnet-component.h	/^class UpdatableComponent: public Component {$/;"	c	namespace:kaldi::nnet2
kaldi::nnet2::UpdatableComponent::GetParameterDim	nnet-component.h	/^  virtual int32 GetParameterDim() const { KALDI_ASSERT(0); return 0; }$/;"	f	class:kaldi::nnet2::UpdatableComponent
kaldi::nnet2::UpdatableComponent::Info	nnet-component.cc	/^std::string UpdatableComponent::Info() const {$/;"	f	class:kaldi::nnet2::UpdatableComponent
kaldi::nnet2::UpdatableComponent::Init	nnet-component.h	/^  void Init(BaseFloat learning_rate) {$/;"	f	class:kaldi::nnet2::UpdatableComponent
kaldi::nnet2::UpdatableComponent::LearningRate	nnet-component.h	/^  BaseFloat LearningRate() const { return learning_rate_; }$/;"	f	class:kaldi::nnet2::UpdatableComponent
kaldi::nnet2::UpdatableComponent::SetLearningRate	nnet-component.h	/^  void SetLearningRate(BaseFloat lrate) {  learning_rate_ = lrate; }$/;"	f	class:kaldi::nnet2::UpdatableComponent
kaldi::nnet2::UpdatableComponent::UnVectorize	nnet-component.h	/^  virtual void UnVectorize(const VectorBase<BaseFloat> &params) {$/;"	f	class:kaldi::nnet2::UpdatableComponent
kaldi::nnet2::UpdatableComponent::UpdatableComponent	nnet-component.h	/^  UpdatableComponent(): learning_rate_(0.001) { }$/;"	f	class:kaldi::nnet2::UpdatableComponent
kaldi::nnet2::UpdatableComponent::UpdatableComponent	nnet-component.h	/^  UpdatableComponent(BaseFloat learning_rate) {$/;"	f	class:kaldi::nnet2::UpdatableComponent
kaldi::nnet2::UpdatableComponent::UpdatableComponent	nnet-component.h	/^  UpdatableComponent(const UpdatableComponent &other):$/;"	f	class:kaldi::nnet2::UpdatableComponent
kaldi::nnet2::UpdatableComponent::Vectorize	nnet-component.h	/^  virtual void Vectorize(VectorBase<BaseFloat> *params) const { KALDI_ASSERT(0); }$/;"	f	class:kaldi::nnet2::UpdatableComponent
kaldi::nnet2::UpdatableComponent::learning_rate_	nnet-component.h	/^  BaseFloat learning_rate_; \/\/\/< learning rate (0.0..0.01)$/;"	m	class:kaldi::nnet2::UpdatableComponent
kaldi::nnet2::UpdatableComponent::~UpdatableComponent	nnet-component.h	/^  virtual ~UpdatableComponent() { }$/;"	f	class:kaldi::nnet2::UpdatableComponent
kaldi::nnet2::UpdateHash	nnet-example-functions.cc	/^void UpdateHash($/;"	f	namespace:kaldi::nnet2
kaldi::nnet2::WidenNnet	widen-nnet.cc	/^void WidenNnet(const NnetWidenConfig &widen_config,$/;"	f	namespace:kaldi::nnet2
labels	nnet-example.h	/^  std::vector<std::pair<int32, BaseFloat> > labels;  $/;"	m	struct:kaldi::nnet2::NnetExample
lat_	nnet-compute-discriminative.cc	/^  Lattice lat_; \/\/ we convert the CompactLattice in the eg, into Lattice form.$/;"	m	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
lat_	nnet-example-functions.cc	/^  Lattice lat_; \/\/ lattice generated from eg_.den_lat, with epsilons removed etc.$/;"	m	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
lbfgs_	nnet-lbfgs.h	/^  OptimizeLbfgs<BaseFloat> *lbfgs_;$/;"	m	class:kaldi::nnet2::NnetLbfgsTrainer
lbfgs_dim	nnet-lbfgs.h	/^  int32 lbfgs_dim; \/\/ Number of steps to keep in L-BFGS.$/;"	m	struct:kaldi::nnet2::NnetLbfgsTrainerConfig
lbfgs_num_iters	nnet-lbfgs.h	/^  int32 lbfgs_num_iters; \/\/ more precisely, the number of function evaluations.$/;"	m	struct:kaldi::nnet2::NnetLbfgsTrainerConfig
learning_rate_	nnet-component.h	/^  BaseFloat learning_rate_; \/\/\/< learning rate (0.0..0.01)$/;"	m	class:kaldi::nnet2::UpdatableComponent
left_context	nnet-example.h	/^  int32 left_context;$/;"	m	struct:kaldi::nnet2::DiscriminativeNnetExample
left_context	nnet-example.h	/^  int32 left_context;$/;"	m	struct:kaldi::nnet2::NnetExample
left_context_	nnet-component.h	/^  int32 left_context_;$/;"	m	class:kaldi::nnet2::SpliceComponent
left_context_	nnet-component.h	/^  int32 left_context_;$/;"	m	class:kaldi::nnet2::SpliceMaxComponent
left_context_	nnet-randomize.h	/^  int32 left_context_;$/;"	m	class:kaldi::nnet2::NnetDataRandomizer
linear_params_	nnet-component.h	/^  CuMatrix<BaseFloat> linear_params_;$/;"	m	class:kaldi::nnet2::AffineComponent
linear_params_	nnet-component.h	/^  CuMatrix<BaseFloat> linear_params_;$/;"	m	class:kaldi::nnet2::BlockAffineComponent
linear_params_	nnet-component.h	/^  CuMatrix<BaseFloat> linear_params_;$/;"	m	class:kaldi::nnet2::FixedAffineComponent
log_params_	nnet-component.h	/^  std::vector<CuMatrix<BaseFloat> > log_params_; \/\/ these are the$/;"	m	class:kaldi::nnet2::MixtureProbComponent
log_prob_	nnet-update-parallel.cc	/^  double log_prob_; \/\/ log-like times num frames.$/;"	m	class:kaldi::nnet2::DoBackpropParallelClass	file:
log_prob_ptr_	nnet-update-parallel.cc	/^  double *log_prob_ptr_;$/;"	m	class:kaldi::nnet2::DoBackpropParallelClass	file:
log_probs_	decodable-am-nnet.h	/^  CuMatrix<BaseFloat> log_probs_; \/\/ actually not really probabilities, since we divide$/;"	m	class:kaldi::nnet2::DecodableAmNnetParallel
log_probs_	decodable-am-nnet.h	/^  Matrix<BaseFloat> log_probs_; \/\/ actually not really probabilities, since we divide$/;"	m	class:kaldi::nnet2::DecodableAmNnet
logprob_this_phase_	train-nnet.h	/^  double logprob_this_phase_; \/\/ Needed for accumulating train log-prob on each phase.$/;"	m	class:kaldi::nnet2::NnetSimpleTrainer
longest_lattice	nnet-example-functions.h	/^  int32 longest_lattice;$/;"	m	struct:kaldi::nnet2::SplitExampleStats
longest_segment_after_excise	nnet-example-functions.h	/^  int32 longest_segment_after_excise;$/;"	m	struct:kaldi::nnet2::SplitExampleStats
longest_segment_after_split	nnet-example-functions.h	/^  int32 longest_segment_after_split;$/;"	m	struct:kaldi::nnet2::SplitExampleStats
main	nnet-component-test.cc	/^int main() {$/;"	f
main	nnet-example-functions-test.cc	/^int main() {$/;"	f
main	nnet-precondition-online-test.cc	/^int main() {$/;"	f
main	nnet-precondition-test.cc	/^int main() {$/;"	f
mat_	nnet-component.h	/^  CuMatrix<BaseFloat> mat_;$/;"	m	class:kaldi::nnet2::FixedLinearComponent
max_average_deriv	nnet-fix.h	/^  BaseFloat max_average_deriv; \/\/ Maximum average derivative that we allow,$/;"	m	struct:kaldi::nnet2::NnetFixConfig
max_change	rescale-nnet.h	/^  BaseFloat max_change; \/\/ maximum change on any one iteration (to$/;"	m	struct:kaldi::nnet2::NnetRescaleConfig
max_change_	nnet-component.h	/^  BaseFloat max_change_; \/\/ If > 0, this is the maximum amount of parameter change (in L2 norm)$/;"	m	class:kaldi::nnet2::AffineComponentPreconditioned
max_change_	nnet-component.h	/^  BaseFloat max_change_; \/\/ If > 0, this is the maximum amount of parameter$/;"	m	class:kaldi::nnet2::AffineComponentPreconditionedOnline
max_change_	nnet-component.h	/^  BaseFloat max_change_; \/\/ If nonzero, maximum change allowed per individual$/;"	m	class:kaldi::nnet2::PiecewiseLinearComponent
max_change_	nnet-component.h	/^  BaseFloat max_change_; \/\/\/ [if above the cutoff], this is the maximum$/;"	m	class:kaldi::nnet2::AffineComponentModified
max_lbfgs_dim	combine-nnet-fast.h	/^  int32 max_lbfgs_dim;$/;"	m	struct:kaldi::nnet2::NnetCombineFastConfig
max_learning_rate_factor	combine-nnet-a.h	/^  BaseFloat max_learning_rate_factor; \/\/ 2.0 by default.$/;"	m	struct:kaldi::nnet2::NnetCombineAconfig
max_length	nnet-example-functions.h	/^  int32 max_length;$/;"	m	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
max_power_	nnet-component.h	/^  int32 max_power_;$/;"	m	class:kaldi::nnet2::PowerExpandComponent
max_singular_value	get-feature-transform.h	/^  BaseFloat max_singular_value;$/;"	m	struct:kaldi::FeatureTransformEstimateOptions
min_average_deriv	nnet-fix.h	/^  BaseFloat min_average_deriv; \/\/ Minimum average derivative that we allow,$/;"	m	struct:kaldi::nnet2::NnetFixConfig
min_change	rescale-nnet.h	/^  BaseFloat min_change; \/\/ minimum change on any one iteration (controls$/;"	m	struct:kaldi::nnet2::NnetRescaleConfig
min_count	mixup-nnet.h	/^  BaseFloat min_count;$/;"	m	struct:kaldi::nnet2::NnetMixupConfig
min_learning_rate	combine-nnet-a.h	/^  BaseFloat min_learning_rate; \/\/ 0.0001 by default; we don't allow learning rate to go below$/;"	m	struct:kaldi::nnet2::NnetCombineAconfig
min_learning_rate_factor	combine-nnet-a.h	/^  BaseFloat min_learning_rate_factor; \/\/ 0.5 by default;$/;"	m	struct:kaldi::nnet2::NnetCombineAconfig
minibatch_size	combine-nnet-fast.h	/^  int32 minibatch_size; \/\/ e.g. 1028; a larger minibatch size we use in$/;"	m	struct:kaldi::nnet2::NnetCombineFastConfig
minibatch_size	nnet-lbfgs.h	/^  int32 minibatch_size;$/;"	m	struct:kaldi::nnet2::NnetLbfgsTrainerConfig
minibatch_size	train-nnet.h	/^  int32 minibatch_size;$/;"	m	struct:kaldi::nnet2::NnetSimpleTrainerConfig
minibatch_size_	combine-nnet-fast.cc	/^  int32 minibatch_size_; \/\/ equals config --fisher-minbatch-size e.g. 64 (smaller than$/;"	m	class:kaldi::nnet2::FisherComputationClass	file:
minibatches_per_phase	train-nnet.h	/^  int32 minibatches_per_phase;$/;"	m	struct:kaldi::nnet2::NnetSimpleTrainerConfig
minibatches_seen_this_phase_	train-nnet.h	/^  int32 minibatches_seen_this_phase_;$/;"	m	class:kaldi::nnet2::NnetSimpleTrainer
minimize	nnet-example-functions.h	/^  bool minimize; \/\/ we'll push and minimize if this is true.$/;"	m	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
multiple_transition_ids	nnet-example-functions.cc	/^    bool multiple_transition_ids; \/\/ true if there are multiple distinct$/;"	m	struct:kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo	file:
nnet2	am-nnet.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet2	am-nnet.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet2	combine-nnet-a.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet2	combine-nnet-a.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet2	combine-nnet-fast.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet2	combine-nnet-fast.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet2	combine-nnet.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet2	combine-nnet.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet2	decodable-am-nnet.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet2	mixup-nnet.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet2	mixup-nnet.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet2	nnet-component-test.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet2	nnet-component.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet2	nnet-component.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet2	nnet-compute-discriminative-parallel.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet2	nnet-compute-discriminative-parallel.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet2	nnet-compute-discriminative.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet2	nnet-compute-discriminative.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet2	nnet-compute.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet2	nnet-compute.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet2	nnet-example-functions-test.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet2	nnet-example-functions.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet2	nnet-example-functions.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet2	nnet-example.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet2	nnet-example.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet2	nnet-fix.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet2	nnet-fix.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet2	nnet-functions.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet2	nnet-functions.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet2	nnet-lbfgs.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet2	nnet-lbfgs.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet2	nnet-limit-rank.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet2	nnet-limit-rank.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet2	nnet-nnet.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet2	nnet-nnet.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet2	nnet-precondition-online-test.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet2	nnet-precondition-online.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet2	nnet-precondition-online.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet2	nnet-precondition-test.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet2	nnet-precondition.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet2	nnet-precondition.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet2	nnet-randomize.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet2	nnet-randomize.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet2	nnet-stats.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet2	nnet-stats.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet2	nnet-update-parallel.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet2	nnet-update-parallel.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet2	nnet-update.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet2	nnet-update.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet2	rescale-nnet.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet2	rescale-nnet.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet2	shrink-nnet.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet2	shrink-nnet.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet2	train-nnet.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet2	train-nnet.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet2	widen-nnet.cc	/^namespace nnet2 {$/;"	n	namespace:kaldi	file:
nnet2	widen-nnet.h	/^namespace nnet2 {$/;"	n	namespace:kaldi
nnet_	am-nnet.h	/^  Nnet nnet_;$/;"	m	class:kaldi::nnet2::AmNnet
nnet_	combine-nnet-fast.cc	/^  const Nnet &nnet_; \/\/ point at which we compute the parameter gradients.$/;"	m	class:kaldi::nnet2::FisherComputationClass	file:
nnet_	nnet-compute.cc	/^  const Nnet &nnet_;$/;"	m	class:kaldi::nnet2::NnetComputer	file:
nnet_	nnet-lbfgs.h	/^  const Nnet *nnet_; \/\/ the original neural net.$/;"	m	class:kaldi::nnet2::NnetLbfgsTrainer
nnet_	nnet-limit-rank.cc	/^  Nnet *nnet_;$/;"	m	class:kaldi::nnet2::LimitRankClass	file:
nnet_	nnet-update-parallel.cc	/^  const Nnet &nnet_;$/;"	m	class:kaldi::nnet2::DoBackpropParallelClass	file:
nnet_	nnet-update.cc	/^  const Nnet &nnet_;$/;"	m	class:kaldi::nnet2::NnetUpdater	file:
nnet_	rescale-nnet.cc	/^  Nnet *nnet_;$/;"	m	class:kaldi::nnet2::NnetRescaler	file:
nnet_	train-nnet.h	/^  Nnet *nnet_; \/\/ the nnet we're training.$/;"	m	class:kaldi::nnet2::NnetSimpleTrainer
nnet_out_	combine-nnet-fast.cc	/^  Nnet *nnet_out_;$/;"	m	class:kaldi::nnet2::FastNnetCombiner	file:
nnet_precondition_	nnet-lbfgs.h	/^  Nnet *nnet_precondition_; \/\/ This object stores the preconditioning$/;"	m	class:kaldi::nnet2::NnetLbfgsTrainer
nnet_to_update_	nnet-compute-discriminative-parallel.cc	/^  Nnet *nnet_to_update_;$/;"	m	class:kaldi::nnet2::DiscTrainParallelClass	file:
nnet_to_update_	nnet-compute-discriminative.cc	/^  Nnet *nnet_to_update_; \/\/ will equal am_nnet_.GetNnet(), in SGD case, or$/;"	m	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
nnet_to_update_	nnet-compute.cc	/^  Nnet *nnet_to_update_; \/\/ May be NULL, if just want objective function$/;"	m	class:kaldi::nnet2::NnetComputer	file:
nnet_to_update_	nnet-update-parallel.cc	/^  Nnet *nnet_to_update_;$/;"	m	class:kaldi::nnet2::DoBackpropParallelClass	file:
nnet_to_update_	nnet-update.cc	/^  Nnet *nnet_to_update_;$/;"	m	class:kaldi::nnet2::NnetUpdater	file:
nnet_to_update_orig_	nnet-compute-discriminative-parallel.cc	/^  Nnet *nnet_to_update_orig_;$/;"	m	class:kaldi::nnet2::DiscTrainParallelClass	file:
nnet_to_update_orig_	nnet-update-parallel.cc	/^  Nnet *nnet_to_update_orig_;$/;"	m	class:kaldi::nnet2::DoBackpropParallelClass	file:
nnets_	combine-nnet-fast.cc	/^  const std::vector<Nnet> &nnets_; \/\/ The dot-product  of each of these with the parameter gradients,$/;"	m	class:kaldi::nnet2::FisherComputationClass	file:
nnets_	combine-nnet-fast.cc	/^  const std::vector<Nnet> &nnets_;$/;"	m	class:kaldi::nnet2::FastNnetCombiner	file:
noise_proportion_	nnet-component.h	/^  BaseFloat noise_proportion_; \/\/ as a proportion of variance...$/;"	m	class:kaldi::nnet2::InformationBottleneckComponent
nonzero_derivative	nnet-example-functions.cc	/^    bool nonzero_derivative; \/\/ True if we need to keep this frame because the$/;"	m	struct:kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo	file:
num_ali	nnet-example.h	/^  std::vector<int32> num_ali; $/;"	m	struct:kaldi::nnet2::DiscriminativeNnetExample
num_bfgs_iters	combine-nnet-a.h	/^  int32 num_bfgs_iters; \/\/ The dimension is small (the number of layers)$/;"	m	struct:kaldi::nnet2::NnetCombineAconfig
num_bfgs_iters	combine-nnet.h	/^  int32 num_bfgs_iters; \/\/ The dimension is small (e.g. 3 to 5 times the$/;"	m	struct:kaldi::nnet2::NnetCombineConfig
num_bfgs_iters	shrink-nnet.h	/^  int32 num_bfgs_iters; \/\/ The dimension is small (e.g. 3 to 5) so we do$/;"	m	struct:kaldi::nnet2::NnetShrinkConfig
num_blocks_	nnet-component.h	/^  int32 num_blocks_;$/;"	m	class:kaldi::nnet2::BlockAffineComponent
num_chunks_	nnet-update.cc	/^  int32 num_chunks_; \/\/ same as the minibatch size.$/;"	m	class:kaldi::nnet2::NnetUpdater	file:
num_den_overlap	nnet-example-functions.cc	/^    bool num_den_overlap; \/\/ true if num and den overlap.$/;"	m	struct:kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo	file:
num_epochs	nnet-randomize.h	/^  BaseFloat num_epochs; \/\/ Total number of epochs we want (if >0).  The program will run$/;"	m	struct:kaldi::nnet2::NnetDataRandomizerConfig
num_frames_kept_after_excise	nnet-example-functions.h	/^  int64 num_frames_kept_after_excise;$/;"	m	struct:kaldi::nnet2::SplitExampleStats
num_frames_kept_after_split	nnet-example-functions.h	/^  int64 num_frames_kept_after_split;$/;"	m	struct:kaldi::nnet2::SplitExampleStats
num_frames_must_keep	nnet-example-functions.h	/^  int64 num_frames_must_keep;$/;"	m	struct:kaldi::nnet2::SplitExampleStats
num_frames_orig	nnet-example-functions.h	/^  int64 num_frames_orig;$/;"	m	struct:kaldi::nnet2::SplitExampleStats
num_iters	rescale-nnet.h	/^  BaseFloat num_iters;$/;"	m	struct:kaldi::nnet2::NnetRescaleConfig
num_kept_segments	nnet-example-functions.h	/^  int32 num_kept_segments;$/;"	m	struct:kaldi::nnet2::SplitExampleStats
num_lattices	nnet-example-functions.h	/^  int32 num_lattices;$/;"	m	struct:kaldi::nnet2::SplitExampleStats
num_lbfgs_iters	combine-nnet-fast.h	/^  int32 num_lbfgs_iters; $/;"	m	struct:kaldi::nnet2::NnetCombineFastConfig
num_mixtures	mixup-nnet.h	/^  int32 num_mixtures;$/;"	m	struct:kaldi::nnet2::NnetMixupConfig
num_phases_	train-nnet.h	/^  int32 num_phases_;$/;"	m	class:kaldi::nnet2::NnetSimpleTrainer
num_samples	nnet-randomize.h	/^  int32 num_samples; \/\/ Total number of samples we want to train on (if >0).  The program$/;"	m	struct:kaldi::nnet2::NnetDataRandomizerConfig
num_samples_returned_	nnet-randomize.h	/^  int32 num_samples_returned_; \/\/ increases during training.$/;"	m	class:kaldi::nnet2::NnetDataRandomizer
num_samples_tgt_	nnet-randomize.h	/^  int32 num_samples_tgt_; \/\/ a function of the config.$/;"	m	class:kaldi::nnet2::NnetDataRandomizer
num_segments	nnet-example-functions.h	/^  int32 num_segments;$/;"	m	struct:kaldi::nnet2::SplitExampleStats
num_threads	combine-nnet-fast.h	/^  int32 num_threads;$/;"	m	struct:kaldi::nnet2::NnetCombineFastConfig
num_threads	nnet-limit-rank.h	/^  int32 num_threads;$/;"	m	struct:kaldi::nnet2::NnetLimitRankOpts
operator ()	combine-nnet-fast.cc	/^  void operator () () {$/;"	f	class:kaldi::nnet2::FisherComputationClass
operator ()	nnet-compute-discriminative-parallel.cc	/^  void operator () () {$/;"	f	class:kaldi::nnet2::DiscTrainParallelClass
operator ()	nnet-limit-rank.cc	/^  void operator () () {$/;"	f	class:kaldi::nnet2::LimitRankClass
operator ()	nnet-update-parallel.cc	/^  void operator () () {$/;"	f	class:kaldi::nnet2::DoBackpropParallelClass
operator =	nnet-nnet.cc	/^Nnet &Nnet::operator = (const Nnet &other) {$/;"	f	class:kaldi::nnet2::Nnet
opts_	nnet-compute-discriminative-parallel.cc	/^  const NnetDiscriminativeUpdateOptions &opts_;$/;"	m	class:kaldi::nnet2::DiscTrainParallelClass	file:
opts_	nnet-compute-discriminative.cc	/^  const NnetDiscriminativeUpdateOptions &opts_;$/;"	m	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
opts_	nnet-limit-rank.cc	/^  const NnetLimitRankOpts &opts_;$/;"	m	class:kaldi::nnet2::LimitRankClass	file:
out_C_	nnet-component.h	/^  CuTpMatrix<double> out_C_;$/;"	m	class:kaldi::nnet2::AffineComponentA
out_C_inv_	nnet-component.h	/^  CuTpMatrix<double> out_C_inv_;$/;"	m	class:kaldi::nnet2::AffineComponentA
output_dim_	nnet-component.h	/^  int32 output_dim_;  $/;"	m	class:kaldi::nnet2::SumGroupComponent
output_dim_	nnet-component.h	/^  int32 output_dim_;$/;"	m	class:kaldi::nnet2::MaxoutComponent
output_dim_	nnet-component.h	/^  int32 output_dim_;$/;"	m	class:kaldi::nnet2::MixtureProbComponent
output_dim_	nnet-component.h	/^  int32 output_dim_;$/;"	m	class:kaldi::nnet2::PnormComponent
output_scatter_	nnet-component.h	/^  CuSpMatrix<double> output_scatter_;$/;"	m	class:kaldi::nnet2::AffineComponentA
overshoot	combine-nnet-a.h	/^  BaseFloat overshoot;$/;"	m	struct:kaldi::nnet2::NnetCombineAconfig
p_	nnet-component.h	/^  BaseFloat p_;$/;"	m	class:kaldi::nnet2::PnormComponent
pad_input_	decodable-am-nnet.h	/^  bool pad_input_;$/;"	m	class:kaldi::nnet2::DecodableAmNnetParallel
param_stddev_factor	widen-nnet.h	/^  BaseFloat param_stddev_factor;$/;"	m	struct:kaldi::nnet2::NnetWidenConfig
parameter_factor	nnet-fix.h	/^  BaseFloat parameter_factor; \/\/ Factor (>1.0) by which we change the parameters if$/;"	m	struct:kaldi::nnet2::NnetFixConfig
parameter_proportion	nnet-limit-rank.h	/^  BaseFloat parameter_proportion;$/;"	m	struct:kaldi::nnet2::NnetLimitRankOpts
params_	combine-nnet-fast.cc	/^  Vector<double> params_; \/\/ the parameters we're optimizing-- in the$/;"	m	class:kaldi::nnet2::FastNnetCombiner	file:
params_	nnet-component.h	/^  CuMatrix<BaseFloat> params_;$/;"	m	class:kaldi::nnet2::PiecewiseLinearComponent
params_	nnet-component.h	/^  std::vector<CuMatrix<BaseFloat> > params_; \/\/ these are derived from$/;"	m	class:kaldi::nnet2::MixtureProbComponent
params_	nnet-lbfgs.h	/^  Vector<BaseFloat> params_; \/\/ Neural net parameters, stored as a vector.$/;"	m	class:kaldi::nnet2::NnetLbfgsTrainer
pdf_post	nnet-randomize.h	/^    Posterior pdf_post; \/\/ pdf-level posteriors.  Typically a single$/;"	m	struct:kaldi::nnet2::NnetDataRandomizer::TrainingFile
perturb_stddev	mixup-nnet.h	/^  BaseFloat perturb_stddev;$/;"	m	struct:kaldi::nnet2::NnetMixupConfig
power	mixup-nnet.h	/^  BaseFloat power;$/;"	m	struct:kaldi::nnet2::NnetMixupConfig
precondition_config	nnet-lbfgs.h	/^  PreconditionConfig precondition_config;$/;"	m	struct:kaldi::nnet2::NnetLbfgsTrainerConfig
priors_	am-nnet.h	/^  Vector<BaseFloat> priors_;$/;"	m	class:kaldi::nnet2::AmNnet
prob_scale_	decodable-am-nnet.h	/^  BaseFloat prob_scale_;$/;"	m	class:kaldi::nnet2::DecodableAmNnetParallel
random_generator_	nnet-component.h	/^  CuRand<BaseFloat> random_generator_;$/;"	m	class:kaldi::nnet2::RandomComponent
rank_	nnet-component.h	/^  int32 rank_;           \/\/ Number of rows of N matrices.$/;"	m	class:kaldi::nnet2::AffineComponentPreconditionedOnline
regularizer	combine-nnet-fast.h	/^  BaseFloat regularizer;$/;"	m	struct:kaldi::nnet2::NnetCombineFastConfig
relevant_indexes_	rescale-nnet.cc	/^  std::set<int32> relevant_indexes_; \/\/ values of c with AffineComponent followed$/;"	m	class:kaldi::nnet2::NnetRescaler	file:
relu_bias_change	nnet-fix.h	/^  BaseFloat relu_bias_change; \/\/ Change in bias for relus that are usually close to zero.$/;"	m	struct:kaldi::nnet2::NnetFixConfig
remove_offset	get-feature-transform.h	/^  bool remove_offset;$/;"	m	struct:kaldi::FeatureTransformEstimateOptions
renormalize	nnet-component.h	/^  bool renormalize;$/;"	m	struct:kaldi::nnet2::PreconditionConfig
reorder_	nnet-component.h	/^  bool reorder_; \/\/ If true, transformation matrix we use is not$/;"	m	class:kaldi::nnet2::DctComponent
reorder_	nnet-component.h	/^  std::vector<int32> reorder_; \/\/ This class sends input dimension i to$/;"	m	class:kaldi::nnet2::PermuteComponent
repository_	nnet-compute-discriminative-parallel.cc	/^  DiscriminativeExamplesRepository *repository_;$/;"	m	class:kaldi::nnet2::DiscTrainParallelClass	file:
repository_	nnet-update-parallel.cc	/^  ExamplesRepository *repository_;$/;"	m	class:kaldi::nnet2::DoBackpropParallelClass	file:
reverse_indexes_	nnet-component.h	/^  CuArray<int32> reverse_indexes_; \/\/ for each input index, the output index.$/;"	m	class:kaldi::nnet2::SumGroupComponent
right_context_	nnet-component.h	/^  int32 right_context_;$/;"	m	class:kaldi::nnet2::SpliceComponent
right_context_	nnet-component.h	/^  int32 right_context_;$/;"	m	class:kaldi::nnet2::SpliceMaxComponent
right_context_	nnet-randomize.h	/^  int32 right_context_;$/;"	m	class:kaldi::nnet2::NnetDataRandomizer
samples_	nnet-randomize.h	/^  std::vector<std::pair<int32, int32> > samples_; \/\/ each time we randomize$/;"	m	class:kaldi::nnet2::NnetDataRandomizer
scale_	nnet-component.h	/^  BaseFloat scale_;$/;"	m	class:kaldi::nnet2::ScaleComponent
scatter_	combine-nnet-fast.cc	/^  SpMatrix<double> scatter_; \/\/ Local accumulation of the scatter.  $/;"	m	class:kaldi::nnet2::FisherComputationClass	file:
scatter_ptr_	combine-nnet-fast.cc	/^  SpMatrix<double> *scatter_ptr_;$/;"	m	class:kaldi::nnet2::FisherComputationClass	file:
silence_phones_	nnet-compute-discriminative.cc	/^  std::vector<int32> silence_phones_; \/\/ derived from opts_.silence_phones_str$/;"	m	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
silence_phones_str	nnet-compute-discriminative.h	/^  std::string silence_phones_str; \/\/ colon-separated list of integer ids of silence phones,$/;"	m	struct:kaldi::nnet2::NnetDiscriminativeUpdateOptions
spk_info	nnet-example.h	/^  Vector<BaseFloat> spk_info; $/;"	m	struct:kaldi::nnet2::DiscriminativeNnetExample
spk_info	nnet-example.h	/^  Vector<BaseFloat> spk_info; $/;"	m	struct:kaldi::nnet2::NnetExample
spk_info	nnet-randomize.h	/^    Vector<BaseFloat> spk_info;$/;"	m	struct:kaldi::nnet2::NnetDataRandomizer::TrainingFile
spk_info_	decodable-am-nnet.h	/^  const CuVector<BaseFloat> *spk_info_;$/;"	m	class:kaldi::nnet2::DecodableAmNnetParallel
spk_info_	nnet-compute.cc	/^  CuVector<BaseFloat> spk_info_;$/;"	m	class:kaldi::nnet2::NnetComputer	file:
split	nnet-example-functions.h	/^  bool split; \/\/ if false, we won't split at all.$/;"	m	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
start_state	nnet-example-functions.cc	/^    StateId start_state;$/;"	m	struct:kaldi::nnet2::DiscriminativeExampleSplitter::FrameInfo	file:
state_times_	nnet-example-functions.cc	/^  std::vector<int32> state_times_;$/;"	m	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
stats_	nnet-compute-discriminative-parallel.cc	/^  NnetDiscriminativeStats stats_;$/;"	m	class:kaldi::nnet2::DiscTrainParallelClass	file:
stats_	nnet-compute-discriminative.cc	/^  NnetDiscriminativeStats *stats_; \/\/ the objective function, etc.$/;"	m	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
stats_ptr_	nnet-compute-discriminative-parallel.cc	/^  NnetDiscriminativeStats *stats_ptr_;$/;"	m	class:kaldi::nnet2::DiscTrainParallelClass	file:
stddev_	nnet-component.h	/^  BaseFloat stddev_;$/;"	m	class:kaldi::nnet2::AdditiveNoiseComponent
store_separate_gradients_	nnet-compute-discriminative-parallel.cc	/^  bool store_separate_gradients_;$/;"	m	class:kaldi::nnet2::DiscTrainParallelClass	file:
store_separate_gradients_	nnet-update-parallel.cc	/^  bool store_separate_gradients_;$/;"	m	class:kaldi::nnet2::DoBackpropParallelClass	file:
sumsq_	nnet-component.h	/^  CuVector<BaseFloat> sumsq_;$/;"	m	class:kaldi::nnet2::InformationBottleneckComponent
target_avg_deriv	rescale-nnet.h	/^  BaseFloat target_avg_deriv;$/;"	m	struct:kaldi::nnet2::NnetRescaleConfig
target_first_layer_avg_deriv	rescale-nnet.h	/^  BaseFloat target_first_layer_avg_deriv;$/;"	m	struct:kaldi::nnet2::NnetRescaleConfig
target_last_layer_avg_deriv	rescale-nnet.h	/^  BaseFloat target_last_layer_avg_deriv;$/;"	m	struct:kaldi::nnet2::NnetRescaleConfig
test	nnet-example-functions.h	/^  bool test;$/;"	m	struct:kaldi::nnet2::SplitDiscriminativeExampleConfig
test_gradient	combine-nnet.h	/^  bool test_gradient;$/;"	m	struct:kaldi::nnet2::NnetCombineConfig
tmodel_	nnet-compute-discriminative-parallel.cc	/^  const TransitionModel &tmodel_;$/;"	m	class:kaldi::nnet2::DiscTrainParallelClass	file:
tmodel_	nnet-compute-discriminative.cc	/^  const TransitionModel &tmodel_;$/;"	m	class:kaldi::nnet2::NnetDiscriminativeUpdater	file:
tmodel_	nnet-example-functions.cc	/^  const TransitionModel &tmodel_;$/;"	m	class:kaldi::nnet2::DiscriminativeExampleSplitter	file:
tot_den_objf	nnet-compute-discriminative.h	/^  double tot_den_objf;  \/\/ for MMI, the (weighted) denominator likelihood; for$/;"	m	struct:kaldi::nnet2::NnetDiscriminativeStats
tot_num_count	nnet-compute-discriminative.h	/^  double tot_num_count; \/\/ total count of numerator posterior (should be$/;"	m	struct:kaldi::nnet2::NnetDiscriminativeStats
tot_num_objf	nnet-compute-discriminative.h	/^  double tot_num_objf;  \/\/ for MMI, the (weighted) numerator likelihood; for$/;"	m	struct:kaldi::nnet2::NnetDiscriminativeStats
tot_t	nnet-compute-discriminative.h	/^  double tot_t; \/\/ total number of frames$/;"	m	struct:kaldi::nnet2::NnetDiscriminativeStats
tot_t_weighted	nnet-compute-discriminative.h	/^  double tot_t_weighted; \/\/ total number of frames times weight.$/;"	m	struct:kaldi::nnet2::NnetDiscriminativeStats
tot_weight_	nnet-update-parallel.cc	/^  double tot_weight_;$/;"	m	class:kaldi::nnet2::DoBackpropParallelClass	file:
tot_weight_ptr_	nnet-update-parallel.cc	/^  double *tot_weight_ptr_;$/;"	m	class:kaldi::nnet2::DoBackpropParallelClass	file:
trans_model_	decodable-am-nnet.h	/^  const TransitionModel &trans_model_;$/;"	m	class:kaldi::nnet2::DecodableAmNnet
trans_model_	decodable-am-nnet.h	/^  const TransitionModel &trans_model_;$/;"	m	class:kaldi::nnet2::DecodableAmNnetParallel
valid_impr_thresh	combine-nnet-a.h	/^  BaseFloat valid_impr_thresh;$/;"	m	struct:kaldi::nnet2::NnetCombineAconfig
value_sum_	nnet-component.h	/^  CuVector<double> value_sum_; \/\/ stats at the output.$/;"	m	class:kaldi::nnet2::NonlinearComponent
weight	nnet-example.h	/^  BaseFloat weight; $/;"	m	struct:kaldi::nnet2::DiscriminativeNnetExample
within_class_factor	get-feature-transform.h	/^  BaseFloat within_class_factor;$/;"	m	struct:kaldi::FeatureTransformEstimateOptions
~Component	nnet-component.h	/^  virtual ~Component() { }$/;"	f	class:kaldi::nnet2::Component
~DecodableAmNnetParallel	decodable-am-nnet.h	/^  ~DecodableAmNnetParallel() {$/;"	f	class:kaldi::nnet2::DecodableAmNnetParallel
~DiscTrainParallelClass	nnet-compute-discriminative-parallel.cc	/^  ~DiscTrainParallelClass() {$/;"	f	class:kaldi::nnet2::DiscTrainParallelClass
~DoBackpropParallelClass	nnet-update-parallel.cc	/^  ~DoBackpropParallelClass() {$/;"	f	class:kaldi::nnet2::DoBackpropParallelClass
~FisherComputationClass	combine-nnet-fast.cc	/^  ~FisherComputationClass() {$/;"	f	class:kaldi::nnet2::FisherComputationClass
~LimitRankClass	nnet-limit-rank.cc	/^  ~LimitRankClass() { }$/;"	f	class:kaldi::nnet2::LimitRankClass
~Nnet	nnet-nnet.h	/^  virtual ~Nnet() { Destroy(); }$/;"	f	class:kaldi::nnet2::Nnet
~NnetDataRandomizer	nnet-randomize.cc	/^NnetDataRandomizer::~NnetDataRandomizer() {$/;"	f	class:kaldi::nnet2::NnetDataRandomizer
~NnetLbfgsTrainer	nnet-lbfgs.cc	/^NnetLbfgsTrainer::~NnetLbfgsTrainer() {$/;"	f	class:kaldi::nnet2::NnetLbfgsTrainer
~NnetSimpleTrainer	train-nnet.cc	/^NnetSimpleTrainer::~NnetSimpleTrainer() {$/;"	f	class:kaldi::nnet2::NnetSimpleTrainer
~UpdatableComponent	nnet-component.h	/^  virtual ~UpdatableComponent() { }$/;"	f	class:kaldi::nnet2::UpdatableComponent
