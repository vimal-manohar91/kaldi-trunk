// bin/matrix-sum-rows.cc

// Copyright 2014 Vimal Manohar

// See ../../COPYING for clarification regarding multiple authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
// WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
// MERCHANTABLITY OR NON-INFRINGEMENT.
// See the Apache 2 License for the specific language governing permissions and
// limitations under the License.

#include "base/kaldi-common.h"
#include "util/common-utils.h"
#include "matrix/kaldi-matrix.h"


int main(int argc, char *argv[]) {
  try {
    using namespace kaldi;

    const char *usage =
        "Sum the rows of a matrix to a single vector"
        "\n"
        "Usage: matrix-sum-rows [options] <matrix-rxfilename> <vector-wxfilename>\n";

    bool binary = true;
    ParseOptions po(usage);

    po.Register("binary", &binary, "Write in binary mode");

    po.Read(argc, argv);

    if (po.NumArgs() != 2) {
      po.PrintUsage();
      exit(1);
    }
    std::string matrix_in_fn = po.GetArg(1),
                vector_out_fn = po.GetArg(2);
    
    Matrix<BaseFloat> mat;
    ReadKaldiObject(matrix_in_fn, &mat);
  
    Vector<BaseFloat> vec(mat.NumCols());

    for (int32 i = 0; i < mat.NumRows(); i++) {
      vec.AddVec(1.0, mat.Row(i));
    }

    Output ko(vector_out_fn, binary);
    vec.Write(ko.Stream(), binary);
      
    KALDI_LOG << "Summed rows of matrix " << matrix_in_fn << " to " << vector_out_fn;
    
    return 0;
  } catch(const std::exception &e) {
    std::cerr << e.what();
    return -1;
  }
}



